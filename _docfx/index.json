{
  "api/MarymoorStudios.Core.CertificateExtensions.html": {
    "href": "api/MarymoorStudios.Core.CertificateExtensions.html",
    "title": "Class CertificateExtensions",
    "summary": "Class CertificateExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class CertificateExtensions Inheritance object CertificateExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods DeleteX509Store(string, StoreLocation) Permanently delete an X509Store. public static bool DeleteX509Store(string storeName, StoreLocation location) Parameters storeName string The name of the certificate store. location StoreLocation One of the enumeration values that specifies the location of the X.509 certificate store. Returns bool True is successful, false otherwise."
  },
  "api/MarymoorStudios.Core.Contract.html": {
    "href": "api/MarymoorStudios.Core.Contract.html",
    "title": "Class Contract",
    "summary": "Class Contract Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll Used to check contract invariants in either Debug-only (Assert) or Debug and Release (Requires, Invariant, etc.). Contract failures will attempt to break into the debugger, will trace the error, and will throw a ContractViolationException. public static class Contract Inheritance object Contract Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Assert(bool) [Conditional(\"DEBUG\")] public static void Assert(bool condition) Parameters condition bool Assert(bool, string) [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message) Parameters condition bool message string Assert<T>(T, bool) public static T Assert<T>(T retval, bool condition) Parameters retval T condition bool Returns T Type Parameters T Assert<T>(T, bool, string) public static T Assert<T>(T retval, bool condition, string message) Parameters retval T condition bool message string Returns T Type Parameters T Fail() public static void Fail() Fail(string) public static void Fail(string message) Parameters message string FailThrow(string) public static Exception FailThrow(string message) Parameters message string Returns Exception Invariant(bool) public static void Invariant(bool condition) Parameters condition bool Invariant(bool, string) public static void Invariant(bool condition, string message) Parameters condition bool message string Requires(bool) public static void Requires(bool condition) Parameters condition bool Requires(bool, string) public static void Requires(bool condition, string message) Parameters condition bool message string Unused<T>(T) Used to annotate unused parameters to indicate that they are required for method signature contractual reasons even if they are unused in the current implementation. [Conditional(\"DEBUG\")] public static void Unused<T>(T unused) Parameters unused T The unused parameter. Type Parameters T Any type."
  },
  "api/MarymoorStudios.Core.Crc32.html": {
    "href": "api/MarymoorStudios.Core.Crc32.html",
    "title": "Class Crc32",
    "summary": "Class Crc32 Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll CRC Generator. public static class Crc32 Inheritance object Crc32 Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Update(uint, ReadOnlySpan<byte>) public static uint Update(uint crc32, ReadOnlySpan<byte> span) Parameters crc32 uint span ReadOnlySpan<byte> Returns uint"
  },
  "api/MarymoorStudios.Core.EnumTraits-1.html": {
    "href": "api/MarymoorStudios.Core.EnumTraits-1.html",
    "title": "Class EnumTraits<TEnum>",
    "summary": "Class EnumTraits<TEnum> Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class EnumTraits<TEnum> where TEnum : struct, Enum Type Parameters TEnum Inheritance object EnumTraits<TEnum> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Count public static int Count { get; } Property Value int IsEmpty public static bool IsEmpty { get; } Property Value bool MaxValue public static long MaxValue { get; } Property Value long MinValue public static long MinValue { get; } Property Value long Names public static string[] Names { get; } Property Value string[] Values public static TEnum[] Values { get; } Property Value TEnum[] Methods FromLong(long) public static TEnum FromLong(long value) Parameters value long Returns TEnum HasFlags(TEnum, TEnum) public static bool HasFlags(TEnum value, TEnum flag) Parameters value TEnum flag TEnum Returns bool IncrementWrap(TEnum, long) public static TEnum IncrementWrap(TEnum value, long increment = 1) Parameters value TEnum increment long Returns TEnum IsValid(TEnum) public static bool IsValid(TEnum value) Parameters value TEnum Returns bool ToLong(TEnum) public static long ToLong(TEnum value) Parameters value TEnum Returns long"
  },
  "api/MarymoorStudios.Core.GcNotify.html": {
    "href": "api/MarymoorStudios.Core.GcNotify.html",
    "title": "Class GcNotify",
    "summary": "Class GcNotify Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll Notifies when garbage collection occurs. public abstract class GcNotify Inheritance object GcNotify Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GcNotify() protected GcNotify() Methods OnGC(int) Called when a collection occurs. protected abstract void OnGC(int generation) Parameters generation int The generation that was collected."
  },
  "api/MarymoorStudios.Core.Linear.html": {
    "href": "api/MarymoorStudios.Core.Linear.html",
    "title": "Class Linear",
    "summary": "Class Linear Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class Linear Inheritance object Linear Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Move<T>(ref T?) Performs a linear transfer of a capability from the input l-value to the return. public static T? Move<T>(ref T? t) Parameters t T The l-value containing the capability (or null) to be transferred. Returns T The unowned capability (to be assigned to be transferred to a new owner). Type Parameters T The type of the capability."
  },
  "api/MarymoorStudios.Core.LinqExtensions.html": {
    "href": "api/MarymoorStudios.Core.LinqExtensions.html",
    "title": "Class LinqExtensions",
    "summary": "Class LinqExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class LinqExtensions Inheritance object LinqExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods StringJoin<T>(IEnumerable<T>, string) Joins the elements of a sequence into a single string value. public static string StringJoin<T>(this IEnumerable<T> source, string separator = \" \") Parameters source IEnumerable<T> The source sequence. separator string A string to separate items in the resulting concatenation. Returns string A concatenation of the string form of all elements, separated by separator. Type Parameters T The item type of the source. WithIndex<T>(IEnumerable<T>) Projects an existing sequence along with its 0-based indexes. public static IEnumerable<(T, int)> WithIndex<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source sequence. Returns IEnumerable<(T, int)> The same sequence in the same order with indexes. Type Parameters T The item type of the source."
  },
  "api/MarymoorStudios.Core.MathExtensions.html": {
    "href": "api/MarymoorStudios.Core.MathExtensions.html",
    "title": "Class MathExtensions",
    "summary": "Class MathExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class MathExtensions Inheritance object MathExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods IncrementWrap(long, long, long) public static long IncrementWrap(this long value, long max, long increment = 1) Parameters value long max long increment long Returns long"
  },
  "api/MarymoorStudios.Core.MemoryPool-1.html": {
    "href": "api/MarymoorStudios.Core.MemoryPool-1.html",
    "title": "Class MemoryPool<T>",
    "summary": "Class MemoryPool<T> Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll A pool of memory blocks. public abstract class MemoryPool<T> : IDisposable where T : unmanaged Type Parameters T Inheritance object MemoryPool<T> Implements IDisposable Derived SlabMemoryPool<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MemoryPool() protected MemoryPool() Properties MaxSize Returns the maximum buffer size supported by this pool. public abstract int MaxSize { get; } Property Value int Remarks The buffer size is the maximum number of T elements that a memory can contain. Note: This value must be constant for the lifetime of the pool. Methods Dispose() public void Dispose() Dispose(bool) Implements standard Dispose-pattern. protected abstract void Dispose(bool disposing) Parameters disposing bool True if disposing, false if finalizing. Remarks When disposing is true then managed resources should be released. When disposing is false then the object has already gone through garbage collection and only native resources should be touched. ~MemoryPool() protected ~MemoryPool() GetMemory() Returns Memory<T> of size MaxSize. public abstract OwnedMem<T> GetMemory() Returns OwnedMem<T> GetMemory(int) Returns Memory<T> of size size. public OwnedMem<T> GetMemory(int size) Parameters size int Returns OwnedMem<T>"
  },
  "api/MarymoorStudios.Core.MurmurHash3.html": {
    "href": "api/MarymoorStudios.Core.MurmurHash3.html",
    "title": "Class MurmurHash3",
    "summary": "Class MurmurHash3 Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll MurmurHash3 for x64 (Little Endian). public static class MurmurHash3 Inheritance object MurmurHash3 Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Reference: https://en.wikipedia.org/wiki/MurmurHash Methods Hash128(bool, UInt128) MurmurHash3 128-bit implementation. public static UInt128 Hash128(bool value, UInt128 seed) Parameters value bool The data to hash. seed UInt128 The seed to initialize with. Returns UInt128 The 128-bit hash. Hash128(ReadOnlySpan<byte>, UInt128) MurmurHash3 128-bit implementation. public static UInt128 Hash128(ReadOnlySpan<byte> span, UInt128 seed) Parameters span ReadOnlySpan<byte> The data to hash. seed UInt128 The seed to initialize with. Returns UInt128 The 128-bit hash. Hash128(string, UInt128) MurmurHash3 128-bit implementation. public static UInt128 Hash128(string value, UInt128 seed) Parameters value string The data to hash. seed UInt128 The seed to initialize with. Returns UInt128 The 128-bit hash. Hash128<T>(ReadOnlySpan<T>, UInt128) MurmurHash3 128-bit implementation. public static UInt128 Hash128<T>(ReadOnlySpan<T> value, UInt128 seed) where T : unmanaged Parameters value ReadOnlySpan<T> The data to hash. seed UInt128 The seed to initialize with. Returns UInt128 The 128-bit hash. Type Parameters T Hash128<T>(T, UInt128) MurmurHash3 128-bit implementation. public static UInt128 Hash128<T>(T value, UInt128 seed) where T : unmanaged Parameters value T The data to hash. seed UInt128 The seed to initialize with. Returns UInt128 The 128-bit hash. Type Parameters T Hash32(bool, uint) MurmurHash3 32-bit implementation. public static uint Hash32(bool value, uint seed) Parameters value bool The data to hash. seed uint The seed to initialize with. Returns uint The 32-bit hash. Hash32(ReadOnlySpan<byte>, uint) MurmurHash3 32-bit implementation. public static uint Hash32(ReadOnlySpan<byte> span, uint seed) Parameters span ReadOnlySpan<byte> The data to hash. seed uint The seed to initialize with. Returns uint The 32-bit hash. Hash32(string, uint) MurmurHash3 32-bit implementation. public static uint Hash32(string value, uint seed) Parameters value string The data to hash. seed uint The seed to initialize with. Returns uint The 32-bit hash. Hash32<T>(ReadOnlySpan<T>, uint) MurmurHash3 32-bit implementation. public static uint Hash32<T>(ReadOnlySpan<T> value, uint seed) where T : unmanaged Parameters value ReadOnlySpan<T> The data to hash. seed uint The seed to initialize with. Returns uint The 32-bit hash. Type Parameters T Hash32<T>(T, uint) MurmurHash3 32-bit implementation. public static uint Hash32<T>(T value, uint seed) where T : unmanaged Parameters value T The data to hash. seed uint The seed to initialize with. Returns uint The 32-bit hash. Type Parameters T Hash64(bool, ulong) MurmurHash3 64-bit implementation. public static ulong Hash64(bool value, ulong seed) Parameters value bool The data to hash. seed ulong The seed to initialize with. Returns ulong The 64-bit hash. Hash64(ReadOnlySpan<byte>, ulong) MurmurHash3 64-bit implementation. public static ulong Hash64(ReadOnlySpan<byte> span, ulong seed) Parameters span ReadOnlySpan<byte> The data to hash. seed ulong The seed to initialize with. Returns ulong The 64-bit hash. Hash64(string, ulong) MurmurHash3 64-bit implementation. public static ulong Hash64(string value, ulong seed) Parameters value string The data to hash. seed ulong The seed to initialize with. Returns ulong The 64-bit hash. Hash64<T>(ReadOnlySpan<T>, ulong) MurmurHash3 64-bit implementation. public static ulong Hash64<T>(ReadOnlySpan<T> value, ulong seed) where T : unmanaged Parameters value ReadOnlySpan<T> The data to hash. seed ulong The seed to initialize with. Returns ulong The 64-bit hash. Type Parameters T Hash64<T>(T, ulong) MurmurHash3 64-bit implementation. public static ulong Hash64<T>(T value, ulong seed) where T : unmanaged Parameters value T The data to hash. seed ulong The seed to initialize with. Returns ulong The 64-bit hash. Type Parameters T"
  },
  "api/MarymoorStudios.Core.OwnedMem-1.html": {
    "href": "api/MarymoorStudios.Core.OwnedMem-1.html",
    "title": "Struct OwnedMem<T>",
    "summary": "Struct OwnedMem<T> Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll A capability for the exclusive ownership rights to an underlying memory. public struct OwnedMem<T> : IDisposable where T : unmanaged Type Parameters T The element type. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks This is a linear type. These rights can be destroyed (i.e. disposed) or transferred to another party, but they can't be copied or duplicated. Constructors OwnedMem(MemoryManager<T>) Construct a new ownership capability from an existing (potentially pool-backed) memory object. public OwnedMem(MemoryManager<T> memory) Parameters memory MemoryManager<T> The memory whose ownership is irrevocably transferred to this new OwnedMem<T>. OwnedMem(Memory<T>) Construct a new ownership capability from an existing (potentially pool-backed) memory object. public OwnedMem(Memory<T> memory) Parameters memory Memory<T> The memory whose ownership is irrevocably transferred to this new OwnedMem<T>. Properties IsEmpty Returns true if Length is 0. public readonly bool IsEmpty { get; } Property Value bool Length The number of items in the memory. public readonly int Length { get; } Property Value int Memory Returns a borrowed reference to the underlying memory. public readonly Memory<T> Memory { get; } Property Value Memory<T> Span Returns a borrowed reference to the underlying memory's span. public readonly Span<T> Span { get; } Property Value Span<T> Methods Dispose() Dispose pattern. public void Dispose() Slice(int) Forms a slice out of the given memory, beginning at 'start'. public OwnedMem<T> Slice(int start) Parameters start int The index at which to begin this slice. Returns OwnedMem<T> Remarks REQUIRES: the specified start index is in range (<0 or >Length). Slice(int, int) Forms a slice out of the given memory, beginning at 'start', of given length public OwnedMem<T> Slice(int start, int length) Parameters start int The index at which to begin this slice. length int The desired length for the slice (exclusive). Returns OwnedMem<T> Remarks REQUIRES: specified start or end index is in range (<0 or >Length). Operators implicit operator Memory<T>(OwnedMem<T>) Returns a borrowed reference to the underlying memory. public static implicit operator Memory<T>(OwnedMem<T> owned) Parameters owned OwnedMem<T> Returns Memory<T> implicit operator ReadOnlyMemory<T>(OwnedMem<T>) Returns a borrowed reference to the underlying memory. public static implicit operator ReadOnlyMemory<T>(OwnedMem<T> owned) Parameters owned OwnedMem<T> Returns ReadOnlyMemory<T>"
  },
  "api/MarymoorStudios.Core.Promises.AResolver.html": {
    "href": "api/MarymoorStudios.Core.Promises.AResolver.html",
    "title": "Class AResolver",
    "summary": "Class AResolver Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Abstract base class for Resolver<T>. public abstract class AResolver Inheritance object AResolver Derived Resolver<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AResolver() protected AResolver() Properties IsResolved True if the resolver is in a resolved state (either success or failure). public abstract bool IsResolved { get; } Property Value bool ValueType For a Resolver<T>, returns typeof(T). public abstract Type ValueType { get; } Property Value Type Methods AppendOne(Turn) Registers a turn to be scheduled when this resolver becomes resolved. public abstract void AppendOne(Turn turn) Parameters turn Turn The turn to be scheduled. Remarks If this resolver is already resolved then turn will be scheduled immediately."
  },
  "api/MarymoorStudios.Core.Promises.AutoResetEventAsync.html": {
    "href": "api/MarymoorStudios.Core.Promises.AutoResetEventAsync.html",
    "title": "Class AutoResetEventAsync",
    "summary": "Class AutoResetEventAsync Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll An eventual auto-reset event. public sealed class AutoResetEventAsync Inheritance object AutoResetEventAsync Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AutoResetEventAsync(bool) Initializes a new AutoResetEventAsync. public AutoResetEventAsync(bool initialState = false) Parameters initialState bool true if the event is initially signaled. Properties IsSignaled True if the event is in the signaled state. public bool IsSignaled { get; } Property Value bool Methods Signal(Exception?) Signals the event. public void Signal(Exception? error = null) Parameters error Exception An optional error to signal with. Remarks If there are any waiters they are resolved and the event remains in the unsignaled (i.e. the event is pulsed). If there are no waiters then the event is placed in a signaled state. The next waiter to arrive will be resolved immediately and the event will auto-reset at that time. WaitAsync() Waits until the event is in a signaled state. public Promise WaitAsync() Returns Promise Resolves when the event is signaled. Remarks Resolves immediately if the event is already in a signaled state. The signaled state is then auto-reset to unsignaled."
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.ArgumentAttribute.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.ArgumentAttribute.html",
    "title": "Class ArgumentAttribute",
    "summary": "Class ArgumentAttribute Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Defines a command line command group. [AttributeUsage(AttributeTargets.Parameter)] public sealed class ArgumentAttribute : Attribute Inheritance object Attribute ArgumentAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ArgumentAttribute(string, string) Constructor. public ArgumentAttribute(string description = \"\", string name = \"\") Parameters description string See Description. name string See Name. Properties Description Help text that appears with --help. public string Description { get; set; } Property Value string Name Name used on the command line to activate the group. public string Name { get; set; } Property Value string"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.CommandAttribute.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.CommandAttribute.html",
    "title": "Class CommandAttribute",
    "summary": "Class CommandAttribute Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Defines a command line command group. [AttributeUsage(AttributeTargets.Method)] public sealed class CommandAttribute : Attribute Inheritance object Attribute CommandAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors CommandAttribute(string, string) Constructor. public CommandAttribute(string description = \"\", string name = \"\") Parameters description string See Description. name string See Name. Properties Description Help text that appears with --help. public string Description { get; set; } Property Value string Name Name used on the command line to activate the group. public string Name { get; set; } Property Value string"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.CommandGroupAttribute.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.CommandGroupAttribute.html",
    "title": "Class CommandGroupAttribute",
    "summary": "Class CommandGroupAttribute Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Defines a command line command group. [AttributeUsage(AttributeTargets.Class)] public sealed class CommandGroupAttribute : Attribute Inheritance object Attribute CommandGroupAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors CommandGroupAttribute(string, string) Constructor. public CommandGroupAttribute(string description = \"\", string name = \"\") Parameters description string See Description. name string See Name. Properties Description Help text that appears with --help. public string Description { get; set; } Property Value string Name Name used on the command line to activate the group. public string Name { get; set; } Property Value string"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineBuilderExtensions.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineBuilderExtensions.html",
    "title": "Class CommandLineBuilderExtensions",
    "summary": "Class CommandLineBuilderExtensions Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Extensions for CommandLineBuilder. public static class CommandLineBuilderExtensions Inheritance object CommandLineBuilderExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods UseLogging(CommandLineBuilder, ILoggerFactory) Adds a ILoggerFactory as a binding context service. public static CommandLineBuilder UseLogging(this CommandLineBuilder builder, ILoggerFactory loggingFactory) Parameters builder CommandLineBuilder The builder. loggingFactory ILoggerFactory The logger factory singleton to export. Returns CommandLineBuilder UseMarymoorAuthentication(CommandLineBuilder) Adds Identity management. public static CommandLineBuilder UseMarymoorAuthentication(this CommandLineBuilder builder) Parameters builder CommandLineBuilder The builder. Returns CommandLineBuilder UseMemoryPool(CommandLineBuilder, MemoryPool<byte>) Adds a MemoryPool<T> as a binding context service. public static CommandLineBuilder UseMemoryPool(this CommandLineBuilder builder, MemoryPool<byte> pool) Parameters builder CommandLineBuilder The builder. pool MemoryPool<byte> The memory pool singleton to export. Returns CommandLineBuilder"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineExtensions.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineExtensions.html",
    "title": "Class CommandLineExtensions",
    "summary": "Class CommandLineExtensions Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Extends System.CommandLine with support for Promise-based handlers. public static class CommandLineExtensions Inheritance object CommandLineExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods SetHandler(Command, Func<Promise>) Sets a command's handler based on a Func<TResult>. public static void SetHandler(this Command command, Func<Promise> handle) Parameters command Command handle Func<Promise> SetHandler(Command, Func<InvocationContext, Promise>) Sets a command's handler based on a Func<T, TResult>. public static void SetHandler(this Command command, Func<InvocationContext, Promise> handle) Parameters command Command handle Func<InvocationContext, Promise> SetHandler<T>(Command, Func<T, Promise>, IValueDescriptor<T>) Sets a command's handler based on a Func<T, TResult>. public static void SetHandler<T>(this Command command, Func<T, Promise> handle, IValueDescriptor<T> symbol) Parameters command Command handle Func<T, Promise> symbol IValueDescriptor<T> Type Parameters T SetHandler<T1, T2>(Command, Func<T1, T2, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>) Sets a command's handler based on a Func<T1, T2, TResult>. public static void SetHandler<T1, T2>(this Command command, Func<T1, T2, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2) Parameters command Command handle Func<T1, T2, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> Type Parameters T1 T2 SetHandler<T1, T2, T3>(Command, Func<T1, T2, T3, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>) Sets a command's handler based on a Func<T1, T2, T3, TResult>. public static void SetHandler<T1, T2, T3>(this Command command, Func<T1, T2, T3, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3) Parameters command Command handle Func<T1, T2, T3, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> Type Parameters T1 T2 T3 SetHandler<T1, T2, T3, T4>(Command, Func<T1, T2, T3, T4, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>) Sets a command's handler based on a Func<T1, T2, T3, T4, TResult>. public static void SetHandler<T1, T2, T3, T4>(this Command command, Func<T1, T2, T3, T4, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4) Parameters command Command handle Func<T1, T2, T3, T4, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> Type Parameters T1 T2 T3 T4 SetHandler<T1, T2, T3, T4, T5>(Command, Func<T1, T2, T3, T4, T5, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, TResult>. public static void SetHandler<T1, T2, T3, T4, T5>(this Command command, Func<T1, T2, T3, T4, T5, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5) Parameters command Command handle Func<T1, T2, T3, T4, T5, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> Type Parameters T1 T2 T3 T4 T5 SetHandler<T1, T2, T3, T4, T5, T6>(Command, Func<T1, T2, T3, T4, T5, T6, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Func<T1, T2, T3, T4, T5, T6, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> Type Parameters T1 T2 T3 T4 T5 T6 SetHandler<T1, T2, T3, T4, T5, T6, T7>(Command, Func<T1, T2, T3, T4, T5, T6, T7, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>, IValueDescriptor<T7>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, T7, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Func<T1, T2, T3, T4, T5, T6, T7, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, T7, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> symbol7 IValueDescriptor<T7> Type Parameters T1 T2 T3 T4 T5 T6 T7 SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(Command, Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>, IValueDescriptor<T7>, IValueDescriptor<T8>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> symbol7 IValueDescriptor<T7> symbol8 IValueDescriptor<T8> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineExtensionsT.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.CommandLineExtensionsT.html",
    "title": "Class CommandLineExtensionsT",
    "summary": "Class CommandLineExtensionsT Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Extends System.CommandLine with support for Promise-based handlers. public static class CommandLineExtensionsT Inheritance object CommandLineExtensionsT Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods SetHandler(Command, Func<Promise<int>>) Sets a command's handler based on a Func<TResult>. public static void SetHandler(this Command command, Func<Promise<int>> handle) Parameters command Command handle Func<Promise<int>> SetHandler(Command, Func<InvocationContext, Promise<int>>) Sets a command's handler based on a Func<T, TResult>. public static void SetHandler(this Command command, Func<InvocationContext, Promise<int>> handle) Parameters command Command handle Func<InvocationContext, Promise<int>> SetHandler<T>(Command, Func<T, Promise<int>>, IValueDescriptor<T>) Sets a command's handler based on a Func<T, TResult>. public static void SetHandler<T>(this Command command, Func<T, Promise<int>> handle, IValueDescriptor<T> symbol) Parameters command Command handle Func<T, Promise<int>> symbol IValueDescriptor<T> Type Parameters T SetHandler<T1, T2>(Command, Func<T1, T2, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>) Sets a command's handler based on a Func<T1, T2, TResult>. public static void SetHandler<T1, T2>(this Command command, Func<T1, T2, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2) Parameters command Command handle Func<T1, T2, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> Type Parameters T1 T2 SetHandler<T1, T2, T3>(Command, Func<T1, T2, T3, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>) Sets a command's handler based on a Func<T1, T2, T3, TResult>. public static void SetHandler<T1, T2, T3>(this Command command, Func<T1, T2, T3, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3) Parameters command Command handle Func<T1, T2, T3, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> Type Parameters T1 T2 T3 SetHandler<T1, T2, T3, T4>(Command, Func<T1, T2, T3, T4, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>) Sets a command's handler based on a Func<T1, T2, T3, T4, TResult>. public static void SetHandler<T1, T2, T3, T4>(this Command command, Func<T1, T2, T3, T4, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4) Parameters command Command handle Func<T1, T2, T3, T4, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> Type Parameters T1 T2 T3 T4 SetHandler<T1, T2, T3, T4, T5>(Command, Func<T1, T2, T3, T4, T5, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, TResult>. public static void SetHandler<T1, T2, T3, T4, T5>(this Command command, Func<T1, T2, T3, T4, T5, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5) Parameters command Command handle Func<T1, T2, T3, T4, T5, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> Type Parameters T1 T2 T3 T4 T5 SetHandler<T1, T2, T3, T4, T5, T6>(Command, Func<T1, T2, T3, T4, T5, T6, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6>(this Command command, Func<T1, T2, T3, T4, T5, T6, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> Type Parameters T1 T2 T3 T4 T5 T6 SetHandler<T1, T2, T3, T4, T5, T6, T7>(Command, Func<T1, T2, T3, T4, T5, T6, T7, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>, IValueDescriptor<T7>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, T7, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6, T7>(this Command command, Func<T1, T2, T3, T4, T5, T6, T7, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, T7, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> symbol7 IValueDescriptor<T7> Type Parameters T1 T2 T3 T4 T5 T6 T7 SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(Command, Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise<int>>, IValueDescriptor<T1>, IValueDescriptor<T2>, IValueDescriptor<T3>, IValueDescriptor<T4>, IValueDescriptor<T5>, IValueDescriptor<T6>, IValueDescriptor<T7>, IValueDescriptor<T8>) Sets a command's handler based on a Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>. public static void SetHandler<T1, T2, T3, T4, T5, T6, T7, T8>(this Command command, Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise<int>> handle, IValueDescriptor<T1> symbol1, IValueDescriptor<T2> symbol2, IValueDescriptor<T3> symbol3, IValueDescriptor<T4> symbol4, IValueDescriptor<T5> symbol5, IValueDescriptor<T6> symbol6, IValueDescriptor<T7> symbol7, IValueDescriptor<T8> symbol8) Parameters command Command handle Func<T1, T2, T3, T4, T5, T6, T7, T8, Promise<int>> symbol1 IValueDescriptor<T1> symbol2 IValueDescriptor<T2> symbol3 IValueDescriptor<T3> symbol4 IValueDescriptor<T4> symbol5 IValueDescriptor<T5> symbol6 IValueDescriptor<T6> symbol7 IValueDescriptor<T7> symbol8 IValueDescriptor<T8> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.OptionAttribute.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.OptionAttribute.html",
    "title": "Class OptionAttribute",
    "summary": "Class OptionAttribute Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Defines a command line command group. [AttributeUsage(AttributeTargets.Parameter)] public sealed class OptionAttribute : Attribute Inheritance object Attribute OptionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors OptionAttribute(string, string) Constructor. public OptionAttribute(string description = \"\", string name = \"\") Parameters description string See Description. name string See Name. Properties Alias A comma separated list of aliases. public string Alias { get; set; } Property Value string AllowMultiple If true, then multiple arguments are allowed per option token. public bool AllowMultiple { get; set; } Property Value bool Description Help text that appears with --help. public string Description { get; set; } Property Value string Name Name used on the command line to activate the group. public string Name { get; set; } Property Value string NoPrefix If the \"--\" prefix should NOT be added to the option. public bool NoPrefix { get; set; } Property Value bool"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.ServiceProviderBinder-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.ServiceProviderBinder-1.html",
    "title": "Class ServiceProviderBinder<T>",
    "summary": "Class ServiceProviderBinder<T> Namespace MarymoorStudios.Core.Promises.CommandLine Assembly MarymoorStudios.Core.Promises.CommandLine.dll Custom binder for binding through a BindingContext. public sealed class ServiceProviderBinder<T> : BinderBase<T>, IValueDescriptor<T>, IValueDescriptor, IValueSource Type Parameters T Inheritance object BinderBase<T> ServiceProviderBinder<T> Implements IValueDescriptor<T> IValueDescriptor IValueSource Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ServiceProviderBinder() public ServiceProviderBinder() Methods GetBoundValue(BindingContext) protected override T GetBoundValue(BindingContext bindingContext) Parameters bindingContext BindingContext Returns T"
  },
  "api/MarymoorStudios.Core.Promises.CommandLine.html": {
    "href": "api/MarymoorStudios.Core.Promises.CommandLine.html",
    "title": "Namespace MarymoorStudios.Core.Promises.CommandLine",
    "summary": "Namespace MarymoorStudios.Core.Promises.CommandLine Classes ArgumentAttribute Defines a command line command group. CommandAttribute Defines a command line command group. CommandGroupAttribute Defines a command line command group. CommandLineBuilderExtensions Extensions for CommandLineBuilder. CommandLineExtensions Extends System.CommandLine with support for Promise-based handlers. CommandLineExtensionsT Extends System.CommandLine with support for Promise-based handlers. OptionAttribute Defines a command line command group. ServiceProviderBinder<T> Custom binder for binding through a BindingContext."
  },
  "api/MarymoorStudios.Core.Promises.DiagnosticId.html": {
    "href": "api/MarymoorStudios.Core.Promises.DiagnosticId.html",
    "title": "Struct DiagnosticId",
    "summary": "Struct DiagnosticId Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A unique id for diagnostic purposes. [DataContract] public readonly struct DiagnosticId : IEquatable<DiagnosticId> Implements IEquatable<DiagnosticId> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks DiagnosticIds are unique only within the scope of the Sip that allocated them. Different Sips may reuse the same DiagnosticIds. Constructors DiagnosticId(ulong) public DiagnosticId(ulong id) Parameters id ulong Properties Id The underlying value. [DataMember] public ulong Id { get; } Property Value ulong Invalid The invalid id. public static DiagnosticId Invalid { get; } Property Value DiagnosticId IsValid True if not Invalid. public bool IsValid { get; } Property Value bool Methods Create() Allocate a new id from the global allocator. public static DiagnosticId Create() Returns DiagnosticId Equals(DiagnosticId) Value-based equality. public bool Equals(DiagnosticId other) Parameters other DiagnosticId Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(DiagnosticId, DiagnosticId) Value-based equality. public static bool operator ==(DiagnosticId left, DiagnosticId right) Parameters left DiagnosticId right DiagnosticId Returns bool operator !=(DiagnosticId, DiagnosticId) Value-based equality. public static bool operator !=(DiagnosticId left, DiagnosticId right) Parameters left DiagnosticId right DiagnosticId Returns bool"
  },
  "api/MarymoorStudios.Core.Promises.IIPromiseEnumerator-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.IIPromiseEnumerator-1.html",
    "title": "Interface IIPromiseEnumerator<T>",
    "summary": "Interface IIPromiseEnumerator<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Supports a simple asynchronous iteration over a generic collection. public interface IIPromiseEnumerator<out T> : IPromiseDisposable Type Parameters T The type of the elements in the collection. Inherited Members IPromiseDisposable.DisposeAsync() Properties Current Gets the element in the collection at the current position of the enumerator. T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods MoveNextAsync() Advances the enumerator to the next element. Promise<bool> MoveNextAsync() Returns Promise<bool> Resolves to true if the enumerator was successfully advanced, false if the end was reached."
  },
  "api/MarymoorStudios.Core.Promises.IO.FileIO.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.FileIO.html",
    "title": "Class FileIO",
    "summary": "Class FileIO Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll public sealed class FileIO : FileServer, IByRefRemotable, IDisposable, IPromiseDisposable Inheritance object AServer<FileServer> FileServer FileIO Implements IByRefRemotable IDisposable IPromiseDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Create(MemoryPool<byte>, Stream) public static FileProxy Create(MemoryPool<byte> pool, Stream stm) Parameters pool MemoryPool<byte> stm Stream Returns FileProxy Create(MemoryPool<byte>, string, FileOptions) public static FileProxy Create(MemoryPool<byte> pool, string path, FileOptions options = FileOptions.None) Parameters pool MemoryPool<byte> path string options FileOptions Returns FileProxy Dispose() public void Dispose() DisposeAsync() public override Promise DisposeAsync() Returns Promise GetSize() public override Promise<long> GetSize() Returns Promise<long> Open(MemoryPool<byte>, string, FileMode) public static FileProxy Open(MemoryPool<byte> pool, string path, FileMode mode) Parameters pool MemoryPool<byte> path string mode FileMode Returns FileProxy Read(ulong, int) public override Promise<OwnedMem<byte>> Read(ulong offset, int length = -1) Parameters offset ulong length int Returns Promise<OwnedMem<byte>> ReadBytes(ulong, long) public override Bytes ReadBytes(ulong offset = 0, long length = -1) Parameters offset ulong length long Returns Bytes Write(ReadOnlyMemory<byte>, ulong) public override Promise Write(ReadOnlyMemory<byte> buffer, ulong offset) Parameters buffer ReadOnlyMemory<byte> offset ulong Returns Promise WriteBytes(Bytes, ulong) public override Promise WriteBytes(Bytes content, ulong offset = 0) Parameters content Bytes offset ulong Returns Promise"
  },
  "api/MarymoorStudios.Core.Promises.IO.FileProxy.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.FileProxy.html",
    "title": "Class FileProxy",
    "summary": "Class FileProxy Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll public sealed class FileProxy : Proxy<FileServer>, IProxy<FileProxy, FileServer> Inheritance object Proxy<FileServer> FileProxy Implements IProxy<FileProxy, FileServer> Inherited Members Proxy<FileServer>.Sync() Proxy<FileServer>.GetRemoteIdentity() Proxy<FileServer>.AppendOne(ResolverTurn<FileServer>) Proxy<FileServer>.IsFailed Proxy<FileServer>.IsResolved Proxy<FileServer>.Failure object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods FileProxyExtensions.DeserializeFromFile<T>(FileProxy) FileProxyExtensions.SerializeToFile<T>(FileProxy, T) RecordIO.ReplaceRecordIO<T>(FileProxy, FileProxy, MemoryPool<byte>, T) Constructors FileProxy(FileServer) Creates a successfully resolved promise. public FileProxy(FileServer value) Parameters value FileServer FileProxy(Promise<FileServer>) Creates a forwarded promise whose outcome will be the same as p. public FileProxy(Promise<FileServer> p) Parameters p Promise<FileServer> FileProxy(Resolver<FileServer>) Creates an unresolved promise whose future outcome is defined by r. public FileProxy(Resolver<FileServer> r) Parameters r Resolver<FileServer> FileProxy(Proxy<FileServer>) Creates a forwarded promise whose outcome will be the same as p. public FileProxy(Proxy<FileServer> p) Parameters p Proxy<FileServer> FileProxy(Exception) Creates a failed promise whose outcome is ex. public FileProxy(Exception ex) Parameters ex Exception Methods DisposeAsync() public Promise DisposeAsync() Returns Promise GetSize() public Promise<long> GetSize() Returns Promise<long> Read(ulong, int) public Promise<OwnedMem<byte>> Read(ulong offset, int length = -1) Parameters offset ulong length int Returns Promise<OwnedMem<byte>> ReadBytes(ulong, long) public Bytes ReadBytes(ulong offset = 0, long length = -1) Parameters offset ulong length long Returns Bytes Write(ReadOnlyMemory<byte>, ulong) public Promise Write(ReadOnlyMemory<byte> buffer, ulong offset) Parameters buffer ReadOnlyMemory<byte> offset ulong Returns Promise WriteBytes(Bytes, ulong) public Promise WriteBytes(Bytes content, ulong offset = 0) Parameters content Bytes offset ulong Returns Promise Operators implicit operator FileProxy(Promise<FileProxy>) Implicit conversion to its syntax. public static implicit operator FileProxy(Promise<FileProxy> p) Parameters p Promise<FileProxy> Returns FileProxy Explicit Interface Implementations Create(FileServer) Creates a successfully resolved promise. static FileProxy Create(FileServer value) Parameters value FileServer Returns FileProxy Create(Promise<FileServer>) Creates a forwarded promise whose outcome will be the same as p. static FileProxy Create(Promise<FileServer> p) Parameters p Promise<FileServer> Returns FileProxy Create(Resolver<FileServer>) Creates an unresolved promise whose future outcome is defined by r. static FileProxy Create(Resolver<FileServer> r) Parameters r Resolver<FileServer> Returns FileProxy Create(Proxy<FileServer>) Creates a forwarded promise whose outcome will be the same as p. static FileProxy Create(Proxy<FileServer> p) Parameters p Proxy<FileServer> Returns FileProxy Create(Exception) Creates a failed promise whose outcome is ex. static FileProxy Create(Exception ex) Parameters ex Exception Returns FileProxy"
  },
  "api/MarymoorStudios.Core.Promises.IO.FileProxyExtensions.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.FileProxyExtensions.html",
    "title": "Class FileProxyExtensions",
    "summary": "Class FileProxyExtensions Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll public static class FileProxyExtensions Inheritance object FileProxyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods DeserializeFromFile<T>(FileProxy) Parses the binary representation of an MCS DataContract type format from a file. public static Promise<T> DeserializeFromFile<T>(this FileProxy file) Parameters file FileProxy The file to write to. Returns Promise<T> The deserialized value. Type Parameters T The type to deserialize. Exceptions IOException If an IO error occurs. SerializationException If deserialization fails. SerializeToFile<T>(FileProxy, T) Writes the binary representation of an MCS DataContract type to Memory. public static Promise SerializeToFile<T>(this FileProxy file, T data) Parameters file FileProxy The file to write to. data T The value to serialize. Returns Promise Type Parameters T The type to serialize. Exceptions IOException If an IO error occurs. SerializationException If a serialization error occurs."
  },
  "api/MarymoorStudios.Core.Promises.IO.FileServer.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.FileServer.html",
    "title": "Class FileServer",
    "summary": "Class FileServer Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll public abstract class FileServer : AServer<FileServer>, IByRefRemotable Inheritance object AServer<FileServer> FileServer Implements IByRefRemotable Derived FileIO Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors FileServer() protected FileServer() Methods DisposeAsync() public abstract Promise DisposeAsync() Returns Promise GetSize() public abstract Promise<long> GetSize() Returns Promise<long> Read(ulong, int) public abstract Promise<OwnedMem<byte>> Read(ulong offset, int length = -1) Parameters offset ulong length int Returns Promise<OwnedMem<byte>> ReadBytes(ulong, long) public abstract Bytes ReadBytes(ulong offset = 0, long length = -1) Parameters offset ulong length long Returns Bytes Write(ReadOnlyMemory<byte>, ulong) public abstract Promise Write(ReadOnlyMemory<byte> buffer, ulong offset) Parameters buffer ReadOnlyMemory<byte> offset ulong Returns Promise WriteBytes(Bytes, ulong) public abstract Promise WriteBytes(Bytes content, ulong offset = 0) Parameters content Bytes offset ulong Returns Promise"
  },
  "api/MarymoorStudios.Core.Promises.IO.IFile.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.IFile.html",
    "title": "Interface IFile",
    "summary": "Interface IFile Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll [Eventual] public interface IFile Methods DisposeAsync() Promise DisposeAsync() Returns Promise GetSize() Promise<long> GetSize() Returns Promise<long> Read(ulong, int) Promise<OwnedMem<byte>> Read(ulong offset, int length = -1) Parameters offset ulong length int Returns Promise<OwnedMem<byte>> ReadBytes(ulong, long) Bytes ReadBytes(ulong offset = 0, long length = -1) Parameters offset ulong length long Returns Bytes Write(ReadOnlyMemory<byte>, ulong) Promise Write(ReadOnlyMemory<byte> buffer, ulong offset) Parameters buffer ReadOnlyMemory<byte> offset ulong Returns Promise WriteBytes(Bytes, ulong) Promise WriteBytes(Bytes content, ulong offset = 0) Parameters content Bytes offset ulong Returns Promise"
  },
  "api/MarymoorStudios.Core.Promises.IO.RecordIO.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.RecordIO.html",
    "title": "Class RecordIO",
    "summary": "Class RecordIO Namespace MarymoorStudios.Core.Promises.IO Assembly MarymoorStudios.Core.Promises.IO.dll public static class RecordIO Inheritance object RecordIO Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CopyRecordIO(Bytes, Writer, MemoryPool<byte>, Func<TypeId, ReadOnlyMemory<byte>, Promise<bool>>) Copies records from one RecordIO stream to another, optionally with filtering. public static Promise CopyRecordIO(this Bytes source, Bytes.Writer destination, MemoryPool<byte> pool, Func<TypeId, ReadOnlyMemory<byte>, Promise<bool>> filter) Parameters source Bytes The source stream. destination Bytes.Writer The destination stream. pool MemoryPool<byte> The pool to allocate buffers from. filter Func<TypeId, ReadOnlyMemory<byte>, Promise<bool>> Returns true if a record should be copied, false otherwise. Returns Promise ReadRecordIO(Bytes, MemoryPool<byte>, Func<TypeId, ReadOnlyMemory<byte>, Promise>) Reads an entire RecordIO stream. public static Promise ReadRecordIO(this Bytes stm, MemoryPool<byte> pool, Func<TypeId, ReadOnlyMemory<byte>, Promise> visitRecord) Parameters stm Bytes The stream to read from. pool MemoryPool<byte> The pool to allocate buffers from. visitRecord Func<TypeId, ReadOnlyMemory<byte>, Promise> Called once for each record. Returns Promise Success if the stream is parsed without error, the error code otherwise. Remarks pool defines the maximum record policy. No records will be processed larger than its maximum buffer size. visitRecord is passed a ReadOnlyMemory<T> of the record body. If visitRecord returns an error then the sequence is aborted. ReadRecordIO(Bytes, MemoryPool<byte>, Func<TypeId, uint, ReadOnlyMemory<byte>, Promise>) Reads an entire RecordIO stream. public static Promise ReadRecordIO(this Bytes stm, MemoryPool<byte> pool, Func<TypeId, uint, ReadOnlyMemory<byte>, Promise> visitRecord) Parameters stm Bytes The stream to read from. pool MemoryPool<byte> The pool to allocate buffers from. visitRecord Func<TypeId, uint, ReadOnlyMemory<byte>, Promise> Called once for each record. Returns Promise Success if the stream is parsed without error, the error code otherwise. Remarks pool defines the maximum record policy. No records will be processed larger than its maximum buffer size. visitRecord is passed a ReadOnlyMemory<T> of the record body. If visitRecord returns an error then the sequence is aborted. ReplaceRecordIO<T>(FileProxy, FileProxy, MemoryPool<byte>, T) Copies records from one RecordIO stream to another, while deleting all records of the same type as item and replacing them with a single record of item at the end. public static Promise ReplaceRecordIO<T>(this FileProxy source, FileProxy destination, MemoryPool<byte> pool, T item) Parameters source FileProxy The source stream. destination FileProxy The destination stream. pool MemoryPool<byte> The pool to allocate buffers from. item T The item to be written. Returns Promise Type Parameters T The type of the item to write. ReplaceRecordIO<T>(Bytes, Writer, MemoryPool<byte>, T) Copies records from one RecordIO stream to another, while deleting all records of the same type as item and replacing them with a single record of item at the end. public static Promise ReplaceRecordIO<T>(this Bytes source, Bytes.Writer destination, MemoryPool<byte> pool, T item) Parameters source Bytes The source stream. destination Bytes.Writer The destination stream. pool MemoryPool<byte> The pool to allocate buffers from. item T The item to be written. Returns Promise Type Parameters T The type of the item to write. WriteRecordIO<T>(Writer, MemoryPool<byte>, T) Write a serializable item as a record. public static Promise WriteRecordIO<T>(this Bytes.Writer destination, MemoryPool<byte> pool, T item) Parameters destination Bytes.Writer The byte stream to write to. pool MemoryPool<byte> The pool to allocate buffers from. item T The item to be written. Returns Promise Type Parameters T The type of the item to write."
  },
  "api/MarymoorStudios.Core.Promises.IO.html": {
    "href": "api/MarymoorStudios.Core.Promises.IO.html",
    "title": "Namespace MarymoorStudios.Core.Promises.IO",
    "summary": "Namespace MarymoorStudios.Core.Promises.IO Classes FileIO FileProxy FileProxyExtensions FileServer RecordIO Interfaces IFile"
  },
  "api/MarymoorStudios.Core.Promises.IPromiseDisposable.html": {
    "href": "api/MarymoorStudios.Core.Promises.IPromiseDisposable.html",
    "title": "Interface IPromiseDisposable",
    "summary": "Interface IPromiseDisposable Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A promise-based replacement for IAsyncDisposable. public interface IPromiseDisposable Methods DisposeAsync() Promise DisposeAsync() Returns Promise"
  },
  "api/MarymoorStudios.Core.Promises.IPromiseEnumerable-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.IPromiseEnumerable-1.html",
    "title": "Interface IPromiseEnumerable<T>",
    "summary": "Interface IPromiseEnumerable<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Factory for asynchronous enumerators. public interface IPromiseEnumerable<out T> Type Parameters T The type of the elements. Methods GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the collection. IIPromiseEnumerator<out T> GetAsyncEnumerator(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A CancellationToken to cancel the asynchronous iteration. Returns IIPromiseEnumerator<T>"
  },
  "api/MarymoorStudios.Core.Promises.Joiner.html": {
    "href": "api/MarymoorStudios.Core.Promises.Joiner.html",
    "title": "Class Joiner",
    "summary": "Class Joiner Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Joins multiple promises together. public sealed class Joiner : IDisposable Inheritance object Joiner Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Joiner() Constructor. public Joiner() Properties IsDisposed True if Dispose() has been called. public bool IsDisposed { get; } Property Value bool Result Resolves to the outcome of join. public Promise Result { get; } Property Value Promise Remarks Can only resolve once the Joiner has been sealed with Dispose(). Methods Create(out Promise) Creates a new join-scope and yields it outcome. public static Joiner Create(out Promise result) Parameters result Promise The outcome of the join. Returns Joiner The joiner. Dispose() public void Dispose() Link(Promise) Links p to this outcome. public void Link(Promise p) Parameters p Promise Link<T>(Promise<T>) Links p to this outcome. public void Link<T>(Promise<T> p) Parameters p Promise<T> Type Parameters T"
  },
  "api/MarymoorStudios.Core.Promises.Promise-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.Promise-1.html",
    "title": "Struct Promise<T>",
    "summary": "Struct Promise<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A representation of the future outcome of a computation. public readonly struct Promise<T> Type Parameters T The type of the value produced by a successful outcome. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods PromiseOnCompleted.OnCompleted<T>(Promise<T>, Action<T>, Action<Exception>) PromiseWhen.When<T>(Promise<T>, Action<T>) PromiseWhen.When<T>(Promise<T>, Func<T, Promise>) PromiseWhen.When<T, TResult>(Promise<T>, Func<T, Promise<TResult>>) PromiseWhen.When<T, TResult>(Promise<T>, Func<T, TResult>) PromiseWithCancellation.WithCancellation<T>(Promise<T>, CancellationToken) Remarks A promise can be used to reify, track, compose, and wait for the completion of a computation. The outcome (success or failure) cannot be known until after the computation has completed. This is called \"resolving\" the outcome. Constructors Promise() Creates a failed promise whose outcome is UninitializedException. public Promise() Promise(Promise<T>) Creates a forwarded promise whose outcome will be the same as p. public Promise(Promise<T> p) Parameters p Promise<T> Promise(Resolver<T>) Creates an unresolved promise whose future outcome is defined by r. public Promise(Resolver<T> r) Parameters r Resolver<T> Promise(Exception) Creates a failed promise whose outcome is ex. public Promise(Exception ex) Parameters ex Exception Promise(T) Creates a successfully resolved promise. public Promise(T value) Parameters value T Properties Failure The error the promise failed with. public Exception Failure { get; } Property Value Exception Remarks REQUIRES: the promise has failed. IsFailed True if the promise has failed. public bool IsFailed { get; } Property Value bool IsResolved True if the promise is in a resolved state (either success or failure). public bool IsResolved { get; } Property Value bool IsSuccess True if the promise has been resolved successfully. public bool IsSuccess { get; } Property Value bool Result Returns the final outcome. public T Result { get; } Property Value T Remarks REQUIRES: the promise is resolved. If the resolver has failed then the failing error is rethrown from this method. Methods GetAwaiter() Enables await keyword. public PromiseAwaiter<T> GetAwaiter() Returns PromiseAwaiter<T>"
  },
  "api/MarymoorStudios.Core.Promises.Promise.html": {
    "href": "api/MarymoorStudios.Core.Promises.Promise.html",
    "title": "Struct Promise",
    "summary": "Struct Promise Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A representation of the future outcome of a computation. public readonly struct Promise Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods PromiseJoin.Join(Promise, Promise) PromiseJoin.Join(Promise, params Promise[]) PromiseOnCompleted.OnCompleted(Promise, Action, Action<Exception>) PromiseWhen.When(Promise, Action) PromiseWhen.When(Promise, Func<Promise>) PromiseWhen.When<TResult>(Promise, Func<Promise<TResult>>) Remarks A promise can be used to reify, track, compose, and wait for the completion of a computation. The outcome (success or failure) cannot be known until after the computation has completed. This is called \"resolving\" the outcome. Constructors Promise() Creates a successfully resolved promise. public Promise() Promise(Promise) Creates a forwarded promise whose outcome will be the same as p. public Promise(Promise p) Parameters p Promise Promise(Resolver<Void>) Creates an unresolved promise whose future outcome is defined by r. public Promise(Resolver<Void> r) Parameters r Resolver<Void> Promise(Exception) Creates a failed promise whose outcome is ex. public Promise(Exception ex) Parameters ex Exception Properties Done An already successfully resolved promise. public static Promise Done { get; } Property Value Promise Failure The error the promise failed with. public Exception Failure { get; } Property Value Exception Remarks REQUIRES: the promise has failed. IsFailed True if the promise has failed. public bool IsFailed { get; } Property Value bool IsResolved True if the promise is in a resolved state (either success or failure). public bool IsResolved { get; } Property Value bool IsSuccess True if the promise has been resolved successfully. public bool IsSuccess { get; } Property Value bool Methods AppendOne(Turn) Dispatches a turn. public void AppendOne(Turn turn) Parameters turn Turn A turn to schedule when resolved. From<T>(T) An already successfully resolved promise. public static Promise<T> From<T>(T value) Parameters value T The value Returns Promise<T> Type Parameters T The type of the value. GetAwaiter() Enables await keyword. public PromiseAwaiter GetAwaiter() Returns PromiseAwaiter Operators implicit operator Promise<Void>(Promise) Converts a Promise to an equivalent Promise<T>. public static implicit operator Promise<Void>(Promise p) Parameters p Promise The promise to convert. Returns Promise<Void> implicit operator Promise(Promise<Void>) Converts a Promise<T> to an equivalent Promise. public static implicit operator Promise(Promise<Void> p) Parameters p Promise<Void> The promise to convert. Returns Promise"
  },
  "api/MarymoorStudios.Core.Promises.PromiseAwaiter-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseAwaiter-1.html",
    "title": "Struct PromiseAwaiter<T>",
    "summary": "Struct PromiseAwaiter<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Enables the await keyword for Promise<T>. public readonly struct PromiseAwaiter<T> : ICriticalNotifyCompletion, INotifyCompletion Type Parameters T The type of the value produced by a successful outcome. Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors PromiseAwaiter(Promise<T>) Constructor. public PromiseAwaiter(Promise<T> p) Parameters p Promise<T> Properties IsCompleted True if the promise has been resolved successfully. public bool IsCompleted { get; } Property Value bool Methods GetResult() Returns the final outcome of the awaited promise. public T GetResult() Returns T"
  },
  "api/MarymoorStudios.Core.Promises.PromiseAwaiter.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseAwaiter.html",
    "title": "Struct PromiseAwaiter",
    "summary": "Struct PromiseAwaiter Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Enables the await keyword for Promise. public readonly struct PromiseAwaiter : ICriticalNotifyCompletion, INotifyCompletion Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors PromiseAwaiter(Promise) Constructor. public PromiseAwaiter(Promise p) Parameters p Promise Properties IsCompleted True if the promise has been resolved successfully. public bool IsCompleted { get; } Property Value bool Methods GetResult() Rethrows the Exception of failed promises, otherwise does nothing. public void GetResult()"
  },
  "api/MarymoorStudios.Core.Promises.PromiseJoin.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseJoin.html",
    "title": "Class PromiseJoin",
    "summary": "Class PromiseJoin Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll public static class PromiseJoin Inheritance object PromiseJoin Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Join(Promise, Promise) Joins two promises into a single outcome. public static Promise Join(this Promise left, Promise right) Parameters left Promise The first promise to join. right Promise Zero or more other promises. Returns Promise A promise that resolves when all other promises resolve. Remarks Produces an aggregate exception if any errors are encountered. Join(Promise, params Promise[]) Joins two or more promises into a single outcome. public static Promise Join(this Promise left, params Promise[] join) Parameters left Promise The first promise to join. join Promise[] Zero or more other promises. Returns Promise A promise that resolves when all other promises resolve. Remarks Produces an aggregate exception if any errors are encountered."
  },
  "api/MarymoorStudios.Core.Promises.PromiseMethodBuilder-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseMethodBuilder-1.html",
    "title": "Struct PromiseMethodBuilder<T>",
    "summary": "Struct PromiseMethodBuilder<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Enables the async keyword for methods that return a Promise<T>. public struct PromiseMethodBuilder<T> Type Parameters T The type of the value produced by a successful outcome. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Task A promise for the final outcome of an async methods. public Promise<T> Task { get; } Property Value Promise<T> Remarks Called by the compiler generated code at the callsite of an async method to retrieve a promise for the methods eventual outcome. Methods AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedule the resumption of an async method during a blocking await point for awaitables that only implement the base INotifyCompletion notification style. public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine Parameters awaiter TAwaiter The awaiter of the awaitable this async method is blocking on. stateMachine TStateMachine The state machine that captures the resumable state of this async method. Type Parameters TAwaiter The type of the awaiter of the awaitable this async method is blocking on. TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedule the resumption of an async method during a blocking await point for awaitables that also implement the newer ICriticalNotifyCompletion notification style. public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine Parameters awaiter TAwaiter The awaiter of the awaitable this async method is blocking on. stateMachine TStateMachine The state machine that captures the resumable state of this async method. Type Parameters TAwaiter The type of the awaiter of the awaitable this async method is blocking on. TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. Create() Factor method for this builder. public static PromiseMethodBuilder<T> Create() Returns PromiseMethodBuilder<T> A new builder. Remarks This is used by the generated code to create a new instance of the builder when an async method's is first pushed on the stack. SetException(Exception) Resolve the return value with a failed outcome. public void SetException(Exception ex) Parameters ex Exception The error that caused the failure. Remarks Called by the compiler generated code at any failure exit point from the async method to inform callers of the final outcome. SetResult(T) Resolve the return value with a successful outcome. public void SetResult(T value) Parameters value T Remarks Called by the compiler generated code at any successful exit point from the async method to inform callers of the final outcome. SetStateMachine(IAsyncStateMachine) Hoists the state machine into the heap to be saved across a blocking await. public readonly void SetStateMachine(IAsyncStateMachine stateMachine) Parameters stateMachine IAsyncStateMachine The stack frame instance to be saved. Start<TStateMachine>(ref TStateMachine) Starts the async method's state machine. public readonly void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine Parameters stateMachine TStateMachine An instance of TStateMachine for the current stack frame. Type Parameters TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. Remarks Note that stateMachine is passed by ref here because it has been allocated on the stack frame at this point. It won't be hoisted to the heap (causing a heap allocation) until and unless at least one of the await points actually blocks. This is an optimization to avoid unnecessary heap allocations if all awaitables turn out to already ben resolved (a common case in some circumstances)."
  },
  "api/MarymoorStudios.Core.Promises.PromiseMethodBuilder.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseMethodBuilder.html",
    "title": "Struct PromiseMethodBuilder",
    "summary": "Struct PromiseMethodBuilder Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Enables the async keyword for methods that return a Promise. public struct PromiseMethodBuilder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Task A promise for the final outcome of an async methods. public Promise Task { get; } Property Value Promise Remarks Called by the compiler generated code at the callsite of an async method to retrieve a promise for the methods eventual outcome. Methods AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedule the resumption of an async method during a blocking await point for awaitables that only implement the base INotifyCompletion notification style. public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine Parameters awaiter TAwaiter The awaiter of the awaitable this async method is blocking on. stateMachine TStateMachine The state machine that captures the resumable state of this async method. Type Parameters TAwaiter The type of the awaiter of the awaitable this async method is blocking on. TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) Schedule the resumption of an async method during a blocking await point for awaitables that also implement the newer ICriticalNotifyCompletion notification style. public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine Parameters awaiter TAwaiter The awaiter of the awaitable this async method is blocking on. stateMachine TStateMachine The state machine that captures the resumable state of this async method. Type Parameters TAwaiter The type of the awaiter of the awaitable this async method is blocking on. TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. Create() Factor method for this builder. public static PromiseMethodBuilder Create() Returns PromiseMethodBuilder A new builder. Remarks This is used by the generated code to create a new instance of the builder when an async method's is first pushed on the stack. SetException(Exception) Resolve the return value with a failed outcome. public void SetException(Exception ex) Parameters ex Exception The error that caused the failure. Remarks Called by the compiler generated code at any failure exit point from the async method to inform callers of the final outcome. SetResult() Resolve the return value with a successful outcome. public void SetResult() Remarks Called by the compiler generated code at any successful exit point from the async method to inform callers of the final outcome. SetStateMachine(IAsyncStateMachine) Hoists the state machine into the heap to be saved across a blocking await. public readonly void SetStateMachine(IAsyncStateMachine stateMachine) Parameters stateMachine IAsyncStateMachine The stack frame instance to be saved. Start<TStateMachine>(ref TStateMachine) Starts the async method's state machine. public readonly void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine Parameters stateMachine TStateMachine An instance of TStateMachine for the current stack frame. Type Parameters TStateMachine The anonymous type generated by the compiler to captured stack variables and provide resumption logic for each await point. Remarks Note that stateMachine is passed by ref here because it has been allocated on the stack frame at this point. It won't be hoisted to the heap (causing a heap allocation) until and unless at least one of the await points actually blocks. This is an optimization to avoid unnecessary heap allocations if all awaitables turn out to already ben resolved (a common case in some circumstances)."
  },
  "api/MarymoorStudios.Core.Promises.PromiseOnCompleted.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseOnCompleted.html",
    "title": "Class PromiseOnCompleted",
    "summary": "Class PromiseOnCompleted Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll public static class PromiseOnCompleted Inheritance object PromiseOnCompleted Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods OnCompleted(Promise, Action, Action<Exception>) Executes a continuation when the target resolves (with failure-coalescing). public static void OnCompleted(this Promise target, Action success, Action<Exception> failure) Parameters target Promise The trigger for execution. success Action The action to execute if the trigger succeeded. failure Action<Exception> The action to execute if the trigger failed. OnCompleted<T>(Promise<T>, Action<T>, Action<Exception>) Executes a continuation when the target resolves (with failure-coalescing). public static void OnCompleted<T>(this Promise<T> target, Action<T> success, Action<Exception> failure) Parameters target Promise<T> The trigger for execution. success Action<T> The action to execute if the trigger succeeded. failure Action<Exception> The action to execute if the trigger failed. Type Parameters T"
  },
  "api/MarymoorStudios.Core.Promises.PromiseWhen.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseWhen.html",
    "title": "Class PromiseWhen",
    "summary": "Class PromiseWhen Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll public static class PromiseWhen Inheritance object PromiseWhen Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods When(Promise, Action) Executes a continuation when the target resolves (with failure-coalescing). public static Promise When(this Promise target, Action body) Parameters target Promise The trigger for execution. body Action The continuation to execute if the trigger succeeded. Returns Promise Resolves to the outcome (either the trigger's failure, or the continuation's outcome). When(Promise, Func<Promise>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise When(this Promise target, Func<Promise> body) Parameters target Promise The trigger for execution. body Func<Promise> The continuation to execute if the trigger succeeded. Returns Promise Resolves to the outcome (either the trigger's failure, or the continuation's outcome). When<TResult>(Promise, Func<Promise<TResult>>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise<TResult> When<TResult>(this Promise target, Func<Promise<TResult>> body) Parameters target Promise The trigger for execution. body Func<Promise<TResult>> The continuation to execute if the trigger succeeded. Returns Promise<TResult> Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters TResult When<T>(Promise<T>, Action<T>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise When<T>(this Promise<T> target, Action<T> body) Parameters target Promise<T> The trigger for execution. body Action<T> The continuation to execute if the trigger succeeded. Returns Promise Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters T When<T>(Promise<T>, Func<T, Promise>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise When<T>(this Promise<T> target, Func<T, Promise> body) Parameters target Promise<T> The trigger for execution. body Func<T, Promise> The continuation to execute if the trigger succeeded. Returns Promise Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters T When<T, TResult>(Promise<T>, Func<T, Promise<TResult>>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise<TResult> When<T, TResult>(this Promise<T> target, Func<T, Promise<TResult>> body) Parameters target Promise<T> The trigger for execution. body Func<T, Promise<TResult>> The continuation to execute if the trigger succeeded. Returns Promise<TResult> Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters T TResult When<T, TResult>(Promise<T>, Func<T, TResult>) Executes a continuation when the target resolves (with failure-coalescing). public static Promise<TResult> When<T, TResult>(this Promise<T> target, Func<T, TResult> body) Parameters target Promise<T> The trigger for execution. body Func<T, TResult> The continuation to execute if the trigger succeeded. Returns Promise<TResult> Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters T TResult"
  },
  "api/MarymoorStudios.Core.Promises.PromiseWithCancellation.html": {
    "href": "api/MarymoorStudios.Core.Promises.PromiseWithCancellation.html",
    "title": "Class PromiseWithCancellation",
    "summary": "Class PromiseWithCancellation Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll public static class PromiseWithCancellation Inheritance object PromiseWithCancellation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WithCancellation<T>(Promise<T>, CancellationToken) Adds the ability to cancel awaiting on an underlying promise. public static Promise<T> WithCancellation<T>(this Promise<T> target, CancellationToken cancel) Parameters target Promise<T> The underlying promise. cancel CancellationToken A token to indicate that awaiting on target should be cancelled. Returns Promise<T> A promise that either is cancelled or forwarded to the underlying promise. Type Parameters T The type of the underlying promise. Remarks Cancellation ONLY cancels the awaiting on the underlying promise, not the underlying promise itself or the eventual computation that will produce that promise. To cancel the eventual computation itself a CancellationToken should be passed to that computation when it is started."
  },
  "api/MarymoorStudios.Core.Promises.Resolver-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.Resolver-1.html",
    "title": "Class Resolver<T>",
    "summary": "Class Resolver<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A capability for resolving an eventual computation. public sealed class Resolver<T> : AResolver Type Parameters T Inheritance object AResolver Resolver<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks A resolver is used to produce the outcome for an eventual computation being tracked by a Promise or a Promise<T>. Producing an outcome (success or failure) is a one-way function. Once an outcome is determined it cannot be taken back or altered. Multiple observers (e.g. multiple Promise's) may share the outcome. Constructors Resolver() Creates a new unresolved resolver. public Resolver() Resolver(Exception) Creates a failed resolver whose outcome is ex. public Resolver(Exception ex) Parameters ex Exception The error the resolver failed with. Resolver(T) Creates a successfully resolved resolver whose outcome is value. public Resolver(T value) Parameters value T The successful value. Properties Failure The error the resolver failed with. public Exception Failure { get; } Property Value Exception Remarks REQUIRES: the resolver has failed. IsFailed True if the resolver has failed. public bool IsFailed { get; } Property Value bool IsResolved True if the resolver is in a resolved state (either success or failure). public override sealed bool IsResolved { get; } Property Value bool IsSuccess True if the resolver has been resolved successfully. public bool IsSuccess { get; } Property Value bool ValueType For a Resolver<T>, returns typeof(T). public override sealed Type ValueType { get; } Property Value Type Methods AppendOne(Turn) Registers a turn to be scheduled when this resolver becomes resolved. public override sealed void AppendOne(Turn turn) Parameters turn Turn The turn to be scheduled. Remarks If this resolver is already resolved then turn will be scheduled immediately. Break(Exception) Permanently transition the resolver to the \"failed\" state with ex as the outcome. public void Break(Exception ex) Parameters ex Exception The error to use in a failed outcome. Forward(Promise<T>) Permanently transition the resolver to the \"forwarded\" state with whatever p's outcome becomes as the outcome. public void Forward(Promise<T> p) Parameters p Promise<T> The promise whose future outcome should be this resolver's outcome. Forward(Resolver<T>) Permanently transition the resolver to the \"forwarded\" state with whatever r's outcome becomes as the outcome. public void Forward(Resolver<T> r) Parameters r Resolver<T> The resolver whose future outcome should be this resolver's outcome. GetResult() Returns the final outcome. public T GetResult() Returns T Remarks REQUIRES: the resolver is resolved. If the resolver has failed then the failing error is rethrown from this method. Resolve(T) Permanently transition the resolver to the \"success\" state with value as the outcome. public void Resolve(T value) Parameters value T The value to use in a successful outcome."
  },
  "api/MarymoorStudios.Core.Promises.ResolverExtensions.html": {
    "href": "api/MarymoorStudios.Core.Promises.ResolverExtensions.html",
    "title": "Class ResolverExtensions",
    "summary": "Class ResolverExtensions Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Extensions for Resolver<T>. public static class ResolverExtensions Inheritance object ResolverExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Resolve(Resolver<Void>) Resolve Promise without a value. public static void Resolve(this Resolver<Void> r) Parameters r Resolver<Void> The resolver"
  },
  "api/MarymoorStudios.Core.Promises.ResolverTurn-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.ResolverTurn-1.html",
    "title": "Class ResolverTurn<T>",
    "summary": "Class ResolverTurn<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll public abstract class ResolverTurn<T> : Turn Type Parameters T Inheritance object Turn ResolverTurn<T> Derived ARpcMessage<TServer> Inherited Members Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ResolverTurn() protected ResolverTurn() Methods OnFailure(Exception) Execute the error path when the outcome is a failure. protected abstract void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(T) Execute the success path when the outcome is a success. protected abstract void OnSuccess(T value) Parameters value T The successful outcome. ResetTurnState() Allows the turn to be reused (after Run()). protected void ResetTurnState() Run() Runs the computation of this Turn when chosen for execution by the Scheduler. protected override sealed void Run()"
  },
  "api/MarymoorStudios.Core.Promises.RingBuffer-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.RingBuffer-1.html",
    "title": "Class RingBuffer<T>",
    "summary": "Class RingBuffer<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A fixed-sized, shared-memory, Transport<T>. public sealed class RingBuffer<T> : Transport<T>, IDisposable Type Parameters T The item type. Inheritance object Transport<T> RingBuffer<T> Implements IDisposable Inherited Members Transport<T>.Dispose() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RingBuffer(ushort, ushort) Constructs a new RingBuffer<T> public RingBuffer(ushort capacity, ushort threshold = 1) Parameters capacity ushort The size of the buffer allocated (in number of items). threshold ushort The number of items of empty space available before the producer is signaled. Remarks REQUIRES: capacity > 2 REQUIRES: 1 <= threshold < capacity -1 Capacity is equal to the size of the memory allocation (in number of items) but one item is consumed as a sentinel for \"full\", so the buffer can actually hold one less. Threshold is used to decrease ping-ponging by delaying waking the producer until there are more items in the buffer. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available. Properties ConsumerEvent Event to efficiently signal the consumer when items are available to read. public override sealed WaitHandle ConsumerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between an empty queue and having at least one item, so the caller should read the queue to completion before waiting on this event. ProducerEvent Event to efficiently signal the producer when slots are available to write. public override sealed WaitHandle ProducerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between a full queue and having at least threshold items, so the caller should write to the queue until full before waiting on this event. Methods Close(TransportFlags) Marks the buffer as closed atomically. public override sealed bool Close(TransportFlags flags = TransportFlags.Closed) Parameters flags TransportFlags Indicates which side(s) to close. Returns bool True if the both sides have closed, false if only one side has closed as of this call. Remarks No more items can be inserted after this call returns. Either side (producer or consumer) can close the buffer. Typically, the consumer will continue to read items until TryDequeue(out T) indicates the closure has been seen. This ensures that all buffered items have been removed, regardless of which side closed first. Both sides should close the buffer before the last side to close can then safely dispose. Dispose(bool) Standard dispose pattern for subclasses. protected override sealed void Dispose(bool disposing) Parameters disposing bool True if both native and managed resources are being disposed. False if only native resources (i.e. in finalizer). TryDequeue(out T) Attempt to remove an item from the front of the buffer. public override sealed bool TryDequeue(out T item) Parameters item T If successful, the item removed from the buffer, default otherwise. Returns bool True if an item was successfully remove, false if the buffer is empty. Remarks If item is successfully removed the caller takes ownership of it and is responsible for releasing its resources. If the attempt to dequeue fails then item is default. Exceptions AbortedException If the buffer has been closed AND all buffered items have been read. TryEnqueue(ref T) Attempt to insert an item at the end of the buffer. public override sealed bool TryEnqueue(ref T item) Parameters item T The item to be inserted. Returns bool True if the item was inserted, false if the buffer is full. Remarks On a successful insert the buffer takes ownership of item and its value is set to default. If item cannot be inserted (either because 'full' or 'closed') then false is returned and item is unmodified (still owned by the caller); the caller is then responsible for releasing any resources. Exceptions AbortedException If the buffer has already been closed."
  },
  "api/MarymoorStudios.Core.Promises.SafeDispose.html": {
    "href": "api/MarymoorStudios.Core.Promises.SafeDispose.html",
    "title": "Class SafeDispose",
    "summary": "Class SafeDispose Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Utilities to safely dispose generic values. public static class SafeDispose Inheritance object SafeDispose Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Dispose<T>(Span<T>) Disposes a set of generic values IFF each is disposable. public static Promise Dispose<T>(Span<T> batch) Parameters batch Span<T> Returns Promise Type Parameters T Remarks This method is a no-op for non-disposable values. This method NEVER fails. Dispose<T>(T) Disposes a generic value IFF it is disposable. public static Promise Dispose<T>(T item) Parameters item T Returns Promise Type Parameters T Remarks This method is a no-op for non-disposable values. This method NEVER fails."
  },
  "api/MarymoorStudios.Core.Promises.Scheduler.html": {
    "href": "api/MarymoorStudios.Core.Promises.Scheduler.html",
    "title": "Class Scheduler",
    "summary": "Class Scheduler Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A scheduler of turns. public sealed class Scheduler : IDisposable Inheritance object Scheduler Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Scheduler() public Scheduler() Properties Current The current scheduler. public static Scheduler Current { get; set; } Property Value Scheduler Remarks Only one scheduler can be active on a thread at one time. Id The diagnostic id of the current scheduler. public static DiagnosticId Id { get; } Property Value DiagnosticId IsAttached True if a scheduler is attached to the current thread. public static bool IsAttached { get; } Property Value bool Methods AddExternal(Action) Adds an external (thread-safe) turn to the external turn queue. public void AddExternal(Action turn) Parameters turn Action Remarks The caller is responsible for ensuring that turn does not close over any non-thread safe state. AddExternal(Action<object?, object?, object?>, object?, object?, object?) Adds an external (thread-safe) turn to the external turn queue. public void AddExternal(Action<object?, object?, object?> turn, object? state1, object? state2, object? state3) Parameters turn Action<object, object, object> state1 object 1st state to be passed to the action. state2 object 2nd state to be passed to the action. state3 object 3rd state to be passed to the action. Remarks The caller is responsible for ensuring that turn does not close over any non-thread safe state. AddExternal(Action<object?, object?>, object?, object?) Adds an external (thread-safe) turn to the external turn queue. public void AddExternal(Action<object?, object?> turn, object? state1, object? state2) Parameters turn Action<object, object> state1 object 1st state to be passed to the action. state2 object 2nd state to be passed to the action. Remarks The caller is responsible for ensuring that turn does not close over any non-thread safe state. AddExternal(Action<object?>, object?) Adds an external (thread-safe) turn to the external turn queue. public void AddExternal(Action<object?> turn, object? state) Parameters turn Action<object> state object state to be passed to the action. Remarks The caller is responsible for ensuring that turn does not close over any non-thread safe state. Delay(TimeSpan) Creates a promise that will resolve after a time delay. public static Promise Delay(TimeSpan delay) Parameters delay TimeSpan The time span to wait. Returns Promise A Promise that will resolve when at least delay time has passed. Detach() Detaches a scheduler from the current thread. public void Detach() Remarks Attempts to detach a scheduler from the current thread. If the given scheduler is NOT the current scheduler on the thread (perhaps because it has already been detached or disposed) then this method does nothing. Dispose() public void Dispose() Run(Turn) Runs an abstract turn on the current scheduler. public static void Run(Turn turn) Parameters turn Turn The turn to run. Run(Func<Promise>) Runs an abstract eventual function on the current scheduler. public static Promise Run(Func<Promise> func) Parameters func Func<Promise> The function to run. Returns Promise A Promise that will resolve when func completes. Run(CancellationToken) Converts a cancellation token into a Promise on the current scheduler. public static Promise Run(CancellationToken cancel) Parameters cancel CancellationToken The cancellation token to convert. Returns Promise A Promise that will resolve when cancel is cancelled. RunUntilCancelled(CancellationToken, bool) Runs all turns (internal and external) until cancellation is signaled. public bool RunUntilCancelled(CancellationToken cancel, bool canBlock = true) Parameters cancel CancellationToken The cancellation token to cancel operation. canBlock bool True if the loop should block on IO (or exit). Returns bool True if there is more local work to do, or false if blocked on IO or cancelled."
  },
  "api/MarymoorStudios.Core.Promises.Sip.html": {
    "href": "api/MarymoorStudios.Core.Promises.Sip.html",
    "title": "Class Sip",
    "summary": "Class Sip Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A Software Isolated Process (SIP). public sealed class Sip : IDisposable Inheritance object Sip Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks A Software Isolated Process (SIP) is a single-threaded container that logically encapsulates a collection of concurrent (but not parallel) activities. A SIP may only execute on a single thread at a time, but at certain points (aka top-of-turn) it can be moved between threads (as all program state is known to be in the heap). Being single-threaded, all computation within a SIP does not need locks, and is free from race conditions. Computations running within a SIP can communicate with other SIP, either in the same process, in another process on the same machine, or on another machine, by using non-blocking Remote Procedure Calls (such as through Promise-based RPC). Once created, a SIP can be run until either: The completion of a root computation (e.g. an AsyncMain function). The SIP's progress is blocked on IO (including timers). Constructors Sip() Constructs a new SIP. public Sip() Methods CreateAndRun(Func<Promise>) Create a sip, run it to completion on the current thread, and then dispose it. public static void CreateAndRun(Func<Promise> asyncMain) Parameters asyncMain Func<Promise> The root computation. See Run(Func<Promise>) CreateAndRun<TArgs>(TArgs, Func<TArgs, Promise>) Create a sip, run it to completion on the current thread, and then dispose it. public static void CreateAndRun<TArgs>(TArgs args, Func<TArgs, Promise> asyncMain) Parameters args TArgs The arguments to the root computation. asyncMain Func<TArgs, Promise> The root computation. See Run(Func<Promise>) Type Parameters TArgs CreateAndRun<TArgs, TReturn>(TArgs, Func<TArgs, Promise<TReturn>>) Create a sip, run it to completion on the current thread, and then dispose it. public static TReturn CreateAndRun<TArgs, TReturn>(TArgs args, Func<TArgs, Promise<TReturn>> asyncMain) Parameters args TArgs The arguments to the root computation. asyncMain Func<TArgs, Promise<TReturn>> The root computation. See Run(Func<Promise>) Returns TReturn Type Parameters TArgs TReturn Dispose() public void Dispose() Run(Func<Promise>) Run until the root computation asyncMain has completed. public void Run(Func<Promise> asyncMain) Parameters asyncMain Func<Promise> The root computation. Remarks All computation within the SIP should be rolled up hierarchically into the return value of asyncMain. Run<TArgs>(TArgs, Func<TArgs, Promise>) Run until the root computation asyncMain has completed. public void Run<TArgs>(TArgs args, Func<TArgs, Promise> asyncMain) Parameters args TArgs The arguments to the root computation. asyncMain Func<TArgs, Promise> The root computation. Type Parameters TArgs Remarks All computation within the SIP should be rolled up hierarchically into the return value of asyncMain. Run<TArgs, TReturn>(TArgs, Func<TArgs, Promise<TReturn>>) Run until the root computation asyncMain has completed. public TReturn Run<TArgs, TReturn>(TArgs args, Func<TArgs, Promise<TReturn>> asyncMain) Parameters args TArgs The arguments to the root computation. asyncMain Func<TArgs, Promise<TReturn>> The root computation. Returns TReturn Type Parameters TArgs TReturn Remarks All computation within the SIP should be rolled up hierarchically into the return value of asyncMain."
  },
  "api/MarymoorStudios.Core.Promises.Transport-1.html": {
    "href": "api/MarymoorStudios.Core.Promises.Transport-1.html",
    "title": "Class Transport<T>",
    "summary": "Class Transport<T> Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A FIFO queue of ordered discrete items. public abstract class Transport<T> : IDisposable Type Parameters T The item type. Inheritance object Transport<T> Implements IDisposable Derived RingBuffer<T> TcpTransport Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The Transport<T> is a FIFO for communicating a totally ordered series of \"items\" from a producer to a consumer. Though the Transport<T> is thread-safe, it supports only a single producer and a single consumer at one time. The producer and consumer MAY (and usually do) operate in separate threads. (The producer and consumer MAY operate in a single thread, but care should be taken when waiting on the handles (see below) to ensure the thread is not live-locked.) A Transport<T> takes \"ownership\" of any item written to the queue and subsequently transfers \"ownership\" to the consumer when the item is read. The consumer is responsible for releasing or disposing any linear resources transferred through the queue (including memory buffers). The Transport<T> supports efficient blocking for both producer and consumer operations through the ProducerEvent and ConsumerEvent properties respectively. The producer handle is guaranteed to be signaled ONLY AFTER a failed enqueue operation due to the queue being full. Similarly, the consumer handle is guaranteed to be signaled ONLY AFTER a failed dequeue operation due to the queue being empty. Both the producer and the consumer should loop performing their operations until a blocking condition is so indicated before attempting to wait on their respective handle. The wait handles MAY over-signal (i.e. signal even though the corresponding operation will fail due to resource constraints). The caller should be prepared to wait again if that happens. All events will be signaled at least once if the buffer is \"closed\" by either party. Events are NOT guaranteed to be signaled MORE THAN ONCE after a Close(TransportFlags), so both parties MUST aggressively respond to closure indications. It is \"safe\" to call any operation after a successful \"close\" by either (or both) parties. Producers will receive a persistent AbortedException on all enqueue attempts after closure. Consumers will receive a persistent AbortedException on all dequeue attempts ONLY AFTER all pending items have been delivered (allowing the consumer to release and dispose all pending resources safely). Both parties MUST call Close(TransportFlags) at least once. In general the consumer \"owns\" the Transport<T> and is responsible for calling Dispose() when it is no longer needed. The consumer MUST ensure that the producer has released any references to the ProducerEvent which it does so by calling Close(TransportFlags) on its side and receiving a true response. The producer should NEVER access any part of the Transport<T> or its handles AFTER calling Close(TransportFlags) for its side. The consumer MUST release any references to the ConsumerEvent BEFORE calling Dispose(). If the consumer initiates closure it should: Call TryDequeue(out T) in a loop until the queue is empty, then Call Close(TransportFlags) again. If Close(TransportFlags) returns true then it is \"safe\" to dispose, otherwise. Wait on ConsumerEvent until it signals (indicating that the producer has called Close(TransportFlags)) and then dispose. It is \"safe\" for the producer to dispose the Transport<T> ONLY IF the consumer was never successfully started. Constructors Transport() protected Transport() Properties ConsumerEvent Event to efficiently signal the consumer when items are available to read. public abstract WaitHandle ConsumerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between an empty queue and having at least one item, so the caller should read the queue to completion before waiting on this event. ProducerEvent Event to efficiently signal the producer when slots are available to write. public abstract WaitHandle ProducerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between a full queue and having at least threshold items, so the caller should write to the queue until full before waiting on this event. Methods Close(TransportFlags) Marks the buffer as closed atomically. public abstract bool Close(TransportFlags flags = TransportFlags.Closed) Parameters flags TransportFlags Indicates which side(s) to close. Returns bool True if the both sides have closed, false if only one side has closed as of this call. Remarks No more items can be inserted after this call returns. Either side (producer or consumer) can close the buffer. Typically, the consumer will continue to read items until TryDequeue(out T) indicates the closure has been seen. This ensures that all buffered items have been removed, regardless of which side closed first. Both sides should close the buffer before the last side to close can then safely dispose. Dispose() public void Dispose() Dispose(bool) Standard dispose pattern for subclasses. protected virtual void Dispose(bool disposing) Parameters disposing bool True if both native and managed resources are being disposed. False if only native resources (i.e. in finalizer). ~Transport() Finalizer. protected ~Transport() TryDequeue(out T) Attempt to remove an item from the front of the buffer. public abstract bool TryDequeue(out T item) Parameters item T If successful, the item removed from the buffer, default otherwise. Returns bool True if an item was successfully remove, false if the buffer is empty. Remarks If item is successfully removed the caller takes ownership of it and is responsible for releasing its resources. If the attempt to dequeue fails then item is default. Exceptions AbortedException If the buffer has been closed AND all buffered items have been read. TryEnqueue(ref T) Attempt to insert an item at the end of the buffer. public abstract bool TryEnqueue(ref T item) Parameters item T The item to be inserted. Returns bool True if the item was inserted, false if the buffer is full. Remarks On a successful insert the buffer takes ownership of item and its value is set to default. If item cannot be inserted (either because 'full' or 'closed') then false is returned and item is unmodified (still owned by the caller); the caller is then responsible for releasing any resources. Exceptions AbortedException If the buffer has already been closed."
  },
  "api/MarymoorStudios.Core.Promises.TransportFlags.html": {
    "href": "api/MarymoorStudios.Core.Promises.TransportFlags.html",
    "title": "Enum TransportFlags",
    "summary": "Enum TransportFlags Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll Status flags for a Transport<T>. [Flags] public enum TransportFlags : ushort Fields None = 0 Nothing ConsumerClosed = 1 The transport has been closed by the Consumer. ProducerClosed = 2 The transport has been closed by the Producer. Closed = ConsumerClosed | ProducerClosed Both sides have closed."
  },
  "api/MarymoorStudios.Core.Promises.Turn.TurnEnumerator.html": {
    "href": "api/MarymoorStudios.Core.Promises.Turn.TurnEnumerator.html",
    "title": "Struct Turn.TurnEnumerator",
    "summary": "Struct Turn.TurnEnumerator Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll An enumerator for a TurnList. public struct Turn.TurnEnumerator : IEnumerator<Turn>, IEnumerator, IDisposable Implements IEnumerator<Turn> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Current public readonly Turn Current { get; } Property Value Turn Methods Dispose() public readonly void Dispose() MoveNext() public bool MoveNext() Returns bool Reset() public void Reset()"
  },
  "api/MarymoorStudios.Core.Promises.Turn.html": {
    "href": "api/MarymoorStudios.Core.Promises.Turn.html",
    "title": "Class Turn",
    "summary": "Class Turn Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll The basic unit of work in the scheduler. public abstract class Turn Inheritance object Turn Derived ResolverTurn<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks A Turn can represent a single function, a complex prompt computation, an RPC method, an external IO or any other kind of prompt computation. A Turn is a single unit of prompt computation within a single-threaded Scheduler. Complex computations involving one or more blocking states or multiple IOs can be broken up into a directed graph of Turns, each of which is scheduled independently and are typically linked together through a chain of Promises. Such a complex computation is considered complete when the Promise returned by its root Turn resolves. Constructors Turn() Creates a new unattached (not part of a list) turn. protected Turn() Properties Id A unique identifier for this turn. public ulong Id { get; } Property Value ulong Remarks Ids are guaranteed to be monotonic. Methods Run() Runs the computation of this Turn when chosen for execution by the Scheduler. protected abstract void Run()"
  },
  "api/MarymoorStudios.Core.Promises.TurnList.html": {
    "href": "api/MarymoorStudios.Core.Promises.TurnList.html",
    "title": "Struct TurnList",
    "summary": "Struct TurnList Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A circular, singularly-linked list of turns. public struct TurnList : IEnumerable<Turn>, IEnumerable Implements IEnumerable<Turn> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Count The number of items in this (possibly empty) list. public readonly int Count { get; } Property Value int IsEmpty True if the list is empty, false otherwise. public readonly bool IsEmpty { get; } Property Value bool Methods Append(ref TurnList) Appends a complete (possibly empty) list to another (possibly empty) list. public void Append(ref TurnList source) Parameters source TurnList The (possibly empty) list of turns to append to the end of this list. AppendOne(Turn) Appends an unattached (not part of a list) turn to this list. public void AppendOne(Turn source) Parameters source Turn The unattached turn to append to the end of this list. GetEnumerator() Returns a pattern-based (non-allocating) enumerator. public readonly Turn.TurnEnumerator GetEnumerator() Returns Turn.TurnEnumerator TryRemoveHead(out Turn) Attempts to remove one item from the head of this list. public bool TryRemoveHead(out Turn item) Parameters item Turn If successful, the item that was removed from the head of this list, null otherwise. Returns bool True if an item was successfully removed, false otherwise."
  },
  "api/MarymoorStudios.Core.Promises.Void.html": {
    "href": "api/MarymoorStudios.Core.Promises.Void.html",
    "title": "Class Void",
    "summary": "Class Void Namespace MarymoorStudios.Core.Promises Assembly MarymoorStudios.Core.Promises.dll A marker type that reifies void. public sealed class Void Inheritance object Void Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Instance The one and only instance. public static readonly Void Instance Field Value Void"
  },
  "api/MarymoorStudios.Core.Promises.html": {
    "href": "api/MarymoorStudios.Core.Promises.html",
    "title": "Namespace MarymoorStudios.Core.Promises",
    "summary": "Namespace MarymoorStudios.Core.Promises Classes AResolver Abstract base class for Resolver<T>. AutoResetEventAsync An eventual auto-reset event. Joiner Joins multiple promises together. PromiseJoin PromiseOnCompleted PromiseWhen PromiseWithCancellation ResolverExtensions Extensions for Resolver<T>. ResolverTurn<T> Resolver<T> A capability for resolving an eventual computation. RingBuffer<T> A fixed-sized, shared-memory, Transport<T>. SafeDispose Utilities to safely dispose generic values. Scheduler A scheduler of turns. Sip A Software Isolated Process (SIP). Transport<T> A FIFO queue of ordered discrete items. Turn The basic unit of work in the scheduler. Void A marker type that reifies void. Structs DiagnosticId A unique id for diagnostic purposes. Promise A representation of the future outcome of a computation. PromiseAwaiter Enables the await keyword for Promise. PromiseAwaiter<T> Enables the await keyword for Promise<T>. PromiseMethodBuilder Enables the async keyword for methods that return a Promise. PromiseMethodBuilder<T> Enables the async keyword for methods that return a Promise<T>. Promise<T> A representation of the future outcome of a computation. Turn.TurnEnumerator An enumerator for a TurnList. TurnList A circular, singularly-linked list of turns. Interfaces IIPromiseEnumerator<T> Supports a simple asynchronous iteration over a generic collection. IPromiseDisposable A promise-based replacement for IAsyncDisposable. IPromiseEnumerable<T> Factory for asynchronous enumerators. Enums TransportFlags Status flags for a Transport<T>."
  },
  "api/MarymoorStudios.Core.RandomExtensions.html": {
    "href": "api/MarymoorStudios.Core.RandomExtensions.html",
    "title": "Class RandomExtensions",
    "summary": "Class RandomExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class RandomExtensions Inheritance object RandomExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods NextBool(Random) Returns a fairly distributed boolean. public static bool NextBool(this Random rand) Parameters rand Random Returns bool NextEnum<TEnum>(Random) Returns a uniformly distributed value from chosen enum. public static TEnum NextEnum<TEnum>(this Random rand) where TEnum : struct, Enum Parameters rand Random Returns TEnum Type Parameters TEnum NextNormal(Random) Generates two pseudo-random independent variables from a normal distribution. public static (double Z0, double Z1) NextNormal(this Random rand) Parameters rand Random Random source Returns (double Z0, double Z1) A pair of independent variables. NextNormal(Random, double, double) Generates two pseudo-random independent variables from a normal distribution. public static (double Z0, double Z1) NextNormal(this Random rand, double mean, double stddev) Parameters rand Random Random source mean double mean of the distribution stddev double standard deviation Returns (double Z0, double Z1) NextNormal(Random, TimeSpan, TimeSpan) Generates two pseudo-random independent variables from a normal distribution. public static (TimeSpan Z0, TimeSpan Z1) NextNormal(this Random rand, TimeSpan mean, TimeSpan stddev) Parameters rand Random Random source mean TimeSpan mean of the distribution stddev TimeSpan standard deviation Returns (TimeSpan Z0, TimeSpan Z1) NextUInt16(Random, ushort, ushort) Returns a uniformly distributed (max-inclusive) 16-bit unsigned integer. public static ushort NextUInt16(this Random rand, ushort min = 0, ushort max = 65535) Parameters rand Random min ushort max ushort Returns ushort NextUInt32(Random, uint, uint) Returns a uniformly distributed (max-inclusive) 32-bit unsigned integer. public static uint NextUInt32(this Random rand, uint min = 0, uint max = 4294967295) Parameters rand Random min uint max uint Returns uint NextUInt64(Random) Returns a uniformly distributed 64-bit unsigned integer. public static ulong NextUInt64(this Random rand) Parameters rand Random Returns ulong NextUInt8(Random, byte, byte) Returns a uniformly distributed (max-inclusive) 8-bit unsigned integer. public static byte NextUInt8(this Random rand, byte min = 0, byte max = 255) Parameters rand Random min byte max byte Returns byte"
  },
  "api/MarymoorStudios.Core.ReadLockScope.html": {
    "href": "api/MarymoorStudios.Core.ReadLockScope.html",
    "title": "Struct ReadLockScope",
    "summary": "Struct ReadLockScope Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll A read-lock scope for use with ReaderWriterLockSlim. public readonly struct ReadLockScope : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ReadLockScope(ReaderWriterLockSlim) Acquires a read-lock which is released on dispose. public ReadLockScope(ReaderWriterLockSlim m) Parameters m ReaderWriterLockSlim Methods Dispose() Releases the held lock. public void Dispose()"
  },
  "api/MarymoorStudios.Core.Rpc.ABytesRpcMessage-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ABytesRpcMessage-2.html",
    "title": "Class ABytesRpcMessage<TMessage, TServer>",
    "summary": "Class ABytesRpcMessage<TMessage, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated data-returning message types. public abstract class ABytesRpcMessage<TMessage, TServer> : ARpcMessage<TServer> where TMessage : ABytesRpcMessage<TMessage, TServer> where TServer : AServer<TServer> Type Parameters TMessage The message type itself. TServer The abstract server base class generated from the eventual interface. Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> ABytesRpcMessage<TMessage, TServer> Inherited Members ARpcMessage<TServer>.MethodName ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ABytesRpcMessage(MethodId) protected ABytesRpcMessage(MethodId methodId) Parameters methodId MethodId Properties Resolver protected override AResolver Resolver { get; } Property Value AResolver Result public Bytes Result { get; } Property Value Bytes Methods Break(Exception) protected override sealed void Break(Exception ex) Parameters ex Exception OnFailure(Exception) Execute the error path when the outcome is a failure. protected override sealed void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(TServer) Execute the success path when the outcome is a success. protected override sealed void OnSuccess(TServer value) Parameters value TServer The successful outcome. Run(TServer) protected abstract Bytes Run(TServer server) Parameters server TServer Returns Bytes SizeOf(SerializationContext) protected override sealed int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected override sealed void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.ADataRpcMessage-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ADataRpcMessage-2.html",
    "title": "Class ADataRpcMessage<TMessage, TServer>",
    "summary": "Class ADataRpcMessage<TMessage, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated void-returning message types. public abstract class ADataRpcMessage<TMessage, TServer> : ARpcMessage<TServer> where TMessage : ADataRpcMessage<TMessage, TServer> where TServer : AServer<TServer> Type Parameters TMessage The message type itself. TServer The abstract server base class generated from the eventual interface. Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> ADataRpcMessage<TMessage, TServer> Derived SyncMessage<TServer> Inherited Members ARpcMessage<TServer>.MethodName ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ADataRpcMessage(MethodId) protected ADataRpcMessage(MethodId methodId) Parameters methodId MethodId Properties Resolver protected override AResolver Resolver { get; } Property Value AResolver Result public Promise Result { get; } Property Value Promise Methods Break(Exception) protected override sealed void Break(Exception ex) Parameters ex Exception OnFailure(Exception) Execute the error path when the outcome is a failure. protected override sealed void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(TServer) Execute the success path when the outcome is a success. protected override sealed void OnSuccess(TServer value) Parameters value TServer The successful outcome. Run(TServer) protected abstract Promise Run(TServer server) Parameters server TServer Returns Promise SizeOf(SerializationContext) protected override sealed int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected override sealed void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.ADataRpcMessage-3.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ADataRpcMessage-3.html",
    "title": "Class ADataRpcMessage<TMessage, TResult, TServer>",
    "summary": "Class ADataRpcMessage<TMessage, TResult, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated data-returning message types. public abstract class ADataRpcMessage<TMessage, TResult, TServer> : ARpcMessage<TServer> where TMessage : ADataRpcMessage<TMessage, TResult, TServer> where TServer : AServer<TServer> Type Parameters TMessage The message type itself. TResult The type of the result. TServer The abstract server base class generated from the eventual interface. Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> ADataRpcMessage<TMessage, TResult, TServer> Inherited Members ARpcMessage<TServer>.MethodName ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ADataRpcMessage(MethodId) protected ADataRpcMessage(MethodId methodId) Parameters methodId MethodId Properties Resolver protected override AResolver Resolver { get; } Property Value AResolver Result public Promise<TResult> Result { get; } Property Value Promise<TResult> Methods Break(Exception) protected override sealed void Break(Exception ex) Parameters ex Exception OnFailure(Exception) Execute the error path when the outcome is a failure. protected override sealed void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(TServer) Execute the success path when the outcome is a success. protected override sealed void OnSuccess(TServer value) Parameters value TServer The successful outcome. Run(TServer) protected abstract Promise<TResult> Run(TServer server) Parameters server TServer Returns Promise<TResult> SizeOf(SerializationContext) protected override sealed int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected override sealed void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.AProxyRpcMessage-4.html": {
    "href": "api/MarymoorStudios.Core.Rpc.AProxyRpcMessage-4.html",
    "title": "Class AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer>",
    "summary": "Class AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated proxy-returning message types. public abstract class AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> : ARpcMessage<TServer> where TMessage : AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> where TReturnProxy : Proxy<TReturnServer>, IProxy<TReturnProxy, TReturnServer> where TReturnServer : AServer<TReturnServer> where TServer : AServer<TServer> Type Parameters TMessage The message type itself. TReturnProxy The type of the result. TReturnServer The type of the result abstract server base. TServer The abstract server base class generated from the eventual interface. Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> Inherited Members ARpcMessage<TServer>.MethodName ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AProxyRpcMessage(MethodId) protected AProxyRpcMessage(MethodId methodId) Parameters methodId MethodId Properties Resolver protected override AResolver Resolver { get; } Property Value AResolver Result public TReturnProxy Result { get; } Property Value TReturnProxy Methods Break(Exception) protected override sealed void Break(Exception ex) Parameters ex Exception OnFailure(Exception) Execute the error path when the outcome is a failure. protected override sealed void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(TServer) Execute the success path when the outcome is a success. protected override sealed void OnSuccess(TServer value) Parameters value TServer The successful outcome. Run(TServer) protected abstract TReturnProxy Run(TServer server) Parameters server TServer Returns TReturnProxy SizeOf(SerializationContext) protected override sealed int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected override sealed void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.ARpcMessage-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ARpcMessage-1.html",
    "title": "Class ARpcMessage<TServer>",
    "summary": "Class ARpcMessage<TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public abstract class ARpcMessage<TServer> : ResolverTurn<TServer> Type Parameters TServer Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> Derived ABytesRpcMessage<TMessage, TServer> ADataRpcMessage<TMessage, TServer> ADataRpcMessage<TMessage, TResult, TServer> AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> ASequenceRpcMessage<TMessage, TItem, TServer> Inherited Members ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() ResolverTurn<TServer>.OnSuccess(TServer) ResolverTurn<TServer>.OnFailure(Exception) Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ARpcMessage(MethodId) protected ARpcMessage(MethodId methodId) Parameters methodId MethodId Properties MethodName protected abstract string MethodName { get; } Property Value string Resolver protected abstract AResolver Resolver { get; } Property Value AResolver Methods Break(Exception) protected abstract void Break(Exception ex) Parameters ex Exception SizeOf(SerializationContext) protected abstract int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected abstract void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.ASequenceRpcMessage-3.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ASequenceRpcMessage-3.html",
    "title": "Class ASequenceRpcMessage<TMessage, TItem, TServer>",
    "summary": "Class ASequenceRpcMessage<TMessage, TItem, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated data-returning message types. public abstract class ASequenceRpcMessage<TMessage, TItem, TServer> : ARpcMessage<TServer> where TMessage : ASequenceRpcMessage<TMessage, TItem, TServer> where TServer : AServer<TServer> Type Parameters TMessage The message type itself. TItem The type of the sequence items. TServer The abstract server base class generated from the eventual interface. Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> ASequenceRpcMessage<TMessage, TItem, TServer> Inherited Members ARpcMessage<TServer>.MethodName ResolverTurn<TServer>.ResetTurnState() ResolverTurn<TServer>.Run() Turn.Id object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ASequenceRpcMessage(MethodId) protected ASequenceRpcMessage(MethodId methodId) Parameters methodId MethodId Properties Resolver protected override AResolver Resolver { get; } Property Value AResolver Result public Sequence<TItem> Result { get; } Property Value Sequence<TItem> Methods Break(Exception) protected override sealed void Break(Exception ex) Parameters ex Exception OnFailure(Exception) Execute the error path when the outcome is a failure. protected override sealed void OnFailure(Exception ex) Parameters ex Exception The failed outcome. OnSuccess(TServer) Execute the success path when the outcome is a success. protected override sealed void OnSuccess(TServer value) Parameters value TServer The successful outcome. Run(TServer) protected abstract Sequence<TItem> Run(TServer server) Parameters server TServer Returns Sequence<TItem> SizeOf(SerializationContext) protected override sealed int SizeOf(SerializationContext context) Parameters context SerializationContext Returns int Write(SerializationContext, ref RowBuffer) protected override sealed void Write(SerializationContext context, ref RowBuffer buffer) Parameters context SerializationContext buffer RowBuffer"
  },
  "api/MarymoorStudios.Core.Rpc.AServer-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.AServer-1.html",
    "title": "Class AServer<TServer>",
    "summary": "Class AServer<TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all eventual server types. public abstract class AServer<TServer> : IByRefRemotable where TServer : AServer<TServer> Type Parameters TServer The abstract server base class generated from the eventual interface. Inheritance object AServer<TServer> Implements IByRefRemotable Derived FileServer RemoteAdmissionManager.AdmissionServer MetadataServer NothingServer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AServer() protected AServer()"
  },
  "api/MarymoorStudios.Core.Rpc.BackgroundSip-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.BackgroundSip-2.html",
    "title": "Class BackgroundSip<TChildProxy, TChildServer>",
    "summary": "Class BackgroundSip<TChildProxy, TChildServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll A Software Isolated Process (Sip) that runs in a background thread. public sealed class BackgroundSip<TChildProxy, TChildServer> : IPromiseDisposable where TChildProxy : Proxy<TChildServer>, IProxy<TChildProxy, TChildServer> where TChildServer : AServer<TChildServer> Type Parameters TChildProxy TChildServer Inheritance object BackgroundSip<TChildProxy, TChildServer> Implements IPromiseDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks A BackgroundSip<TChildProxy, TChildServer> executes as a separate isolated container with its own Scheduler and lifetime on its own background thread. The only way to communicate with a BackgroundSip<TChildProxy, TChildServer> is through a proxy to its root object. Each BackgroundSip<TChildProxy, TChildServer> begins its lifetime with an established shared-memory channel between itself and its parent Sip. A BackgroundSip<TChildProxy, TChildServer>'s parent can control its lifetime through its CancellationToken. The parent establishes the root object during the creation process, and the root's proxy is made available to the parent as part of initialization. Any other objects that live within the isolation boundary of the BackgroundSip<TChildProxy, TChildServer> must be created indirectly through a request made on the root object. The lifetime of all such objects are managed by the internal state of BackgroundSip<TChildProxy, TChildServer> including its comm system, the state of all objects reachable from it (including the root object). Properties Root A proxy to the root object exported by the child sip. public TChildProxy Root { get; } Property Value TChildProxy Methods Create(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, Resolver<TChildServer>, CancellationToken, Promise>, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, Resolver<TChildServer>, CancellationToken, Promise> init, ILoggerFactory? loggerFactory = null) Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<UserIdentity, MemoryPool<byte>, ILoggerFactory, Resolver<TChildServer>, CancellationToken, Promise> A factory for the new root object. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Create(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<CancellationToken, TChildProxy>, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<CancellationToken, TChildProxy> init, ILoggerFactory? loggerFactory = null) Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<CancellationToken, TChildProxy> A factory for the new root object. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Create<TArg>(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, TArg, Resolver<TChildServer>, CancellationToken, Promise>, TArg, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create<TArg>(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, TArg, Resolver<TChildServer>, CancellationToken, Promise> init, TArg arg, ILoggerFactory? loggerFactory = null) Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<UserIdentity, MemoryPool<byte>, ILoggerFactory, TArg, Resolver<TChildServer>, CancellationToken, Promise> A factory for the new root object. arg TArg A serializable argument to marshall to the init function. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Type Parameters TArg The type of the serializable argument to marshall to the init function. Create<TArg>(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<TArg, CancellationToken, TChildProxy>, TArg, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create<TArg>(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<TArg, CancellationToken, TChildProxy> init, TArg arg, ILoggerFactory? loggerFactory = null) Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<TArg, CancellationToken, TChildProxy> A factory for the new root object. arg TArg A serializable argument to marshall to the init function. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Type Parameters TArg The type of the serializable argument to marshall to the init function. Create<TParentProxy, TParentServer>(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, TParentProxy, Resolver<TChildServer>, CancellationToken, Promise>, TParentProxy, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create<TParentProxy, TParentServer>(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<UserIdentity?, MemoryPool<byte>, ILoggerFactory, TParentProxy, Resolver<TChildServer>, CancellationToken, Promise> init, TParentProxy parent, ILoggerFactory? loggerFactory = null) where TParentProxy : Proxy<TParentServer>, IProxy<TParentProxy, TParentServer> where TParentServer : AServer<TParentServer> Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<UserIdentity, MemoryPool<byte>, ILoggerFactory, TParentProxy, Resolver<TChildServer>, CancellationToken, Promise> A factory for the new root object. parent TParentProxy A capability for the new sip to access the parent. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Type Parameters TParentProxy The proxy type of the object exported by the parent to the new sip. TParentServer The server type of the object exported by the parent to the new sip. Create<TParentProxy, TParentServer>(UserIdentity?, UserIdentity?, MemoryPool<byte>, Func<TParentProxy, CancellationToken, TChildProxy>, TParentProxy, ILoggerFactory?) Creates a new background sip. public static BackgroundSip<TChildProxy, TChildServer> Create<TParentProxy, TParentServer>(UserIdentity? localIdentity, UserIdentity? remoteIdentity, MemoryPool<byte> pool, Func<TParentProxy, CancellationToken, TChildProxy> init, TParentProxy parent, ILoggerFactory? loggerFactory = null) where TParentProxy : Proxy<TParentServer>, IProxy<TParentProxy, TParentServer> where TParentServer : AServer<TParentServer> Parameters localIdentity UserIdentity The user identity of this sip. remoteIdentity UserIdentity The user identity of the background sip. pool MemoryPool<byte> A memory pool. init Func<TParentProxy, CancellationToken, TChildProxy> A factory for the new root object. parent TParentProxy A capability for the new sip to access the parent. loggerFactory ILoggerFactory The logging factory. Returns BackgroundSip<TChildProxy, TChildServer> The background sip. Type Parameters TParentProxy The proxy type of the object exported by the parent to the new sip. TParentServer The server type of the object exported by the parent to the new sip. DisposeAsync() public Promise DisposeAsync() Returns Promise"
  },
  "api/MarymoorStudios.Core.Rpc.Bytes.Writer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Bytes.Writer.html",
    "title": "Class Bytes.Writer",
    "summary": "Class Bytes.Writer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll The writer capability for a Bytes. public sealed class Bytes.Writer : IPromiseDisposable, IDisposable Inheritance object Bytes.Writer Implements IPromiseDisposable IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Abort() Promptly aborts the sequence. public void Abort() Remarks Write initiated abort is best-effort transmitted across the transport to the reader. If the transport has itself been aborted then the abort signal is discarded (but the reader will see an abort from the transport). Any items in flight that cannot be transmitted before the transport has been torn down are immediately released. Close(Exception?) Terminates the sequence. public Promise Close(Exception? error = null) Parameters error Exception An optional error to terminate the sequence with. Returns Promise A promise that resolves when the reader has seen the entire sequence. Remarks If the sequence is terminated without an error (a successful termination) the reader will see an End of Sequence (EOS). If an error is provided, the reader will eventually see that error as the result of a call to Read(). Dispose() Promptly terminates the sequence. public void Dispose() Remarks If the sequence is already terminated or a graceful Close(Exception?) can be promptly transmitted on the transport, it is done. Otherwise, an Abort() occurs. If any untransmitted items cannot be promptly transmitted they are released without being transmitted and the termination becomes an Abort(). DisposeAsync() Asynchronously terminates the sequence. public Promise DisposeAsync() Returns Promise Remarks If the sequence is not already terminated, a graceful Close(Exception?) is performed. The result then resolves after a graceful termination acknowledgement is received from the reader (indicating that all items have been received including the graceful termination signal). If the transport is torn down before all pending items can be transmitted, or before a graceful termination acknowledgement has been received from the reader, then any untransmitted items are released without being transmitted and the termination becomes an Abort(). ~Writer() protected ~Writer() Flush() Returns a promise that resolves when flow control would allow additional writes without buffering. public Promise Flush() Returns Promise Remarks If there is no flow control pressure the return value will be promptly resolved. Write(OwnedMem<byte>) Writes an item to the sequence. public void Write(OwnedMem<byte> item) Parameters item OwnedMem<byte> The item to be written. Remarks On a successful return, ownership of the provided item is transferred to the sequence. Items successfully written to the sequence but never delivered to a reader (e.g. because the sequence is disposed or the transport is terminated) will be disposed by the sequence itself. The error EndOfSequenceException occurs when the Writer comes to know that the sequence has been disposed before the EOS has been written. This error will be thrown repeatedly on all subsequent writes after this point. The Writer should gracefully terminate production. If the sequence is cancelled by the reader (optionally with an error), OperationCanceledException) (or that error) will be returned by the next call to Write(OwnedMem<byte>) or Flush() after the Writer comes to know of the cancellation. Cancellation is propagated asynchronously backward through the transport and may be subject to propagation delay. Cancellation delivery cannot be guaranteed as it may be lost if the underlying channel is aborted before it can be delivered. If the sequence is aborted by the reader or the underlying transport, a call to Write(OwnedMem<byte>) or Flush() will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.Bytes.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Bytes.html",
    "title": "Class Bytes",
    "summary": "Class Bytes Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class Bytes : IPromiseDisposable, IDisposable Inheritance object Bytes Implements IPromiseDisposable IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties BatchSize The batch size suggested by the reader. public int BatchSize { get; set; } Property Value int Capacity The desired capacity of the reader. public int Capacity { get; set; } Property Value int Methods Cancel(Exception?) Attempts to perform a graceful early termination by the sequence with a diagnostic error for the Writer. public void Cancel(Exception? error = null) Parameters error Exception An optional diagnostic error. If no error is provided then OperationCanceledException will be sent. Remarks The Read() method will eventually return EOS (or error) after Cancel(Exception?) has been called, either because cancellation is successfully propagated to the Writer or because the underlying channel is aborted before cancellation can be propagated. Cancellation is pr Create(Func<Writer, Promise>, int, int) Constructs a new Pipe<T> public static Bytes Create(Func<Bytes.Writer, Promise> body, int capacity = 65536, int batchSize = 8192) Parameters body Func<Bytes.Writer, Promise> A function that will generate the contents of the sequence. capacity int The maximum number of items before backpressure is applied. batchSize int The reader suggested batch size. Returns Bytes Remarks REQUIRES: capacity > 0 REQUIRES: 1 <= batchSize <= capacity The batchSize is used to decrease ping-ponging by delaying waking the producer until there are more items in the window. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available. Create(int, int) Constructs a new Pipe<T> public static (Bytes reader, Bytes.Writer writer) Create(int capacity = 65536, int batchSize = 8192) Parameters capacity int The maximum number of items before backpressure is applied. batchSize int The reader suggested batch size. Returns (Bytes reader, Bytes.Writer writer) Remarks REQUIRES: capacity > 0 REQUIRES: 1 <= batchSize <= capacity The batchSize is used to decrease ping-ponging by delaying waking the producer until there are more items in the window. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available. Dispose() Releases all received but unread items. public void Dispose() Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. DisposeAsync() Releases all received but unread items. public Promise DisposeAsync() Returns Promise A promise that resolves when all in-flight items have been exhausted from the transport. Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. ForEach(Func<OwnedMem<byte>, Promise>) Yields each of the items in the sequence to the body function. public Promise ForEach(Func<OwnedMem<byte>, Promise> body) Parameters body Func<OwnedMem<byte>, Promise> A function to process each item. Returns Promise Resolves successfully if the entire sequence was read to the end without encountering an error, otherwise breaks with the first error encountered by the sequence. Read() Reads the next available item from the sequence. public Promise<OwnedMem<byte>> Read() Returns Promise<OwnedMem<byte>> The next item or an error. Remarks Returns the next item in the sequence. If there are no items available immediately, then the return resolves when the next item arrives. On a successful return ownership for the item returned is transferred to the caller who is responsible for disposing it. If the end of the sequence (EOS) is reached (i.e. a finite sequence) then reading after the EOS will yield an EndOfSequenceException error. If the sequence is closed by the Writer with an error, that error will be returned in sequence order after all items successfully written before the error have been delivered. If the sequence is aborted by the Writer or the underlying transport a read will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.BytesSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.BytesSerializer.html",
    "title": "Class BytesSerializer",
    "summary": "Class BytesSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class BytesSerializer : Serializer<Bytes?> Inheritance object Serializer Serializer<Bytes> BytesSerializer Inherited Members Serializer<Bytes>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BytesSerializer() public BytesSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Bytes?) public override int SizeOf(SerializationContext context, in Bytes? value) Parameters context SerializationContext value Bytes Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Bytes?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Bytes? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Bytes Returns bool Write(SerializationContext, ref RowBuffer, in Bytes?) public override void Write(SerializationContext context, ref RowBuffer buffer, in Bytes? value) Parameters context SerializationContext buffer RowBuffer value Bytes"
  },
  "api/MarymoorStudios.Core.Rpc.CommException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.CommException.html",
    "title": "Class CommException",
    "summary": "Class CommException Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll [DataContract] public class CommException : Exception, ISerializable Inheritance object Exception CommException Implements ISerializable Derived ProtocolViolationException Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CommException() public CommException() CommException(string?) public CommException(string? message) Parameters message string CommException(string?, Exception?) public CommException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/MarymoorStudios.Core.Rpc.CommExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.CommExceptionSerializer.html",
    "title": "Class CommExceptionSerializer",
    "summary": "Class CommExceptionSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class CommExceptionSerializer : Serializer<CommException?>, IDerivedSerializer<CommException?>, IDerivedSerializer Inheritance object Serializer Serializer<CommException> CommExceptionSerializer Implements IDerivedSerializer<CommException> IDerivedSerializer Inherited Members Serializer<CommException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CommExceptionSerializer() public CommExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in CommException?) public override int SizeOf(SerializationContext context, in CommException? value) Parameters context SerializationContext value CommException Returns int SizeOfSegment(SerializationContext, in CommException) public static int SizeOfSegment(SerializationContext context, in CommException value) Parameters context SerializationContext value CommException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out CommException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out CommException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value CommException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in CommException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in CommException? value) Parameters context SerializationContext buffer RowBuffer value CommException WriteSegment(SerializationContext, ref RowBuffer, in CommException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in CommException value) Parameters context SerializationContext buffer RowBuffer value CommException"
  },
  "api/MarymoorStudios.Core.Rpc.CommId.html": {
    "href": "api/MarymoorStudios.Core.Rpc.CommId.html",
    "title": "Struct CommId",
    "summary": "Struct CommId Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll A unique id that represents an object (local or remote) to the channel. public readonly struct CommId : IEquatable<CommId> Implements IEquatable<CommId> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks CommIds are unique only within the scope of the MarymoorStudios.Core.Rpc.CommChannel that allocated them. Different MarymoorStudios.Core.Rpc.CommChannels may reuse the same CommIds for different objects. Constructors CommId(int) public CommId(int id) Parameters id int Properties Id The underlying value. [DataMember] public int Id { get; } Property Value int Invalid The invalid id. public static CommId Invalid { get; } Property Value CommId IsRemote True if the was allocated by the remote peer. public bool IsRemote { get; } Property Value bool IsValid True if the CommId is not Invalid. public bool IsValid { get; } Property Value bool Methods Equals(CommId) Value-based equality. public bool Equals(CommId other) Parameters other CommId Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Invert() Returns the negative reciprocal. public CommId Invert() Returns CommId ToString() public override string ToString() Returns string Operators operator ==(CommId, CommId) Value-based equality. public static bool operator ==(CommId left, CommId right) Parameters left CommId right CommId Returns bool operator ++(CommId) Return the next id numerically (no wrap-around). public static CommId operator ++(CommId left) Parameters left CommId Returns CommId operator !=(CommId, CommId) Value-based equality. public static bool operator !=(CommId left, CommId right) Parameters left CommId right CommId Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.CommIdSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.CommIdSerializer.html",
    "title": "Class CommIdSerializer",
    "summary": "Class CommIdSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class CommIdSerializer : Serializer<CommId> Inheritance object Serializer Serializer<CommId> CommIdSerializer Inherited Members Serializer<CommId>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CommIdSerializer() public CommIdSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in CommId) public override int SizeOf(SerializationContext context, in CommId value) Parameters context SerializationContext value CommId Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out CommId) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out CommId value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value CommId Returns bool Write(SerializationContext, ref RowBuffer, in CommId) public override void Write(SerializationContext context, ref RowBuffer buffer, in CommId value) Parameters context SerializationContext buffer RowBuffer value CommId"
  },
  "api/MarymoorStudios.Core.Rpc.CommProtocol.html": {
    "href": "api/MarymoorStudios.Core.Rpc.CommProtocol.html",
    "title": "Class CommProtocol",
    "summary": "Class CommProtocol Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public static class CommProtocol Inheritance object CommProtocol Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/MarymoorStudios.Core.Rpc.EventualAttribute.html": {
    "href": "api/MarymoorStudios.Core.Rpc.EventualAttribute.html",
    "title": "Class EventualAttribute",
    "summary": "Class EventualAttribute Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll [AttributeUsage(AttributeTargets.Interface)] public sealed class EventualAttribute : Attribute Inheritance object Attribute EventualAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors EventualAttribute() public EventualAttribute() Properties NoCode If true then no code is generated (a custom implementation must be provided). public bool NoCode { get; set; } Property Value bool"
  },
  "api/MarymoorStudios.Core.Rpc.EventualType.html": {
    "href": "api/MarymoorStudios.Core.Rpc.EventualType.html",
    "title": "Class EventualType",
    "summary": "Class EventualType Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public abstract class EventualType Inheritance object EventualType Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EventualType() protected EventualType() Methods DispatchRpcMessage<TMessage, TServer>(AResolver, DiagnosticId, CommId, MethodId, SerializationContext, ref ReadOnlyRowBuffer) Dispatches an incoming serialized message packet as an ARpcMessage<TServer>. protected static bool DispatchRpcMessage<TMessage, TServer>(AResolver target, DiagnosticId channelId, CommId resultId, MethodId methodId, SerializationContext context, ref ReadOnlyRowBuffer payload) where TMessage : ARpcMessage<TServer> where TServer : AServer<TServer> Parameters target AResolver The target to receive the dispatching message. channelId DiagnosticId The id of the channel dispatching the message. resultId CommId The id of the result to be registered in the MarymoorStudios.Core.Rpc.CommTable. methodId MethodId The id of the method being dispatched. context SerializationContext Serialization context. payload ReadOnlyRowBuffer A serialized message to be materialized and dispatched. Returns bool Type Parameters TMessage The message type derived from ARpcMessage<TServer> TServer The server type derived from AServer<TServer> Register(Type, Type) public static void Register(Type genericType, Type templateType) Parameters genericType Type templateType Type TryDispatch(AResolver, DiagnosticId, CommId, MethodId, SerializationContext, ref ReadOnlyRowBuffer) Dispatches an incoming serialized message packet. public abstract bool TryDispatch(AResolver target, DiagnosticId channelId, CommId resultId, MethodId methodId, SerializationContext context, ref ReadOnlyRowBuffer payload) Parameters target AResolver The target to receive the dispatching message. channelId DiagnosticId The id of the channel dispatching the message. resultId CommId The id of the result to be registered in the MarymoorStudios.Core.Rpc.CommTable. methodId MethodId The id of the method being dispatched. context SerializationContext Serialization context. payload ReadOnlyRowBuffer A serialized message to be materialized and dispatched. Returns bool TryGet(AResolver, out EventualType) public static bool TryGet(AResolver resolver, out EventualType retval) Parameters resolver AResolver retval EventualType Returns bool TryGetMethodName(AResolver, MethodId, out string) Returns a diagnostic string describing the method matching methodId. public abstract bool TryGetMethodName(AResolver target, MethodId methodId, out string methodName) Parameters target AResolver The target to receive the dispatching message. methodId MethodId The id of the method whose name is being looked up. methodName string A diagnostic string describing the method. Returns bool True if successfully looked up, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.AbortedException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.AbortedException.html",
    "title": "Class AbortedException",
    "summary": "Class AbortedException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The operation has been terminated ungracefully. [DataContract] public class AbortedException : Exception, ISerializable Inheritance object Exception AbortedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The operation was aborted, typically due to disconnection, a concurrency issue such as a sequencer check failure, or a transaction abort. See guidelines at: FailedPreconditionException and UnavailableException. Constructors AbortedException() public AbortedException() AbortedException(string?) public AbortedException(string? message) Parameters message string AbortedException(string?, Exception?) public AbortedException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.AbortedExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.AbortedExceptionSerializer.html",
    "title": "Class AbortedExceptionSerializer",
    "summary": "Class AbortedExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class AbortedExceptionSerializer : Serializer<AbortedException?>, IDerivedSerializer<AbortedException?>, IDerivedSerializer Inheritance object Serializer Serializer<AbortedException> AbortedExceptionSerializer Implements IDerivedSerializer<AbortedException> IDerivedSerializer Inherited Members Serializer<AbortedException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AbortedExceptionSerializer() public AbortedExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in AbortedException?) public override int SizeOf(SerializationContext context, in AbortedException? value) Parameters context SerializationContext value AbortedException Returns int SizeOfSegment(SerializationContext, in AbortedException) public static int SizeOfSegment(SerializationContext context, in AbortedException value) Parameters context SerializationContext value AbortedException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out AbortedException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out AbortedException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value AbortedException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in AbortedException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in AbortedException? value) Parameters context SerializationContext buffer RowBuffer value AbortedException WriteSegment(SerializationContext, ref RowBuffer, in AbortedException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in AbortedException value) Parameters context SerializationContext buffer RowBuffer value AbortedException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.AlreadyExistsException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.AlreadyExistsException.html",
    "title": "Class AlreadyExistsException",
    "summary": "Class AlreadyExistsException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The operation failed because the target already exists. [DataContract] public sealed class AlreadyExistsException : Exception, ISerializable Inheritance object Exception AlreadyExistsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AlreadyExistsException() public AlreadyExistsException() AlreadyExistsException(string?) public AlreadyExistsException(string? message) Parameters message string AlreadyExistsException(string?, Exception?) public AlreadyExistsException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.AlreadyExistsExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.AlreadyExistsExceptionSerializer.html",
    "title": "Class AlreadyExistsExceptionSerializer",
    "summary": "Class AlreadyExistsExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class AlreadyExistsExceptionSerializer : Serializer<AlreadyExistsException?>, IDerivedSerializer<AlreadyExistsException?>, IDerivedSerializer Inheritance object Serializer Serializer<AlreadyExistsException> AlreadyExistsExceptionSerializer Implements IDerivedSerializer<AlreadyExistsException> IDerivedSerializer Inherited Members Serializer<AlreadyExistsException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AlreadyExistsExceptionSerializer() public AlreadyExistsExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in AlreadyExistsException?) public override int SizeOf(SerializationContext context, in AlreadyExistsException? value) Parameters context SerializationContext value AlreadyExistsException Returns int SizeOfSegment(SerializationContext, in AlreadyExistsException) public static int SizeOfSegment(SerializationContext context, in AlreadyExistsException value) Parameters context SerializationContext value AlreadyExistsException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out AlreadyExistsException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out AlreadyExistsException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value AlreadyExistsException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in AlreadyExistsException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in AlreadyExistsException? value) Parameters context SerializationContext buffer RowBuffer value AlreadyExistsException WriteSegment(SerializationContext, ref RowBuffer, in AlreadyExistsException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in AlreadyExistsException value) Parameters context SerializationContext buffer RowBuffer value AlreadyExistsException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.EndOfSequenceException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.EndOfSequenceException.html",
    "title": "Class EndOfSequenceException",
    "summary": "Class EndOfSequenceException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll A sequence has been read past its EOS. [DataContract] public class EndOfSequenceException : Exception, ISerializable Inheritance object Exception EndOfSequenceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EndOfSequenceException() public EndOfSequenceException() EndOfSequenceException(string?) public EndOfSequenceException(string? message) Parameters message string EndOfSequenceException(string?, Exception?) public EndOfSequenceException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.EndOfSequenceExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.EndOfSequenceExceptionSerializer.html",
    "title": "Class EndOfSequenceExceptionSerializer",
    "summary": "Class EndOfSequenceExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class EndOfSequenceExceptionSerializer : Serializer<EndOfSequenceException?>, IDerivedSerializer<EndOfSequenceException?>, IDerivedSerializer Inheritance object Serializer Serializer<EndOfSequenceException> EndOfSequenceExceptionSerializer Implements IDerivedSerializer<EndOfSequenceException> IDerivedSerializer Inherited Members Serializer<EndOfSequenceException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EndOfSequenceExceptionSerializer() public EndOfSequenceExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in EndOfSequenceException?) public override int SizeOf(SerializationContext context, in EndOfSequenceException? value) Parameters context SerializationContext value EndOfSequenceException Returns int SizeOfSegment(SerializationContext, in EndOfSequenceException) public static int SizeOfSegment(SerializationContext context, in EndOfSequenceException value) Parameters context SerializationContext value EndOfSequenceException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out EndOfSequenceException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out EndOfSequenceException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value EndOfSequenceException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in EndOfSequenceException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in EndOfSequenceException? value) Parameters context SerializationContext buffer RowBuffer value EndOfSequenceException WriteSegment(SerializationContext, ref RowBuffer, in EndOfSequenceException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in EndOfSequenceException value) Parameters context SerializationContext buffer RowBuffer value EndOfSequenceException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.FailedPreconditionException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.FailedPreconditionException.html",
    "title": "Class FailedPreconditionException",
    "summary": "Class FailedPreconditionException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The operation was rejected because the system is not in a state required for the operation's execution. [DataContract] public sealed class FailedPreconditionException : Exception, ISerializable Inheritance object Exception FailedPreconditionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Use the following guidelines to decide between FailedPreconditionException, AbortedException, and UnavailableException: See also: UnavailableException or AbortedException. Constructors FailedPreconditionException() public FailedPreconditionException() FailedPreconditionException(string?) public FailedPreconditionException(string? message) Parameters message string FailedPreconditionException(string?, Exception?) public FailedPreconditionException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.FailedPreconditionExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.FailedPreconditionExceptionSerializer.html",
    "title": "Class FailedPreconditionExceptionSerializer",
    "summary": "Class FailedPreconditionExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class FailedPreconditionExceptionSerializer : Serializer<FailedPreconditionException?>, IDerivedSerializer<FailedPreconditionException?>, IDerivedSerializer Inheritance object Serializer Serializer<FailedPreconditionException> FailedPreconditionExceptionSerializer Implements IDerivedSerializer<FailedPreconditionException> IDerivedSerializer Inherited Members Serializer<FailedPreconditionException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors FailedPreconditionExceptionSerializer() public FailedPreconditionExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in FailedPreconditionException?) public override int SizeOf(SerializationContext context, in FailedPreconditionException? value) Parameters context SerializationContext value FailedPreconditionException Returns int SizeOfSegment(SerializationContext, in FailedPreconditionException) public static int SizeOfSegment(SerializationContext context, in FailedPreconditionException value) Parameters context SerializationContext value FailedPreconditionException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out FailedPreconditionException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out FailedPreconditionException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value FailedPreconditionException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in FailedPreconditionException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in FailedPreconditionException? value) Parameters context SerializationContext buffer RowBuffer value FailedPreconditionException WriteSegment(SerializationContext, ref RowBuffer, in FailedPreconditionException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in FailedPreconditionException value) Parameters context SerializationContext buffer RowBuffer value FailedPreconditionException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.InsufficientResourcesException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.InsufficientResourcesException.html",
    "title": "Class InsufficientResourcesException",
    "summary": "Class InsufficientResourcesException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The needed resource are not available to complete the operation. [DataContract] public sealed class InsufficientResourcesException : Exception, ISerializable Inheritance object Exception InsufficientResourcesException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Insufficient memory or quota is the most common cause. Constructors InsufficientResourcesException() public InsufficientResourcesException() InsufficientResourcesException(string?) public InsufficientResourcesException(string? message) Parameters message string InsufficientResourcesException(string?, Exception?) public InsufficientResourcesException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.InsufficientResourcesExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.InsufficientResourcesExceptionSerializer.html",
    "title": "Class InsufficientResourcesExceptionSerializer",
    "summary": "Class InsufficientResourcesExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class InsufficientResourcesExceptionSerializer : Serializer<InsufficientResourcesException?>, IDerivedSerializer<InsufficientResourcesException?>, IDerivedSerializer Inheritance object Serializer Serializer<InsufficientResourcesException> InsufficientResourcesExceptionSerializer Implements IDerivedSerializer<InsufficientResourcesException> IDerivedSerializer Inherited Members Serializer<InsufficientResourcesException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InsufficientResourcesExceptionSerializer() public InsufficientResourcesExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in InsufficientResourcesException?) public override int SizeOf(SerializationContext context, in InsufficientResourcesException? value) Parameters context SerializationContext value InsufficientResourcesException Returns int SizeOfSegment(SerializationContext, in InsufficientResourcesException) public static int SizeOfSegment(SerializationContext context, in InsufficientResourcesException value) Parameters context SerializationContext value InsufficientResourcesException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out InsufficientResourcesException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out InsufficientResourcesException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value InsufficientResourcesException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in InsufficientResourcesException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in InsufficientResourcesException? value) Parameters context SerializationContext buffer RowBuffer value InsufficientResourcesException WriteSegment(SerializationContext, ref RowBuffer, in InsufficientResourcesException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in InsufficientResourcesException value) Parameters context SerializationContext buffer RowBuffer value InsufficientResourcesException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.InvalidArgumentException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.InvalidArgumentException.html",
    "title": "Class InvalidArgumentException",
    "summary": "Class InvalidArgumentException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll [DataContract] public sealed class InvalidArgumentException : Exception, ISerializable Inheritance object Exception InvalidArgumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InvalidArgumentException() public InvalidArgumentException() InvalidArgumentException(string?) public InvalidArgumentException(string? message) Parameters message string InvalidArgumentException(string?, Exception?) public InvalidArgumentException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.InvalidArgumentExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.InvalidArgumentExceptionSerializer.html",
    "title": "Class InvalidArgumentExceptionSerializer",
    "summary": "Class InvalidArgumentExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class InvalidArgumentExceptionSerializer : Serializer<InvalidArgumentException?>, IDerivedSerializer<InvalidArgumentException?>, IDerivedSerializer Inheritance object Serializer Serializer<InvalidArgumentException> InvalidArgumentExceptionSerializer Implements IDerivedSerializer<InvalidArgumentException> IDerivedSerializer Inherited Members Serializer<InvalidArgumentException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InvalidArgumentExceptionSerializer() public InvalidArgumentExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in InvalidArgumentException?) public override int SizeOf(SerializationContext context, in InvalidArgumentException? value) Parameters context SerializationContext value InvalidArgumentException Returns int SizeOfSegment(SerializationContext, in InvalidArgumentException) public static int SizeOfSegment(SerializationContext context, in InvalidArgumentException value) Parameters context SerializationContext value InvalidArgumentException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out InvalidArgumentException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out InvalidArgumentException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value InvalidArgumentException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in InvalidArgumentException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in InvalidArgumentException? value) Parameters context SerializationContext buffer RowBuffer value InvalidArgumentException WriteSegment(SerializationContext, ref RowBuffer, in InvalidArgumentException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in InvalidArgumentException value) Parameters context SerializationContext buffer RowBuffer value InvalidArgumentException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.NotFoundException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.NotFoundException.html",
    "title": "Class NotFoundException",
    "summary": "Class NotFoundException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The operation failed because the target could not be found. [DataContract] public sealed class NotFoundException : Exception, ISerializable Inheritance object Exception NotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NotFoundException() public NotFoundException() NotFoundException(string?) public NotFoundException(string? message) Parameters message string NotFoundException(string?, Exception?) public NotFoundException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.NotFoundExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.NotFoundExceptionSerializer.html",
    "title": "Class NotFoundExceptionSerializer",
    "summary": "Class NotFoundExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class NotFoundExceptionSerializer : Serializer<NotFoundException?>, IDerivedSerializer<NotFoundException?>, IDerivedSerializer Inheritance object Serializer Serializer<NotFoundException> NotFoundExceptionSerializer Implements IDerivedSerializer<NotFoundException> IDerivedSerializer Inherited Members Serializer<NotFoundException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NotFoundExceptionSerializer() public NotFoundExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in NotFoundException?) public override int SizeOf(SerializationContext context, in NotFoundException? value) Parameters context SerializationContext value NotFoundException Returns int SizeOfSegment(SerializationContext, in NotFoundException) public static int SizeOfSegment(SerializationContext context, in NotFoundException value) Parameters context SerializationContext value NotFoundException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out NotFoundException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out NotFoundException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value NotFoundException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in NotFoundException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in NotFoundException? value) Parameters context SerializationContext buffer RowBuffer value NotFoundException WriteSegment(SerializationContext, ref RowBuffer, in NotFoundException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in NotFoundException value) Parameters context SerializationContext buffer RowBuffer value NotFoundException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.Test2Exception.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.Test2Exception.html",
    "title": "Class Test2Exception",
    "summary": "Class Test2Exception Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll An exception used in testing for type-based error discrimination. [DataContract] public sealed class Test2Exception : Exception, ISerializable, IEquatable<Test2Exception> Inheritance object Exception Test2Exception Implements ISerializable IEquatable<Test2Exception> Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Test2Exception() public Test2Exception() Test2Exception(string?) public Test2Exception(string? message) Parameters message string Test2Exception(string?, Exception?) public Test2Exception(string? message, Exception? inner) Parameters message string inner Exception Methods Equals(Test2Exception?) public bool Equals(Test2Exception? other) Parameters other Test2Exception Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(Test2Exception?, Test2Exception?) public static bool operator ==(Test2Exception? left, Test2Exception? right) Parameters left Test2Exception right Test2Exception Returns bool operator !=(Test2Exception?, Test2Exception?) public static bool operator !=(Test2Exception? left, Test2Exception? right) Parameters left Test2Exception right Test2Exception Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.Test2ExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.Test2ExceptionSerializer.html",
    "title": "Class Test2ExceptionSerializer",
    "summary": "Class Test2ExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class Test2ExceptionSerializer : Serializer<Test2Exception?>, IDerivedSerializer<Test2Exception?>, IDerivedSerializer Inheritance object Serializer Serializer<Test2Exception> Test2ExceptionSerializer Implements IDerivedSerializer<Test2Exception> IDerivedSerializer Inherited Members Serializer<Test2Exception>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Test2ExceptionSerializer() public Test2ExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Test2Exception?) public override int SizeOf(SerializationContext context, in Test2Exception? value) Parameters context SerializationContext value Test2Exception Returns int SizeOfSegment(SerializationContext, in Test2Exception) public static int SizeOfSegment(SerializationContext context, in Test2Exception value) Parameters context SerializationContext value Test2Exception Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Test2Exception?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Test2Exception? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Test2Exception Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in Test2Exception?) public override void Write(SerializationContext context, ref RowBuffer buffer, in Test2Exception? value) Parameters context SerializationContext buffer RowBuffer value Test2Exception WriteSegment(SerializationContext, ref RowBuffer, in Test2Exception) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in Test2Exception value) Parameters context SerializationContext buffer RowBuffer value Test2Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.TestException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.TestException.html",
    "title": "Class TestException",
    "summary": "Class TestException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll An exception used in testing for type-based error discrimination. [DataContract] public sealed class TestException : Exception, ISerializable, IEquatable<TestException> Inheritance object Exception TestException Implements ISerializable IEquatable<TestException> Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TestException() public TestException() TestException(string?) public TestException(string? message) Parameters message string TestException(string?, Exception?) public TestException(string? message, Exception? inner) Parameters message string inner Exception Methods Equals(TestException?) public bool Equals(TestException? other) Parameters other TestException Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(TestException?, TestException?) public static bool operator ==(TestException? left, TestException? right) Parameters left TestException right TestException Returns bool operator !=(TestException?, TestException?) public static bool operator !=(TestException? left, TestException? right) Parameters left TestException right TestException Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.TestExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.TestExceptionSerializer.html",
    "title": "Class TestExceptionSerializer",
    "summary": "Class TestExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class TestExceptionSerializer : Serializer<TestException?>, IDerivedSerializer<TestException?>, IDerivedSerializer Inheritance object Serializer Serializer<TestException> TestExceptionSerializer Implements IDerivedSerializer<TestException> IDerivedSerializer Inherited Members Serializer<TestException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestExceptionSerializer() public TestExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in TestException?) public override int SizeOf(SerializationContext context, in TestException? value) Parameters context SerializationContext value TestException Returns int SizeOfSegment(SerializationContext, in TestException) public static int SizeOfSegment(SerializationContext context, in TestException value) Parameters context SerializationContext value TestException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out TestException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out TestException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value TestException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in TestException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in TestException? value) Parameters context SerializationContext buffer RowBuffer value TestException WriteSegment(SerializationContext, ref RowBuffer, in TestException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in TestException value) Parameters context SerializationContext buffer RowBuffer value TestException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnauthenticatedException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnauthenticatedException.html",
    "title": "Class UnauthenticatedException",
    "summary": "Class UnauthenticatedException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll Insufficient authentication credentials to perform the requested operation. [DataContract] public sealed class UnauthenticatedException : Exception, ISerializable Inheritance object Exception UnauthenticatedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UnauthenticatedException() public UnauthenticatedException() UnauthenticatedException(string?) public UnauthenticatedException(string? message) Parameters message string UnauthenticatedException(string?, Exception?) public UnauthenticatedException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnauthenticatedExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnauthenticatedExceptionSerializer.html",
    "title": "Class UnauthenticatedExceptionSerializer",
    "summary": "Class UnauthenticatedExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class UnauthenticatedExceptionSerializer : Serializer<UnauthenticatedException?>, IDerivedSerializer<UnauthenticatedException?>, IDerivedSerializer Inheritance object Serializer Serializer<UnauthenticatedException> UnauthenticatedExceptionSerializer Implements IDerivedSerializer<UnauthenticatedException> IDerivedSerializer Inherited Members Serializer<UnauthenticatedException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UnauthenticatedExceptionSerializer() public UnauthenticatedExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UnauthenticatedException?) public override int SizeOf(SerializationContext context, in UnauthenticatedException? value) Parameters context SerializationContext value UnauthenticatedException Returns int SizeOfSegment(SerializationContext, in UnauthenticatedException) public static int SizeOfSegment(SerializationContext context, in UnauthenticatedException value) Parameters context SerializationContext value UnauthenticatedException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UnauthenticatedException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UnauthenticatedException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UnauthenticatedException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in UnauthenticatedException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UnauthenticatedException? value) Parameters context SerializationContext buffer RowBuffer value UnauthenticatedException WriteSegment(SerializationContext, ref RowBuffer, in UnauthenticatedException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UnauthenticatedException value) Parameters context SerializationContext buffer RowBuffer value UnauthenticatedException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnavailableException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnavailableException.html",
    "title": "Class UnavailableException",
    "summary": "Class UnavailableException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The service is currently unavailable. [DataContract] public sealed class UnavailableException : Exception, ISerializable Inheritance object Exception UnavailableException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See guidelines at: FailedPreconditionException and AbortedException . Constructors UnavailableException() public UnavailableException() UnavailableException(string?) public UnavailableException(string? message) Parameters message string UnavailableException(string?, Exception?) public UnavailableException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnavailableExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnavailableExceptionSerializer.html",
    "title": "Class UnavailableExceptionSerializer",
    "summary": "Class UnavailableExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class UnavailableExceptionSerializer : Serializer<UnavailableException?>, IDerivedSerializer<UnavailableException?>, IDerivedSerializer Inheritance object Serializer Serializer<UnavailableException> UnavailableExceptionSerializer Implements IDerivedSerializer<UnavailableException> IDerivedSerializer Inherited Members Serializer<UnavailableException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UnavailableExceptionSerializer() public UnavailableExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UnavailableException?) public override int SizeOf(SerializationContext context, in UnavailableException? value) Parameters context SerializationContext value UnavailableException Returns int SizeOfSegment(SerializationContext, in UnavailableException) public static int SizeOfSegment(SerializationContext context, in UnavailableException value) Parameters context SerializationContext value UnavailableException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UnavailableException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UnavailableException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UnavailableException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in UnavailableException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UnavailableException? value) Parameters context SerializationContext buffer RowBuffer value UnavailableException WriteSegment(SerializationContext, ref RowBuffer, in UnavailableException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UnavailableException value) Parameters context SerializationContext buffer RowBuffer value UnavailableException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnimplementedException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnimplementedException.html",
    "title": "Class UnimplementedException",
    "summary": "Class UnimplementedException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll The operation is not implemented, not supported or disabled. [DataContract] public sealed class UnimplementedException : Exception, ISerializable Inheritance object Exception UnimplementedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UnimplementedException() public UnimplementedException() UnimplementedException(string?) public UnimplementedException(string? message) Parameters message string UnimplementedException(string?, Exception?) public UnimplementedException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UnimplementedExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UnimplementedExceptionSerializer.html",
    "title": "Class UnimplementedExceptionSerializer",
    "summary": "Class UnimplementedExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class UnimplementedExceptionSerializer : Serializer<UnimplementedException?>, IDerivedSerializer<UnimplementedException?>, IDerivedSerializer Inheritance object Serializer Serializer<UnimplementedException> UnimplementedExceptionSerializer Implements IDerivedSerializer<UnimplementedException> IDerivedSerializer Inherited Members Serializer<UnimplementedException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UnimplementedExceptionSerializer() public UnimplementedExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UnimplementedException?) public override int SizeOf(SerializationContext context, in UnimplementedException? value) Parameters context SerializationContext value UnimplementedException Returns int SizeOfSegment(SerializationContext, in UnimplementedException) public static int SizeOfSegment(SerializationContext context, in UnimplementedException value) Parameters context SerializationContext value UnimplementedException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UnimplementedException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UnimplementedException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UnimplementedException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in UnimplementedException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UnimplementedException? value) Parameters context SerializationContext buffer RowBuffer value UnimplementedException WriteSegment(SerializationContext, ref RowBuffer, in UnimplementedException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UnimplementedException value) Parameters context SerializationContext buffer RowBuffer value UnimplementedException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UninitializedException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UninitializedException.html",
    "title": "Class UninitializedException",
    "summary": "Class UninitializedException Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll Exception thrown when an uninitialized structure is used. [DataContract] public class UninitializedException : Exception, ISerializable Inheritance object Exception UninitializedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UninitializedException() Constructor. public UninitializedException() UninitializedException(string?) Standard Exception constructor. public UninitializedException(string? message) Parameters message string UninitializedException(string?, Exception?) Standard Exception constructor. public UninitializedException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.UninitializedExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.UninitializedExceptionSerializer.html",
    "title": "Class UninitializedExceptionSerializer",
    "summary": "Class UninitializedExceptionSerializer Namespace MarymoorStudios.Core.Rpc.Exceptions Assembly MarymoorStudios.Core.Rpc.Exceptions.dll public sealed class UninitializedExceptionSerializer : Serializer<UninitializedException?>, IDerivedSerializer<UninitializedException?>, IDerivedSerializer Inheritance object Serializer Serializer<UninitializedException> UninitializedExceptionSerializer Implements IDerivedSerializer<UninitializedException> IDerivedSerializer Inherited Members Serializer<UninitializedException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UninitializedExceptionSerializer() public UninitializedExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UninitializedException?) public override int SizeOf(SerializationContext context, in UninitializedException? value) Parameters context SerializationContext value UninitializedException Returns int SizeOfSegment(SerializationContext, in UninitializedException) public static int SizeOfSegment(SerializationContext context, in UninitializedException value) Parameters context SerializationContext value UninitializedException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UninitializedException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UninitializedException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UninitializedException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in UninitializedException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UninitializedException? value) Parameters context SerializationContext buffer RowBuffer value UninitializedException WriteSegment(SerializationContext, ref RowBuffer, in UninitializedException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UninitializedException value) Parameters context SerializationContext buffer RowBuffer value UninitializedException"
  },
  "api/MarymoorStudios.Core.Rpc.Exceptions.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Exceptions.html",
    "title": "Namespace MarymoorStudios.Core.Rpc.Exceptions",
    "summary": "Namespace MarymoorStudios.Core.Rpc.Exceptions Classes AbortedException The operation has been terminated ungracefully. AbortedExceptionSerializer AlreadyExistsException The operation failed because the target already exists. AlreadyExistsExceptionSerializer EndOfSequenceException A sequence has been read past its EOS. EndOfSequenceExceptionSerializer FailedPreconditionException The operation was rejected because the system is not in a state required for the operation's execution. FailedPreconditionExceptionSerializer InsufficientResourcesException The needed resource are not available to complete the operation. InsufficientResourcesExceptionSerializer InvalidArgumentException InvalidArgumentExceptionSerializer NotFoundException The operation failed because the target could not be found. NotFoundExceptionSerializer Test2Exception An exception used in testing for type-based error discrimination. Test2ExceptionSerializer TestException An exception used in testing for type-based error discrimination. TestExceptionSerializer UnauthenticatedException Insufficient authentication credentials to perform the requested operation. UnauthenticatedExceptionSerializer UnavailableException The service is currently unavailable. UnavailableExceptionSerializer UnimplementedException The operation is not implemented, not supported or disabled. UnimplementedExceptionSerializer UninitializedException Exception thrown when an uninitialized structure is used. UninitializedExceptionSerializer"
  },
  "api/MarymoorStudios.Core.Rpc.IByRefRemotable.html": {
    "href": "api/MarymoorStudios.Core.Rpc.IByRefRemotable.html",
    "title": "Interface IByRefRemotable",
    "summary": "Interface IByRefRemotable Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Objects that are remoted by reference (instead of by value). public interface IByRefRemotable"
  },
  "api/MarymoorStudios.Core.Rpc.IMetadata.Descriptor.html": {
    "href": "api/MarymoorStudios.Core.Rpc.IMetadata.Descriptor.html",
    "title": "Class IMetadata.Descriptor",
    "summary": "Class IMetadata.Descriptor Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll The base type for all late-bound capability descriptions. [DataContract] public record IMetadata.Descriptor : IEquatable<IMetadata.Descriptor> Inheritance object IMetadata.Descriptor Implements IEquatable<IMetadata.Descriptor> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks Concrete late-bound capability descriptors should be derived from this base. This base is NOT to support partial materialization of capability descriptors by down-level consumers. Constructors Descriptor(Descriptor) protected Descriptor(IMetadata.Descriptor original) Parameters original IMetadata.Descriptor Descriptor(string, string) The base type for all late-bound capability descriptions. public Descriptor(string Name, string Description) Parameters Name string The name of the capability. Description string A brief description of the capability (for display). Remarks Concrete late-bound capability descriptors should be derived from this base. This base is NOT to support partial materialization of capability descriptors by down-level consumers. Properties Description A brief description of the capability (for display). public string Description { get; init; } Property Value string EqualityContract protected virtual Type EqualityContract { get; } Property Value Type Name The name of the capability. public string Name { get; init; } Property Value string Methods Deconstruct(out string, out string) public void Deconstruct(out string Name, out string Description) Parameters Name string Description string Equals(Descriptor?) public virtual bool Equals(IMetadata.Descriptor? other) Parameters other IMetadata.Descriptor Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder builder) Parameters builder StringBuilder Returns bool ToString() public override string ToString() Returns string Operators operator ==(Descriptor?, Descriptor?) public static bool operator ==(IMetadata.Descriptor? left, IMetadata.Descriptor? right) Parameters left IMetadata.Descriptor right IMetadata.Descriptor Returns bool operator !=(Descriptor?, Descriptor?) public static bool operator !=(IMetadata.Descriptor? left, IMetadata.Descriptor? right) Parameters left IMetadata.Descriptor right IMetadata.Descriptor Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.IMetadata.DescriptorSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.IMetadata.DescriptorSerializer.html",
    "title": "Class IMetadata.DescriptorSerializer",
    "summary": "Class IMetadata.DescriptorSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class IMetadata.DescriptorSerializer : Serializer<IMetadata.Descriptor?>, IDerivedSerializer<IMetadata.Descriptor?>, IDerivedSerializer Inheritance object Serializer Serializer<IMetadata.Descriptor> IMetadata.DescriptorSerializer Implements IDerivedSerializer<IMetadata.Descriptor> IDerivedSerializer Inherited Members Serializer<IMetadata.Descriptor>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DescriptorSerializer() public DescriptorSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Descriptor?) public override int SizeOf(SerializationContext context, in IMetadata.Descriptor? value) Parameters context SerializationContext value IMetadata.Descriptor Returns int SizeOfSegment(SerializationContext, in Descriptor) public static int SizeOfSegment(SerializationContext context, in IMetadata.Descriptor value) Parameters context SerializationContext value IMetadata.Descriptor Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Descriptor?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IMetadata.Descriptor? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value IMetadata.Descriptor Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out string, out string) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out string memberName, out string memberDescription) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberName string memberDescription string Returns bool Write(SerializationContext, ref RowBuffer, in Descriptor?) public override void Write(SerializationContext context, ref RowBuffer buffer, in IMetadata.Descriptor? value) Parameters context SerializationContext buffer RowBuffer value IMetadata.Descriptor WriteSegment(SerializationContext, ref RowBuffer, in Descriptor) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in IMetadata.Descriptor value) Parameters context SerializationContext buffer RowBuffer value IMetadata.Descriptor"
  },
  "api/MarymoorStudios.Core.Rpc.IMetadata.html": {
    "href": "api/MarymoorStudios.Core.Rpc.IMetadata.html",
    "title": "Interface IMetadata",
    "summary": "Interface IMetadata Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll A general mechanism for publishing late-bound eventual capabilities. [Eventual] public interface IMetadata Remarks IMetadata is a general Eventual interface for exposing a set of late-bound capabilities. Exactly which capabilities are published can be defined at runtime. IMetadata makes for a useful root capability from any Sip that may: Expose different capabilities to different clients (e.g. IMyService and IYourService). Expose different capabilities at different times (e.g. IStateState and IFinalState ). Expose multiple version-specific interfaces of the same service (e.g. IMyServiceV1 and IMyServiceV2). Methods GetCapabilities() Promise<IMetadata.Descriptor[]> GetCapabilities() Returns Promise<IMetadata.Descriptor[]>"
  },
  "api/MarymoorStudios.Core.Rpc.INothing.html": {
    "href": "api/MarymoorStudios.Core.Rpc.INothing.html",
    "title": "Interface INothing",
    "summary": "Interface INothing Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Empty eventual interface that grants no capabilities. [Eventual] public interface INothing"
  },
  "api/MarymoorStudios.Core.Rpc.IProxy-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.IProxy-2.html",
    "title": "Interface IProxy<TProxy, TServer>",
    "summary": "Interface IProxy<TProxy, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Interface that provides generic constraints. public interface IProxy<out TProxy, TServer> where TProxy : Proxy<TServer> where TServer : AServer<TServer> Type Parameters TProxy TServer Methods Create(Promise<TServer>) Creates a forwarded promise whose outcome will be the same as p. public static abstract TProxy Create(Promise<TServer> p) Parameters p Promise<TServer> Returns TProxy Create(Resolver<TServer>) Creates an unresolved promise whose future outcome is defined by r. public static abstract TProxy Create(Resolver<TServer> r) Parameters r Resolver<TServer> Returns TProxy Create(Proxy<TServer>) Creates a forwarded promise whose outcome will be the same as proxy. public static abstract TProxy Create(Proxy<TServer> proxy) Parameters proxy Proxy<TServer> Returns TProxy Create(Exception) Creates a failed promise whose outcome is ex. public static abstract TProxy Create(Exception ex) Parameters ex Exception Returns TProxy Create(TServer) Creates a successfully resolved promise. public static abstract TProxy Create(TServer server) Parameters server TServer Returns TProxy"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.AdmissionPolicy.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.AdmissionPolicy.html",
    "title": "Enum AdmissionManager.AdmissionPolicy",
    "summary": "Enum AdmissionManager.AdmissionPolicy Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll The admission policy. [DataContract] public enum AdmissionManager.AdmissionPolicy Fields FriendsOnly = 0 Admit only those explicitly approved (who are not also banned). AllowAll = 1 Admit everyone (except those explicitly banned)."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.AdmissionPolicySerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.AdmissionPolicySerializer.html",
    "title": "Class AdmissionManager.AdmissionPolicySerializer",
    "summary": "Class AdmissionManager.AdmissionPolicySerializer Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public sealed class AdmissionManager.AdmissionPolicySerializer : Serializer<AdmissionManager.AdmissionPolicy> Inheritance object Serializer Serializer<AdmissionManager.AdmissionPolicy> AdmissionManager.AdmissionPolicySerializer Inherited Members Serializer<AdmissionManager.AdmissionPolicy>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AdmissionPolicySerializer() public AdmissionPolicySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in AdmissionPolicy) public override int SizeOf(SerializationContext context, in AdmissionManager.AdmissionPolicy value) Parameters context SerializationContext value AdmissionManager.AdmissionPolicy Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out AdmissionPolicy) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out AdmissionManager.AdmissionPolicy value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value AdmissionManager.AdmissionPolicy Returns bool Write(SerializationContext, ref RowBuffer, in AdmissionPolicy) public override void Write(SerializationContext context, ref RowBuffer buffer, in AdmissionManager.AdmissionPolicy value) Parameters context SerializationContext buffer RowBuffer value AdmissionManager.AdmissionPolicy"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.AdmissionManager.html",
    "title": "Class AdmissionManager",
    "summary": "Class AdmissionManager Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public class AdmissionManager : IAdmissionManager<AdmissionManager, object?> Inheritance object AdmissionManager Implements IAdmissionManager<AdmissionManager, object> Derived RemoteAdmissionManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AdmissionManager(ILoggerFactory, AdmissionPolicy, int) Constructor. protected AdmissionManager(ILoggerFactory factory, AdmissionManager.AdmissionPolicy policy, int maxRecencyList) Parameters factory ILoggerFactory policy AdmissionManager.AdmissionPolicy maxRecencyList int Properties ActiveEndorsements Active Endorsements. public EndorsementCollection ActiveEndorsements { get; } Property Value EndorsementCollection Approved Users explicitly approved. public UserIdentityCollection Approved { get; } Property Value UserIdentityCollection Remarks These users (friends) are always admitted. Banned Users explicitly banned. public UserIdentityCollection Banned { get; } Property Value UserIdentityCollection Remarks These users are never admitted (even if also approved). InactiveEndorsements Inactive Endorsements. public EndorsementCollection InactiveEndorsements { get; } Property Value EndorsementCollection MaxRecencyList The maximum number of entries to maintain in RecencyList. public int MaxRecencyList { get; set; } Property Value int Policy The policy for which users to admit. public AdmissionManager.AdmissionPolicy Policy { get; set; } Property Value AdmissionManager.AdmissionPolicy RecencyList The list of recently seen users. public UserIdentityRecencyList RecencyList { get; } Property Value UserIdentityRecencyList Remarks This list includes both accepted and refused users. Methods Create(ILoggerFactory, AdmissionPolicy, int) Creates a new admission manager. public static AdmissionManager Create(ILoggerFactory factory, AdmissionManager.AdmissionPolicy policy = AdmissionPolicy.FriendsOnly, int maxRecencyList = 10) Parameters factory ILoggerFactory policy AdmissionManager.AdmissionPolicy maxRecencyList int Returns AdmissionManager OnAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) protected virtual ValueTask<bool> OnAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity endorsements IEnumerable<Endorsement> timestamp DateTime Returns ValueTask<bool> TryAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) Checks if the user identity can be admitted. public ValueTask<bool> TryAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity The user identity to check. endorsements IEnumerable<Endorsement> Endorsements that support the identity provided by identity. timestamp DateTime The timestamp. Returns ValueTask<bool> True if the user should be admitted, false otherwise. Explicit Interface Implementations Create(object?, ILoggerFactory, AdmissionPolicy, int) Creates a new admission manager. static AdmissionManager Create(object? args, ILoggerFactory factory, AdmissionManager.AdmissionPolicy policy = AdmissionPolicy.FriendsOnly, int maxRecencyList = 10) Parameters args object factory ILoggerFactory policy AdmissionManager.AdmissionPolicy maxRecencyList int Returns AdmissionManager"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.CertificateManager.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.CertificateManager.html",
    "title": "Class CertificateManager",
    "summary": "Class CertificateManager Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll Manages the certificates that provide identity to others. public abstract class CertificateManager : IDisposable, IAsyncDisposable Inheritance object CertificateManager Implements IDisposable IAsyncDisposable Derived StoreCertificateManager Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CertificateManager() protected CertificateManager() Properties ClientOptions The TLS client options used to negotiate authentication parameters. public abstract SslClientAuthenticationOptions ClientOptions { get; } Property Value SslClientAuthenticationOptions Endorsements Endorsements to support Identity. public abstract EndorsementCollection Endorsements { get; } Property Value EndorsementCollection Identity The identity. public abstract UserIdentity Identity { get; } Property Value UserIdentity ServerOptions The TLS server options used to negotiate authentication parameters. public abstract SslServerAuthenticationOptions ServerOptions { get; } Property Value SslServerAuthenticationOptions Methods Dispose() public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool DisposeAsync() public ValueTask DisposeAsync() Returns ValueTask DisposeAsyncCore() protected virtual ValueTask DisposeAsyncCore() Returns ValueTask TryAdmit(X509Certificate, IEnumerable<Endorsement>, DateTime) Checks if the user can be admitted. public abstract ValueTask<(bool IsAdmitted, UserIdentity Identity)> TryAdmit(X509Certificate cert, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters cert X509Certificate The user's certificate. endorsements IEnumerable<Endorsement> Endorsements that support the identity provided by cert. timestamp DateTime The timestamp. Returns ValueTask<(bool IsAdmitted, UserIdentity Identity)> (True, the admitted identity) if the user should be admitted, (false, undefined) otherwise. TrySignData(ReadOnlySpan<byte>, out ReadOnlyMemory<byte>) Signs data with the Identity private key. public abstract bool TrySignData(ReadOnlySpan<byte> data, out ReadOnlyMemory<byte> signature) Parameters data ReadOnlySpan<byte> The data to sign. signature ReadOnlyMemory<byte> The signature, if successful, undefined otherwise. Returns bool True if successful, false otherwise. ValidateData(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Validates a signature over the data. public abstract bool ValidateData(ReadOnlySpan<byte> publicKey, ReadOnlySpan<byte> data, ReadOnlySpan<byte> signature) Parameters publicKey ReadOnlySpan<byte> The public key whose private key was used to sign the data. data ReadOnlySpan<byte> The data that was signed. signature ReadOnlySpan<byte> The signature to validate. Returns bool True if successful, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.Endorsement.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.Endorsement.html",
    "title": "Class Endorsement",
    "summary": "Class Endorsement Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll [DataContract] public sealed class Endorsement Inheritance object Endorsement Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Endorsement(string, ReadOnlyMemory<byte>, DateTime, string, ReadOnlyMemory<byte>, ReadOnlyMemory<byte>) public Endorsement(string email, ReadOnlyMemory<byte> publicKey, DateTime created, string issuer, ReadOnlyMemory<byte> issuerPublicKey, ReadOnlyMemory<byte> signature) Parameters email string publicKey ReadOnlyMemory<byte> created DateTime issuer string issuerPublicKey ReadOnlyMemory<byte> signature ReadOnlyMemory<byte> Properties Created Date the endorsement was created. [DataMember] public DateTime Created { get; } Property Value DateTime Email Email address of the endorsed identity. [DataMember] public string Email { get; } Property Value string Issuer Email address of the issuing identity. [DataMember] public string Issuer { get; } Property Value string IssuerPublicKey Public key of the issuing identity. [DataMember] public ReadOnlyMemory<byte> IssuerPublicKey { get; } Property Value ReadOnlyMemory<byte> PublicKey Public key of the endorsed identity. [DataMember] public ReadOnlyMemory<byte> PublicKey { get; } Property Value ReadOnlyMemory<byte> Signature The signed hash. [DataMember] public ReadOnlyMemory<byte> Signature { get; } Property Value ReadOnlyMemory<byte> Methods PublicKeyEquals(Endorsement, Endorsement) Returns true if the two endorsements have the same public keys. public static bool PublicKeyEquals(Endorsement e1, Endorsement e2) Parameters e1 Endorsement e2 Endorsement Returns bool TryCreate(CertificateManager, UserIdentity, DateTime, out Endorsement) Creates an endorsement for a given identity. public static bool TryCreate(CertificateManager issuer, UserIdentity target, DateTime timestamp, out Endorsement endorsement) Parameters issuer CertificateManager The identity issuing the endorsement. target UserIdentity The identity to be endorsed. timestamp DateTime The timestamp to use for the creation time. endorsement Endorsement If successful, the endorsement. Returns bool True is successful, false otherwise. Remarks The issuer MUST include a private key. Validate(CertificateManager) Validates an endorsement. public bool Validate(CertificateManager certMgr) Parameters certMgr CertificateManager Returns bool True if the endorsement is valid, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.EndorsementCollection.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.EndorsementCollection.html",
    "title": "Class EndorsementCollection",
    "summary": "Class EndorsementCollection Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll An unordered set of Endorsement. [DataContract] public sealed class EndorsementCollection : IEnumerable<Endorsement>, IEnumerable Inheritance object EndorsementCollection Implements IEnumerable<Endorsement> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EndorsementCollection() Create an empty collection. public EndorsementCollection() EndorsementCollection(IEnumerable<Endorsement>) Create a collection prepopulated with a set of initial members. public EndorsementCollection(IEnumerable<Endorsement> members) Parameters members IEnumerable<Endorsement> The initial members. Properties Count The number of entries in the collection. public int Count { get; } Property Value int Members The members of the collection. [DataMember] public IEnumerable<Endorsement> Members { get; } Property Value IEnumerable<Endorsement> Methods Add(Endorsement) Adds an endorsement to the collection. public bool Add(Endorsement endorsement) Parameters endorsement Endorsement The endorsement. Returns bool True if successfully added, false otherwise. AddOrUpdate(Endorsement) Adds or updates an endorsement to the collection. public bool AddOrUpdate(Endorsement endorsement) Parameters endorsement Endorsement The endorsement. Returns bool True if updated, false if added. Contains(Endorsement) Returns true if the endorsement is a member of the collection, false otherwise. public bool Contains(Endorsement endorsement) Parameters endorsement Endorsement Returns bool GetEnumerator() public IEnumerator<Endorsement> GetEnumerator() Returns IEnumerator<Endorsement> Remove(Endorsement) Remove an endorsement from the collection. public bool Remove(Endorsement endorsement) Parameters endorsement Endorsement The endorsement. Returns bool True if removed, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.EndorsementCollectionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.EndorsementCollectionSerializer.html",
    "title": "Class EndorsementCollectionSerializer",
    "summary": "Class EndorsementCollectionSerializer Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public sealed class EndorsementCollectionSerializer : Serializer<EndorsementCollection?>, IDerivedSerializer<EndorsementCollection?>, IDerivedSerializer Inheritance object Serializer Serializer<EndorsementCollection> EndorsementCollectionSerializer Implements IDerivedSerializer<EndorsementCollection> IDerivedSerializer Inherited Members Serializer<EndorsementCollection>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EndorsementCollectionSerializer() public EndorsementCollectionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in EndorsementCollection?) public override int SizeOf(SerializationContext context, in EndorsementCollection? value) Parameters context SerializationContext value EndorsementCollection Returns int SizeOfSegment(SerializationContext, in EndorsementCollection) public static int SizeOfSegment(SerializationContext context, in EndorsementCollection value) Parameters context SerializationContext value EndorsementCollection Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out EndorsementCollection?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out EndorsementCollection? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value EndorsementCollection Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out IEnumerable<Endorsement>) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IEnumerable<Endorsement> memberMembers) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberMembers IEnumerable<Endorsement> Returns bool Write(SerializationContext, ref RowBuffer, in EndorsementCollection?) public override void Write(SerializationContext context, ref RowBuffer buffer, in EndorsementCollection? value) Parameters context SerializationContext buffer RowBuffer value EndorsementCollection WriteSegment(SerializationContext, ref RowBuffer, in EndorsementCollection) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in EndorsementCollection value) Parameters context SerializationContext buffer RowBuffer value EndorsementCollection"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.EndorsementSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.EndorsementSerializer.html",
    "title": "Class EndorsementSerializer",
    "summary": "Class EndorsementSerializer Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public sealed class EndorsementSerializer : Serializer<Endorsement?>, IDerivedSerializer<Endorsement?>, IDerivedSerializer Inheritance object Serializer Serializer<Endorsement> EndorsementSerializer Implements IDerivedSerializer<Endorsement> IDerivedSerializer Inherited Members Serializer<Endorsement>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EndorsementSerializer() public EndorsementSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Endorsement?) public override int SizeOf(SerializationContext context, in Endorsement? value) Parameters context SerializationContext value Endorsement Returns int SizeOfSegment(SerializationContext, in Endorsement) public static int SizeOfSegment(SerializationContext context, in Endorsement value) Parameters context SerializationContext value Endorsement Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Endorsement?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Endorsement? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Endorsement Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out string, out ReadOnlyMemory<byte>, out DateTime, out string, out ReadOnlyMemory<byte>, out ReadOnlyMemory<byte>) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out string memberEmail, out ReadOnlyMemory<byte> memberPublicKey, out DateTime memberCreated, out string memberIssuer, out ReadOnlyMemory<byte> memberIssuerPublicKey, out ReadOnlyMemory<byte> memberSignature) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberEmail string memberPublicKey ReadOnlyMemory<byte> memberCreated DateTime memberIssuer string memberIssuerPublicKey ReadOnlyMemory<byte> memberSignature ReadOnlyMemory<byte> Returns bool Write(SerializationContext, ref RowBuffer, in Endorsement?) public override void Write(SerializationContext context, ref RowBuffer buffer, in Endorsement? value) Parameters context SerializationContext buffer RowBuffer value Endorsement WriteSegment(SerializationContext, ref RowBuffer, in Endorsement) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in Endorsement value) Parameters context SerializationContext buffer RowBuffer value Endorsement"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IAdmissionManager-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IAdmissionManager-2.html",
    "title": "Interface IAdmissionManager<TAdmissionManager, TArg>",
    "summary": "Interface IAdmissionManager<TAdmissionManager, TArg> Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll Interface that provides generic constraints. public interface IAdmissionManager<out TAdmissionManager, in TArg> where TAdmissionManager : AdmissionManager Type Parameters TAdmissionManager TArg Methods Create(TArg, ILoggerFactory, AdmissionPolicy, int) Creates a new admission manager. public static abstract TAdmissionManager Create(TArg args, ILoggerFactory factory, AdmissionManager.AdmissionPolicy policy, int maxRecencyList) Parameters args TArg factory ILoggerFactory policy AdmissionManager.AdmissionPolicy maxRecencyList int Returns TAdmissionManager"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.AdmissionPolicyFile.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.AdmissionPolicyFile.html",
    "title": "Class AdmissionPolicyFile",
    "summary": "Class AdmissionPolicyFile Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll public static class AdmissionPolicyFile Inheritance object AdmissionPolicyFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Read<T>(FileProxy, ILoggerFactory, MemoryPool<byte>) Reads the admission policy file and creates an AdmissionManager from it. public static Promise<(UserIdentity Owner, T Manager)> Read<T>(FileProxy file, ILoggerFactory factory, MemoryPool<byte> pool) where T : AdmissionManager, IAdmissionManager<T, object?> Parameters file FileProxy The file to read from. factory ILoggerFactory The logger factory for audits. pool MemoryPool<byte> The pool to allocate buffers from. Returns Promise<(UserIdentity Owner, T Manager)> The manager. Type Parameters T Exceptions SerializationException If file corruption is detected. Read<T, TArg>(FileProxy, TArg, ILoggerFactory, MemoryPool<byte>) Reads the admission policy file and creates an AdmissionManager from it. public static Promise<(UserIdentity Owner, T Manager)> Read<T, TArg>(FileProxy file, TArg arg, ILoggerFactory factory, MemoryPool<byte> pool) where T : AdmissionManager, IAdmissionManager<T, TArg> Parameters file FileProxy The file to read from. arg TArg State passed to the admission manager constructor. factory ILoggerFactory The logger factory for audits. pool MemoryPool<byte> The pool to allocate buffers from. Returns Promise<(UserIdentity Owner, T Manager)> The manager. Type Parameters T TArg Exceptions SerializationException If file corruption is detected. Write(FileProxy, UserIdentity, AdmissionManager, MemoryPool<byte>) Writes an admission policy file. public static Promise Write(FileProxy file, UserIdentity owner, AdmissionManager manager, MemoryPool<byte> pool) Parameters file FileProxy The file to write to. owner UserIdentity The owning identity of this policy. manager AdmissionManager The manager whose policy should be written. pool MemoryPool<byte> The pool to allocate buffers from. Returns Promise"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionOutcome.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionOutcome.html",
    "title": "Enum RemoteAdmissionManager.AdmissionOutcome",
    "summary": "Enum RemoteAdmissionManager.AdmissionOutcome Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll The outcome of an admission decision. [DataContract] public enum RemoteAdmissionManager.AdmissionOutcome Fields AllowOnce = 0 Allow this identity this one time. AllowAlways = 1 Allow this identity from now on. DenyOnce = 2 Refuse this identity this one time. DenyAlways = 3 Refuse this identity from now on."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionOutcomeSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionOutcomeSerializer.html",
    "title": "Class RemoteAdmissionManager.AdmissionOutcomeSerializer",
    "summary": "Class RemoteAdmissionManager.AdmissionOutcomeSerializer Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll public sealed class RemoteAdmissionManager.AdmissionOutcomeSerializer : Serializer<RemoteAdmissionManager.AdmissionOutcome> Inheritance object Serializer Serializer<RemoteAdmissionManager.AdmissionOutcome> RemoteAdmissionManager.AdmissionOutcomeSerializer Inherited Members Serializer<RemoteAdmissionManager.AdmissionOutcome>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AdmissionOutcomeSerializer() public AdmissionOutcomeSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in AdmissionOutcome) public override int SizeOf(SerializationContext context, in RemoteAdmissionManager.AdmissionOutcome value) Parameters context SerializationContext value RemoteAdmissionManager.AdmissionOutcome Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out AdmissionOutcome) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out RemoteAdmissionManager.AdmissionOutcome value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value RemoteAdmissionManager.AdmissionOutcome Returns bool Write(SerializationContext, ref RowBuffer, in AdmissionOutcome) public override void Write(SerializationContext context, ref RowBuffer buffer, in RemoteAdmissionManager.AdmissionOutcome value) Parameters context SerializationContext buffer RowBuffer value RemoteAdmissionManager.AdmissionOutcome"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionProxy.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionProxy.html",
    "title": "Class RemoteAdmissionManager.AdmissionProxy",
    "summary": "Class RemoteAdmissionManager.AdmissionProxy Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll public sealed class RemoteAdmissionManager.AdmissionProxy : Proxy<RemoteAdmissionManager.AdmissionServer>, IProxy<RemoteAdmissionManager.AdmissionProxy, RemoteAdmissionManager.AdmissionServer> Inheritance object Proxy<RemoteAdmissionManager.AdmissionServer> RemoteAdmissionManager.AdmissionProxy Implements IProxy<RemoteAdmissionManager.AdmissionProxy, RemoteAdmissionManager.AdmissionServer> Inherited Members Proxy<RemoteAdmissionManager.AdmissionServer>.Sync() Proxy<RemoteAdmissionManager.AdmissionServer>.GetRemoteIdentity() Proxy<RemoteAdmissionManager.AdmissionServer>.AppendOne(ResolverTurn<RemoteAdmissionManager.AdmissionServer>) Proxy<RemoteAdmissionManager.AdmissionServer>.IsFailed Proxy<RemoteAdmissionManager.AdmissionServer>.IsResolved Proxy<RemoteAdmissionManager.AdmissionServer>.Failure object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AdmissionProxy(Promise<AdmissionServer>) Creates a forwarded promise whose outcome will be the same as p. public AdmissionProxy(Promise<RemoteAdmissionManager.AdmissionServer> p) Parameters p Promise<RemoteAdmissionManager.AdmissionServer> AdmissionProxy(Resolver<AdmissionServer>) Creates an unresolved promise whose future outcome is defined by r. public AdmissionProxy(Resolver<RemoteAdmissionManager.AdmissionServer> r) Parameters r Resolver<RemoteAdmissionManager.AdmissionServer> AdmissionProxy(AdmissionServer) Creates a successfully resolved promise. public AdmissionProxy(RemoteAdmissionManager.AdmissionServer value) Parameters value RemoteAdmissionManager.AdmissionServer AdmissionProxy(Proxy<AdmissionServer>) Creates a forwarded promise whose outcome will be the same as p. public AdmissionProxy(Proxy<RemoteAdmissionManager.AdmissionServer> p) Parameters p Proxy<RemoteAdmissionManager.AdmissionServer> AdmissionProxy(Exception) Creates a failed promise whose outcome is ex. public AdmissionProxy(Exception ex) Parameters ex Exception Methods OnAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) public Promise<RemoteAdmissionManager.AdmissionOutcome> OnAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity endorsements IEnumerable<Endorsement> timestamp DateTime Returns Promise<RemoteAdmissionManager.AdmissionOutcome> Operators implicit operator AdmissionProxy(Promise<AdmissionProxy>) Implicit conversion to its syntax. public static implicit operator RemoteAdmissionManager.AdmissionProxy(Promise<RemoteAdmissionManager.AdmissionProxy> p) Parameters p Promise<RemoteAdmissionManager.AdmissionProxy> Returns RemoteAdmissionManager.AdmissionProxy Explicit Interface Implementations Create(Promise<AdmissionServer>) Creates a forwarded promise whose outcome will be the same as p. static RemoteAdmissionManager.AdmissionProxy Create(Promise<RemoteAdmissionManager.AdmissionServer> p) Parameters p Promise<RemoteAdmissionManager.AdmissionServer> Returns RemoteAdmissionManager.AdmissionProxy Create(Resolver<AdmissionServer>) Creates an unresolved promise whose future outcome is defined by r. static RemoteAdmissionManager.AdmissionProxy Create(Resolver<RemoteAdmissionManager.AdmissionServer> r) Parameters r Resolver<RemoteAdmissionManager.AdmissionServer> Returns RemoteAdmissionManager.AdmissionProxy Create(AdmissionServer) Creates a successfully resolved promise. static RemoteAdmissionManager.AdmissionProxy Create(RemoteAdmissionManager.AdmissionServer value) Parameters value RemoteAdmissionManager.AdmissionServer Returns RemoteAdmissionManager.AdmissionProxy Create(Proxy<AdmissionServer>) Creates a forwarded promise whose outcome will be the same as p. static RemoteAdmissionManager.AdmissionProxy Create(Proxy<RemoteAdmissionManager.AdmissionServer> p) Parameters p Proxy<RemoteAdmissionManager.AdmissionServer> Returns RemoteAdmissionManager.AdmissionProxy Create(Exception) Creates a failed promise whose outcome is ex. static RemoteAdmissionManager.AdmissionProxy Create(Exception ex) Parameters ex Exception Returns RemoteAdmissionManager.AdmissionProxy"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionServer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.AdmissionServer.html",
    "title": "Class RemoteAdmissionManager.AdmissionServer",
    "summary": "Class RemoteAdmissionManager.AdmissionServer Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll public abstract class RemoteAdmissionManager.AdmissionServer : AServer<RemoteAdmissionManager.AdmissionServer>, IByRefRemotable Inheritance object AServer<RemoteAdmissionManager.AdmissionServer> RemoteAdmissionManager.AdmissionServer Implements IByRefRemotable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AdmissionServer() protected AdmissionServer() Methods OnAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) public abstract Promise<RemoteAdmissionManager.AdmissionOutcome> OnAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity endorsements IEnumerable<Endorsement> timestamp DateTime Returns Promise<RemoteAdmissionManager.AdmissionOutcome>"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.IAdmission.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.IAdmission.html",
    "title": "Interface RemoteAdmissionManager.IAdmission",
    "summary": "Interface RemoteAdmissionManager.IAdmission Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll An eventual interface that can be implemented to received remote admission requests. [Eventual] public interface RemoteAdmissionManager.IAdmission Methods OnAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) Promise<RemoteAdmissionManager.AdmissionOutcome> OnAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity endorsements IEnumerable<Endorsement> timestamp DateTime Returns Promise<RemoteAdmissionManager.AdmissionOutcome>"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.RemoteAdmissionManager.html",
    "title": "Class RemoteAdmissionManager",
    "summary": "Class RemoteAdmissionManager Namespace MarymoorStudios.Core.Rpc.Identity.IO Assembly MarymoorStudios.Core.Rpc.Identity.IO.dll An AdmissionManager that delegates admission decisions through a proxy. public sealed class RemoteAdmissionManager : AdmissionManager, IAdmissionManager<AdmissionManager, object?> Inheritance object AdmissionManager RemoteAdmissionManager Implements IAdmissionManager<AdmissionManager, object> Inherited Members AdmissionManager.Create(ILoggerFactory, AdmissionManager.AdmissionPolicy, int) AdmissionManager.Create(object, ILoggerFactory, AdmissionManager.AdmissionPolicy, int) AdmissionManager.TryAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) AdmissionManager.Policy AdmissionManager.ActiveEndorsements AdmissionManager.InactiveEndorsements AdmissionManager.Approved AdmissionManager.Banned AdmissionManager.RecencyList AdmissionManager.MaxRecencyList object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RemoteAdmissionManager(AdmissionProxy, ILoggerFactory, AdmissionPolicy, int) public RemoteAdmissionManager(RemoteAdmissionManager.AdmissionProxy proxy, ILoggerFactory factory, AdmissionManager.AdmissionPolicy policy, int maxRecencyList) Parameters proxy RemoteAdmissionManager.AdmissionProxy factory ILoggerFactory policy AdmissionManager.AdmissionPolicy maxRecencyList int Methods OnAdmit(UserIdentity, IEnumerable<Endorsement>, DateTime) protected override ValueTask<bool> OnAdmit(UserIdentity identity, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters identity UserIdentity endorsements IEnumerable<Endorsement> timestamp DateTime Returns ValueTask<bool>"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.IO.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.IO.html",
    "title": "Namespace MarymoorStudios.Core.Rpc.Identity.IO",
    "summary": "Namespace MarymoorStudios.Core.Rpc.Identity.IO Classes AdmissionPolicyFile RemoteAdmissionManager An AdmissionManager that delegates admission decisions through a proxy. RemoteAdmissionManager.AdmissionOutcomeSerializer RemoteAdmissionManager.AdmissionProxy RemoteAdmissionManager.AdmissionServer Interfaces RemoteAdmissionManager.IAdmission An eventual interface that can be implemented to received remote admission requests. Enums RemoteAdmissionManager.AdmissionOutcome The outcome of an admission decision."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.StoreCertificateManager.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.StoreCertificateManager.html",
    "title": "Class StoreCertificateManager",
    "summary": "Class StoreCertificateManager Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll An implementation of CertificateManager that stores its certificates in an X509Store. public sealed class StoreCertificateManager : CertificateManager, IDisposable, IAsyncDisposable Inheritance object CertificateManager StoreCertificateManager Implements IDisposable IAsyncDisposable Inherited Members CertificateManager.Dispose() CertificateManager.DisposeAsync() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors StoreCertificateManager(UserIdentity, AdmissionManager) public StoreCertificateManager(UserIdentity identity, AdmissionManager admission) Parameters identity UserIdentity admission AdmissionManager StoreCertificateManager(string, string, AdmissionManager) public StoreCertificateManager(string name, string email, AdmissionManager admission) Parameters name string email string admission AdmissionManager Properties ClientOptions The TLS client options used to negotiate authentication parameters. public override SslClientAuthenticationOptions ClientOptions { get; } Property Value SslClientAuthenticationOptions Endorsements Endorsements to support Identity. public override EndorsementCollection Endorsements { get; } Property Value EndorsementCollection Identity The identity. public override UserIdentity Identity { get; } Property Value UserIdentity ServerOptions The TLS server options used to negotiate authentication parameters. public override SslServerAuthenticationOptions ServerOptions { get; } Property Value SslServerAuthenticationOptions Methods Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool GetIdentities(string) Enumerates the identities in the store. public static IEnumerable<UserIdentity> GetIdentities(string filter = \"\") Parameters filter string An optional filter that can match either name or email. Returns IEnumerable<UserIdentity> RemoveIdentity(UserIdentity) Removes the identity from the store. public static bool RemoveIdentity(UserIdentity identity) Parameters identity UserIdentity The identity to remove. Returns bool True if successful, false otherwise. TryAdmit(X509Certificate, IEnumerable<Endorsement>, DateTime) Checks if the user can be admitted. public override ValueTask<(bool IsAdmitted, UserIdentity Identity)> TryAdmit(X509Certificate cert, IEnumerable<Endorsement> endorsements, DateTime timestamp) Parameters cert X509Certificate The user's certificate. endorsements IEnumerable<Endorsement> Endorsements that support the identity provided by cert. timestamp DateTime The timestamp. Returns ValueTask<(bool IsAdmitted, UserIdentity Identity)> (True, the admitted identity) if the user should be admitted, (false, undefined) otherwise. TryCreateIdentity(string, string, out UserIdentity) Creates a new identity. public static bool TryCreateIdentity(string name, string email, out UserIdentity identity) Parameters name string The unique name of the identity. email string An email to associate with the identity. identity UserIdentity If successful, the identity, otherwise. Returns bool True if successful, false an identity with the same name already exists. TryGetIdentity(string, string, out UserIdentity) Loads an existing identity. public static bool TryGetIdentity(string name, string email, out UserIdentity identity) Parameters name string The unique name of the identity. email string An email to associate with the identity. identity UserIdentity If successful, the identity, otherwise. Returns bool True if successful, false an identity with the same name already exists. TrySignData(ReadOnlySpan<byte>, out ReadOnlyMemory<byte>) Signs data with the Identity private key. public override bool TrySignData(ReadOnlySpan<byte> data, out ReadOnlyMemory<byte> signature) Parameters data ReadOnlySpan<byte> The data to sign. signature ReadOnlyMemory<byte> The signature, if successful, undefined otherwise. Returns bool True if successful, false otherwise. ValidateData(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>) Validates a signature over the data. public override bool ValidateData(ReadOnlySpan<byte> publicKey, ReadOnlySpan<byte> data, ReadOnlySpan<byte> signature) Parameters publicKey ReadOnlySpan<byte> The public key whose private key was used to sign the data. data ReadOnlySpan<byte> The data that was signed. signature ReadOnlySpan<byte> The signature to validate. Returns bool True if successful, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentity.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentity.html",
    "title": "Class UserIdentity",
    "summary": "Class UserIdentity Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll The identity of an RPC peer. [DataContract] public sealed class UserIdentity Inheritance object UserIdentity Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserIdentity(string, string, ReadOnlyMemory<byte>, DateTime) Constructor. public UserIdentity(string name, string email, ReadOnlyMemory<byte> publicKey, DateTime created) Parameters name string email string publicKey ReadOnlyMemory<byte> created DateTime Fields AuthScopeUri URI that MUST appear as a claim in a SubjectAlternativeNameExtension of any valid certificate. public static readonly Uri AuthScopeUri Field Value Uri AuthenticationId The name of the MSC authentication protocol. public const string AuthenticationId = \"MarymoorStudios Authentication\" Field Value string Properties Created Date the identity was created. [DataMember] public DateTime Created { get; } Property Value DateTime Email User's email address. [DataMember] public string Email { get; } Property Value string Remarks Email may not be unique. May be attested, but still not unique. The same user can have multiple user identities with different public keys but the same email. (E.g. during certificate renewal.) Name User's display name. [DataMember] public string Name { get; } Property Value string Remarks Display name may not be unique. PublicKey User's public key. [DataMember] public ReadOnlyMemory<byte> PublicKey { get; } Property Value ReadOnlyMemory<byte> Remarks Globally unique identity. X500DistinguishedName Returns the X500 distinguished name for this identity. public X500DistinguishedName X500DistinguishedName { get; } Property Value X500DistinguishedName Methods CreateIdentityCertificate(string, string, TimeSpan, int) Creates a new MarymoorStudios Authentication Identity certificate. public static X509Certificate2 CreateIdentityCertificate(string name, string email, TimeSpan duration = default, int keySizeInBits = 2048) Parameters name string The display name of the new identity. email string The email address of the new identity. duration TimeSpan The duration for the certificate (default: 1 year). keySizeInBits int The desired key size. Returns X509Certificate2 The identity certificate. MakeX500DistinguishedName(string, string) Creates an appropriate X500DistinguishedName for an identity. public static X500DistinguishedName MakeX500DistinguishedName(string name, string email) Parameters name string The name of the identity. email string The email associated with the identity. Returns X500DistinguishedName The distinguished name. PublicKeyEquals(UserIdentity, UserIdentity) Returns true if the two user identities have the same public key. public static bool PublicKeyEquals(UserIdentity i1, UserIdentity i2) Parameters i1 UserIdentity i2 UserIdentity Returns bool ToString() public override string ToString() Returns string TryCreateFromCert(X509Certificate2, out UserIdentity) Creates a UserIdentity from a X509Certificate. public static bool TryCreateFromCert(X509Certificate2 cert, out UserIdentity identity) Parameters cert X509Certificate2 The certificate from which to extract an identity. identity UserIdentity If successful the identity extracted from the certificate. Returns bool True if a single identity was successfully determined from the provided certificate. False if the certificate does not satisfy the MSC authentication protocol."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityCollection.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityCollection.html",
    "title": "Class UserIdentityCollection",
    "summary": "Class UserIdentityCollection Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll An unordered set of UserIdentity. [DataContract] public sealed class UserIdentityCollection : IEnumerable<UserIdentity>, IEnumerable Inheritance object UserIdentityCollection Implements IEnumerable<UserIdentity> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserIdentityCollection() Create an empty collection. public UserIdentityCollection() UserIdentityCollection(IEnumerable<UserIdentity>) Create a collection prepopulated with a set of initial members. public UserIdentityCollection(IEnumerable<UserIdentity> members) Parameters members IEnumerable<UserIdentity> The initial members. Properties Count The number of entries in the collection. public int Count { get; } Property Value int Members The members of the collection. [DataMember] public IEnumerable<UserIdentity> Members { get; } Property Value IEnumerable<UserIdentity> Methods Add(UserIdentity) Adds a user identity to the collection. public bool Add(UserIdentity identity) Parameters identity UserIdentity The user identity. Returns bool True if successfully added, false otherwise. AddOrUpdate(UserIdentity) Adds or updates a user identity to the collection. public bool AddOrUpdate(UserIdentity identity) Parameters identity UserIdentity The user identity. Returns bool True if updated, false if added. Contains(UserIdentity) Returns true if the identity is a member of the collection, false otherwise. public bool Contains(UserIdentity identity) Parameters identity UserIdentity Returns bool GetEnumerator() public IEnumerator<UserIdentity> GetEnumerator() Returns IEnumerator<UserIdentity> Remove(UserIdentity) Remove a user identity from the collection. public bool Remove(UserIdentity identity) Parameters identity UserIdentity The user identity. Returns bool True if removed, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityCollectionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityCollectionSerializer.html",
    "title": "Class UserIdentityCollectionSerializer",
    "summary": "Class UserIdentityCollectionSerializer Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public sealed class UserIdentityCollectionSerializer : Serializer<UserIdentityCollection?>, IDerivedSerializer<UserIdentityCollection?>, IDerivedSerializer Inheritance object Serializer Serializer<UserIdentityCollection> UserIdentityCollectionSerializer Implements IDerivedSerializer<UserIdentityCollection> IDerivedSerializer Inherited Members Serializer<UserIdentityCollection>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserIdentityCollectionSerializer() public UserIdentityCollectionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UserIdentityCollection?) public override int SizeOf(SerializationContext context, in UserIdentityCollection? value) Parameters context SerializationContext value UserIdentityCollection Returns int SizeOfSegment(SerializationContext, in UserIdentityCollection) public static int SizeOfSegment(SerializationContext context, in UserIdentityCollection value) Parameters context SerializationContext value UserIdentityCollection Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UserIdentityCollection?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UserIdentityCollection? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UserIdentityCollection Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out IEnumerable<UserIdentity>) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IEnumerable<UserIdentity> memberMembers) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberMembers IEnumerable<UserIdentity> Returns bool Write(SerializationContext, ref RowBuffer, in UserIdentityCollection?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UserIdentityCollection? value) Parameters context SerializationContext buffer RowBuffer value UserIdentityCollection WriteSegment(SerializationContext, ref RowBuffer, in UserIdentityCollection) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UserIdentityCollection value) Parameters context SerializationContext buffer RowBuffer value UserIdentityCollection"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityRecencyList.Entry.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityRecencyList.Entry.html",
    "title": "Struct UserIdentityRecencyList.Entry",
    "summary": "Struct UserIdentityRecencyList.Entry Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public struct UserIdentityRecencyList.Entry : IEquatable<UserIdentityRecencyList.Entry> Implements IEquatable<UserIdentityRecencyList.Entry> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Entry(UserIdentity, DateTime, DateTime, int) public Entry(UserIdentity Identity, DateTime CreationTime, DateTime LastUpdateTime, int AccessCount) Parameters Identity UserIdentity CreationTime DateTime LastUpdateTime DateTime AccessCount int Properties AccessCount public int AccessCount { readonly get; set; } Property Value int CreationTime public DateTime CreationTime { readonly get; set; } Property Value DateTime Identity public UserIdentity Identity { readonly get; set; } Property Value UserIdentity LastUpdateTime public DateTime LastUpdateTime { readonly get; set; } Property Value DateTime Methods Deconstruct(out UserIdentity, out DateTime, out DateTime, out int) public readonly void Deconstruct(out UserIdentity Identity, out DateTime CreationTime, out DateTime LastUpdateTime, out int AccessCount) Parameters Identity UserIdentity CreationTime DateTime LastUpdateTime DateTime AccessCount int Equals(Entry) public readonly bool Equals(UserIdentityRecencyList.Entry other) Parameters other UserIdentityRecencyList.Entry Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int ToString() public override readonly string ToString() Returns string Operators operator ==(Entry, Entry) public static bool operator ==(UserIdentityRecencyList.Entry left, UserIdentityRecencyList.Entry right) Parameters left UserIdentityRecencyList.Entry right UserIdentityRecencyList.Entry Returns bool operator !=(Entry, Entry) public static bool operator !=(UserIdentityRecencyList.Entry left, UserIdentityRecencyList.Entry right) Parameters left UserIdentityRecencyList.Entry right UserIdentityRecencyList.Entry Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityRecencyList.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentityRecencyList.html",
    "title": "Class UserIdentityRecencyList",
    "summary": "Class UserIdentityRecencyList Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll A set of UserIdentity that keeps track of accesses. public sealed class UserIdentityRecencyList : IEnumerable<UserIdentityRecencyList.Entry>, IEnumerable Inheritance object UserIdentityRecencyList Implements IEnumerable<UserIdentityRecencyList.Entry> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserIdentityRecencyList() Create an empty recency list. public UserIdentityRecencyList() UserIdentityRecencyList(IEnumerable<UserIdentity>, DateTime) Create a recency list prepopulated with a set of initial members. public UserIdentityRecencyList(IEnumerable<UserIdentity> members, DateTime timestamp) Parameters members IEnumerable<UserIdentity> The initial members. timestamp DateTime The timestamp to use for additions. Properties Count The number of entries in the recency list. public int Count { get; } Property Value int Members The members of the recency list. public IEnumerable<UserIdentityRecencyList.Entry> Members { get; } Property Value IEnumerable<UserIdentityRecencyList.Entry> Methods Add(UserIdentity, DateTime) Adds a user identity to the recency list. public bool Add(UserIdentity identity, DateTime timestamp) Parameters identity UserIdentity The user identity. timestamp DateTime The timestamp to use for additions. Returns bool True if successfully added, false otherwise. AddOrUpdate(UserIdentity, DateTime) Adds or updates a user identity to the recency list. public bool AddOrUpdate(UserIdentity identity, DateTime timestamp) Parameters identity UserIdentity The user identity. timestamp DateTime The timestamp to use for additions. Returns bool True if updated, false if added. Contains(UserIdentity) Returns true if the identity is a member of the recency list, false otherwise. public bool Contains(UserIdentity identity) Parameters identity UserIdentity Returns bool GetEnumerator() public IEnumerator<UserIdentityRecencyList.Entry> GetEnumerator() Returns IEnumerator<UserIdentityRecencyList.Entry> Remove(UserIdentity) Remove a user identity from the recency list. public bool Remove(UserIdentity identity) Parameters identity UserIdentity The user identity. Returns bool True if removed, false otherwise. RemoveOldest() Removes the oldest entry in the recency list. public void RemoveOldest() Remarks This method is a no-op if the recency list is empty. TryFind(UserIdentity, out Entry) Returns true if the identity is a member of the recency list, false otherwise. public bool TryFind(UserIdentity identity, out UserIdentityRecencyList.Entry entry) Parameters identity UserIdentity entry UserIdentityRecencyList.Entry Returns bool"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.UserIdentitySerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.UserIdentitySerializer.html",
    "title": "Class UserIdentitySerializer",
    "summary": "Class UserIdentitySerializer Namespace MarymoorStudios.Core.Rpc.Identity Assembly MarymoorStudios.Core.Rpc.Identity.dll public sealed class UserIdentitySerializer : Serializer<UserIdentity?>, IDerivedSerializer<UserIdentity?>, IDerivedSerializer Inheritance object Serializer Serializer<UserIdentity> UserIdentitySerializer Implements IDerivedSerializer<UserIdentity> IDerivedSerializer Inherited Members Serializer<UserIdentity>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserIdentitySerializer() public UserIdentitySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in UserIdentity?) public override int SizeOf(SerializationContext context, in UserIdentity? value) Parameters context SerializationContext value UserIdentity Returns int SizeOfSegment(SerializationContext, in UserIdentity) public static int SizeOfSegment(SerializationContext context, in UserIdentity value) Parameters context SerializationContext value UserIdentity Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out UserIdentity?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out UserIdentity? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value UserIdentity Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out string, out string, out ReadOnlyMemory<byte>, out DateTime) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out string memberName, out string memberEmail, out ReadOnlyMemory<byte> memberPublicKey, out DateTime memberCreated) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberName string memberEmail string memberPublicKey ReadOnlyMemory<byte> memberCreated DateTime Returns bool Write(SerializationContext, ref RowBuffer, in UserIdentity?) public override void Write(SerializationContext context, ref RowBuffer buffer, in UserIdentity? value) Parameters context SerializationContext buffer RowBuffer value UserIdentity WriteSegment(SerializationContext, ref RowBuffer, in UserIdentity) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in UserIdentity value) Parameters context SerializationContext buffer RowBuffer value UserIdentity"
  },
  "api/MarymoorStudios.Core.Rpc.Identity.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Identity.html",
    "title": "Namespace MarymoorStudios.Core.Rpc.Identity",
    "summary": "Namespace MarymoorStudios.Core.Rpc.Identity Classes AdmissionManager AdmissionManager.AdmissionPolicySerializer CertificateManager Manages the certificates that provide identity to others. Endorsement EndorsementCollection An unordered set of Endorsement. EndorsementCollectionSerializer EndorsementSerializer StoreCertificateManager An implementation of CertificateManager that stores its certificates in an X509Store. UserIdentity The identity of an RPC peer. UserIdentityCollection An unordered set of UserIdentity. UserIdentityCollectionSerializer UserIdentityRecencyList A set of UserIdentity that keeps track of accesses. UserIdentitySerializer Structs UserIdentityRecencyList.Entry Interfaces IAdmissionManager<TAdmissionManager, TArg> Interface that provides generic constraints. Enums AdmissionManager.AdmissionPolicy The admission policy."
  },
  "api/MarymoorStudios.Core.Rpc.MetadataProxy.html": {
    "href": "api/MarymoorStudios.Core.Rpc.MetadataProxy.html",
    "title": "Class MetadataProxy",
    "summary": "Class MetadataProxy Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class MetadataProxy : Proxy<MetadataServer>, IProxy<MetadataProxy, MetadataServer> Inheritance object Proxy<MetadataServer> MetadataProxy Implements IProxy<MetadataProxy, MetadataServer> Inherited Members Proxy<MetadataServer>.Sync() Proxy<MetadataServer>.GetRemoteIdentity() Proxy<MetadataServer>.AppendOne(ResolverTurn<MetadataServer>) Proxy<MetadataServer>.IsFailed Proxy<MetadataServer>.IsResolved Proxy<MetadataServer>.Failure object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MetadataProxy(Promise<MetadataServer>) Creates a forwarded promise whose outcome will be the same as p. public MetadataProxy(Promise<MetadataServer> p) Parameters p Promise<MetadataServer> MetadataProxy(Resolver<MetadataServer>) Creates an unresolved promise whose future outcome is defined by r. public MetadataProxy(Resolver<MetadataServer> r) Parameters r Resolver<MetadataServer> MetadataProxy(MetadataServer) Creates a successfully resolved promise. public MetadataProxy(MetadataServer value) Parameters value MetadataServer MetadataProxy(Proxy<MetadataServer>) Creates a forwarded promise whose outcome will be the same as p. public MetadataProxy(Proxy<MetadataServer> p) Parameters p Proxy<MetadataServer> MetadataProxy(Exception) Creates a failed promise whose outcome is ex. public MetadataProxy(Exception ex) Parameters ex Exception Methods GetCapabilities() public Promise<IMetadata.Descriptor[]> GetCapabilities() Returns Promise<IMetadata.Descriptor[]> Operators implicit operator MetadataProxy(Promise<MetadataProxy>) Implicit conversion to its syntax. public static implicit operator MetadataProxy(Promise<MetadataProxy> p) Parameters p Promise<MetadataProxy> Returns MetadataProxy Explicit Interface Implementations Create(Promise<MetadataServer>) Creates a forwarded promise whose outcome will be the same as p. static MetadataProxy Create(Promise<MetadataServer> p) Parameters p Promise<MetadataServer> Returns MetadataProxy Create(Resolver<MetadataServer>) Creates an unresolved promise whose future outcome is defined by r. static MetadataProxy Create(Resolver<MetadataServer> r) Parameters r Resolver<MetadataServer> Returns MetadataProxy Create(MetadataServer) Creates a successfully resolved promise. static MetadataProxy Create(MetadataServer value) Parameters value MetadataServer Returns MetadataProxy Create(Proxy<MetadataServer>) Creates a forwarded promise whose outcome will be the same as p. static MetadataProxy Create(Proxy<MetadataServer> p) Parameters p Proxy<MetadataServer> Returns MetadataProxy Create(Exception) Creates a failed promise whose outcome is ex. static MetadataProxy Create(Exception ex) Parameters ex Exception Returns MetadataProxy"
  },
  "api/MarymoorStudios.Core.Rpc.MetadataPublisher.html": {
    "href": "api/MarymoorStudios.Core.Rpc.MetadataPublisher.html",
    "title": "Class MetadataPublisher",
    "summary": "Class MetadataPublisher Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll An implementation of IMetadata from a static, potentially non-unique, set of capabilities. public sealed class MetadataPublisher : MetadataServer, IByRefRemotable Inheritance object AServer<MetadataServer> MetadataServer MetadataPublisher Implements IByRefRemotable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MetadataPublisher(Descriptor[]) Constructs a new bag. public MetadataPublisher(IMetadata.Descriptor[] capabilities) Parameters capabilities Descriptor[] The set of capabilities to include. Remarks The capabilities presented in capabilities need not be unique in name or type. Fields Self public readonly MetadataProxy Self Field Value MetadataProxy Methods GetCapabilities() public override Promise<IMetadata.Descriptor[]> GetCapabilities() Returns Promise<IMetadata.Descriptor[]>"
  },
  "api/MarymoorStudios.Core.Rpc.MetadataServer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.MetadataServer.html",
    "title": "Class MetadataServer",
    "summary": "Class MetadataServer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public abstract class MetadataServer : AServer<MetadataServer>, IByRefRemotable Inheritance object AServer<MetadataServer> MetadataServer Implements IByRefRemotable Derived MetadataPublisher Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MetadataServer() protected MetadataServer() Methods GetCapabilities() public abstract Promise<IMetadata.Descriptor[]> GetCapabilities() Returns Promise<IMetadata.Descriptor[]>"
  },
  "api/MarymoorStudios.Core.Rpc.MethodId.html": {
    "href": "api/MarymoorStudios.Core.Rpc.MethodId.html",
    "title": "Struct MethodId",
    "summary": "Struct MethodId Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll An identifier for a unique method within a remotable type hierarchy. public readonly struct MethodId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks MethodIds are unique only within the scope of the type hierarchy that allocated them. A root remotable type and its subtypes share a MethodId space, but different type hierarchies may reuse MethodIds. Constructors MethodId(uint, uint) Constructor. public MethodId(uint depth, uint index) Parameters depth uint The depth of the declaring type. See Depth. index uint The method index. See Index. Properties Depth The depth of the type declaring this method within its remotable type hierarchy. public uint Depth { get; } Property Value uint Remarks The base-most type in a remotable hierarchy has depth 0, its immediate subtypes have depth 1, their subtypes have depth 2, and so on down the type hierarchy. Index The index assigned to this method by the declaring type. public uint Index { get; } Property Value uint Methods ToString() public override string ToString() Returns string"
  },
  "api/MarymoorStudios.Core.Rpc.Net.TcpFactory-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Net.TcpFactory-1.html",
    "title": "Class TcpFactory<TRoot>",
    "summary": "Class TcpFactory<TRoot> Namespace MarymoorStudios.Core.Rpc.Net Assembly MarymoorStudios.Core.Rpc.Net.dll Establishes a scope for incoming and outgoing TCP-based channels. public sealed class TcpFactory<TRoot> : IPromiseDisposable where TRoot : AServer<TRoot> Type Parameters TRoot The type of the root object exposed on all connection (incoming and outgoing) within the scope of this factory. Inheritance object TcpFactory<TRoot> Implements IPromiseDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Enables the creation of incoming listening sockets for receiving network connections from remote parties (potentially using different network protocols and/or endpoints). Enables the establishment of outgoing socket to connect to remote parties. A TcpFactory<TRoot> instance represents a set of such incoming and outgoing connections that can be torn down collectively (by disposing the factory instance). Constructors TcpFactory(TcpFactoryConfig, MemoryPool<byte>, ILoggerFactory, Proxy<TRoot>) Creates a new TCP scope for incoming and outgoing connections. public TcpFactory(TcpFactoryConfig config, MemoryPool<byte> pool, ILoggerFactory loggerFactory, Proxy<TRoot> root) Parameters config TcpFactoryConfig The configuration policy for this TCP scope. pool MemoryPool<byte> The memory pool from which to allocate memory for network operations. loggerFactory ILoggerFactory The logger factory to log to. root Proxy<TRoot> The root object to be exposed to all connections (incoming and outgoing). Methods Connect<TProxy, TServer>(IPEndPoint, CancellationToken) Create a new outgoing connection within this TCP scope. public TProxy Connect<TProxy, TServer>(IPEndPoint endpoint, CancellationToken cancel = default) where TProxy : Proxy<TServer>, IProxy<TProxy, TServer> where TServer : AServer<TServer> Parameters endpoint IPEndPoint The remote endpoint to connect to. cancel CancellationToken A (optional) cancellation that can be used to terminate this connection independently of the rest of the TCP scope. Returns TProxy The remote root Type Parameters TProxy The type of the expected remote root. TServer The server type of TProxy. DisposeAsync() public Promise DisposeAsync() Returns Promise Listen(IPEndPoint, bool) Create a new incoming listening endpoint for this TCP scope. public Promise<TcpListener> Listen(IPEndPoint endpoint, bool allowReuse = false) Parameters endpoint IPEndPoint The endpoint on which to listen. allowReuse bool If true, then allow the port to be rebound without TIME_WAIT. Returns Promise<TcpListener> Resolves to a TcpListener for controlling the lifetime of the listening endpoint."
  },
  "api/MarymoorStudios.Core.Rpc.Net.TcpFactoryConfig.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Net.TcpFactoryConfig.html",
    "title": "Class TcpFactoryConfig",
    "summary": "Class TcpFactoryConfig Namespace MarymoorStudios.Core.Rpc.Net Assembly MarymoorStudios.Core.Rpc.Net.dll Configures policy for TcpFactory<TRoot>. public sealed class TcpFactoryConfig Inheritance object TcpFactoryConfig Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TcpFactoryConfig() Constructor. public TcpFactoryConfig() Fields DefaultTcpPort The default port for use with TcpListener. public const int DefaultTcpPort = 2590 Field Value int Properties Backlog Maximum number of sockets allowed in the accept queue. public int Backlog { get; init; } Property Value int CertificateManager (Optional) TLS Certificate Manager. If non-null then TLS will be used, otherwise non-TLS. public CertificateManager? CertificateManager { get; init; } Property Value CertificateManager MaxRecvPacket Maximum size of recv packets. public int MaxRecvPacket { get; init; } Property Value int Remarks Messages larger than this are split across multiple receives. This is largely for testing purposes. MaxSendPacket Maximum size of send packets. public int MaxSendPacket { get; init; } Property Value int Remarks Messages larger than this are split into multiple sends. This is largely for testing purposes but may be useful in environments where the network prohibits large payloads. Splitting messages across sends lends to the need to perform reassembly on the receiving side increasing costs in memory, CPU, and kernel transitions. RingCapacity Maximum number of items in the send/receive buffer between the channel and the network. public ushort RingCapacity { get; init; } Property Value ushort Remarks The buffers are used to pipeline transitions between IO completion threads and the Sip-thread for the MarymoorStudios.Core.Rpc.CommChannel they are servicing. If this value is too small: Sending The MarymoorStudios.Core.Rpc.CommChannel will stall more often and be forced to buffer outgoing messages in its own queue leading potentially to increased GC memory usage and additional send latency. Receiving IO completion threads will stall more often and be forced to provide network backpressure impacting network transmission speeds. If this value is too large then buffer memory will be wasted for each MarymoorStudios.Core.Rpc.CommChannel. Buffer capacity is a fixed allocation with the same lifetime as the MarymoorStudios.Core.Rpc.CommChannel. Ideally this value matches the maximum number of messages in flight in either direction under normal operating conditions. When these conditions are exceeded then stalling is the best responses for the system and the network providing backpressure to slow production in either direction to avoid resource exhaustion. RingThreshold Maximum The number of item slots that must be available before send backpressure is lifted. public ushort RingThreshold { get; init; } Property Value ushort Methods TryParseEndpoint(string, out IPEndPoint) Convenience function for parsing endpoint strings at the command line. public static bool TryParseEndpoint(string endpointString, out IPEndPoint endpoint) Parameters endpointString string The string to be parsed. endpoint IPEndPoint If successful, the endpoint. Returns bool True if successful, false otherwise."
  },
  "api/MarymoorStudios.Core.Rpc.Net.TcpListener.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Net.TcpListener.html",
    "title": "Class TcpListener",
    "summary": "Class TcpListener Namespace MarymoorStudios.Core.Rpc.Net Assembly MarymoorStudios.Core.Rpc.Net.dll Manages the lifetime of a listening endpoint. public sealed class TcpListener : IPromiseDisposable Inheritance object TcpListener Implements IPromiseDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Call DisposeAsync() to terminate the listening endpoint and remove it from the TCP scope that created it. Removing a listening endpoint does NOT destroy incoming connections that have already been established from that endpoint nor does it terminate the TCP scope that created it. To do either of those things call DisposeAsync() on the TCP scope directly. Properties LocalEndPoint The local endpoint tuple while connected, otherwise null. public IPEndPoint? LocalEndPoint { get; } Property Value IPEndPoint Methods DisposeAsync() public Promise DisposeAsync() Returns Promise"
  },
  "api/MarymoorStudios.Core.Rpc.Net.TcpTransport.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Net.TcpTransport.html",
    "title": "Class TcpTransport",
    "summary": "Class TcpTransport Namespace MarymoorStudios.Core.Rpc.Net Assembly MarymoorStudios.Core.Rpc.Net.dll Transport that acts as an adapter between a MarymoorStudios.Core.Rpc.CommChannel and a Socket. public sealed class TcpTransport : Transport<OwnedMem<byte>>, IDisposable Inheritance object Transport<OwnedMem<byte>> TcpTransport Implements IDisposable Inherited Members Transport<OwnedMem<byte>>.Dispose() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ConsumerEvent Event to efficiently signal the consumer when items are available to read. public override WaitHandle ConsumerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between an empty queue and having at least one item, so the caller should read the queue to completion before waiting on this event. ProducerEvent Event to efficiently signal the producer when slots are available to write. public override WaitHandle ProducerEvent { get; } Property Value WaitHandle Remarks This event only signals on the transition between a full queue and having at least threshold items, so the caller should write to the queue until full before waiting on this event. Methods Close(TransportFlags) Marks the buffer as closed atomically. public override bool Close(TransportFlags flags = TransportFlags.Closed) Parameters flags TransportFlags Indicates which side(s) to close. Returns bool True if the both sides have closed, false if only one side has closed as of this call. Remarks No more items can be inserted after this call returns. Either side (producer or consumer) can close the buffer. Typically, the consumer will continue to read items until TryDequeue(out T) indicates the closure has been seen. This ensures that all buffered items have been removed, regardless of which side closed first. Both sides should close the buffer before the last side to close can then safely dispose. Dispose(bool) Standard dispose pattern for subclasses. protected override void Dispose(bool disposing) Parameters disposing bool True if both native and managed resources are being disposed. False if only native resources (i.e. in finalizer). TryDequeue(out OwnedMem<byte>) Attempt to remove an item from the front of the buffer. public override bool TryDequeue(out OwnedMem<byte> item) Parameters item OwnedMem<byte> If successful, the item removed from the buffer, default otherwise. Returns bool True if an item was successfully remove, false if the buffer is empty. Remarks If item is successfully removed the caller takes ownership of it and is responsible for releasing its resources. If the attempt to dequeue fails then item is default. Exceptions AbortedException If the buffer has been closed AND all buffered items have been read. TryEnqueue(ref OwnedMem<byte>) Attempt to insert an item at the end of the buffer. public override bool TryEnqueue(ref OwnedMem<byte> item) Parameters item OwnedMem<byte> The item to be inserted. Returns bool True if the item was inserted, false if the buffer is full. Remarks On a successful insert the buffer takes ownership of item and its value is set to default. If item cannot be inserted (either because 'full' or 'closed') then false is returned and item is unmodified (still owned by the caller); the caller is then responsible for releasing any resources. Exceptions AbortedException If the buffer has already been closed."
  },
  "api/MarymoorStudios.Core.Rpc.Net.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Net.html",
    "title": "Namespace MarymoorStudios.Core.Rpc.Net",
    "summary": "Namespace MarymoorStudios.Core.Rpc.Net Classes TcpFactoryConfig Configures policy for TcpFactory<TRoot>. TcpFactory<TRoot> Establishes a scope for incoming and outgoing TCP-based channels. TcpListener Manages the lifetime of a listening endpoint. TcpTransport Transport that acts as an adapter between a MarymoorStudios.Core.Rpc.CommChannel and a Socket."
  },
  "api/MarymoorStudios.Core.Rpc.NothingProxy.html": {
    "href": "api/MarymoorStudios.Core.Rpc.NothingProxy.html",
    "title": "Class NothingProxy",
    "summary": "Class NothingProxy Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class NothingProxy : Proxy<NothingServer>, IProxy<NothingProxy, NothingServer> Inheritance object Proxy<NothingServer> NothingProxy Implements IProxy<NothingProxy, NothingServer> Inherited Members Proxy<NothingServer>.Sync() Proxy<NothingServer>.GetRemoteIdentity() Proxy<NothingServer>.AppendOne(ResolverTurn<NothingServer>) Proxy<NothingServer>.IsFailed Proxy<NothingServer>.IsResolved Proxy<NothingServer>.Failure object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NothingProxy(Promise<NothingServer>) Creates a forwarded promise whose outcome will be the same as p. public NothingProxy(Promise<NothingServer> p) Parameters p Promise<NothingServer> NothingProxy(Resolver<NothingServer>) Creates an unresolved promise whose future outcome is defined by r. public NothingProxy(Resolver<NothingServer> r) Parameters r Resolver<NothingServer> NothingProxy(NothingServer) Creates a successfully resolved promise. public NothingProxy(NothingServer value) Parameters value NothingServer NothingProxy(Proxy<NothingServer>) Creates a forwarded promise whose outcome will be the same as p. public NothingProxy(Proxy<NothingServer> p) Parameters p Proxy<NothingServer> NothingProxy(Exception) Creates a failed promise whose outcome is ex. public NothingProxy(Exception ex) Parameters ex Exception Operators implicit operator NothingProxy(Promise<NothingProxy>) Implicit conversion to its syntax. public static implicit operator NothingProxy(Promise<NothingProxy> p) Parameters p Promise<NothingProxy> Returns NothingProxy Explicit Interface Implementations Create(Promise<NothingServer>) Creates a forwarded promise whose outcome will be the same as p. static NothingProxy Create(Promise<NothingServer> p) Parameters p Promise<NothingServer> Returns NothingProxy Create(Resolver<NothingServer>) Creates an unresolved promise whose future outcome is defined by r. static NothingProxy Create(Resolver<NothingServer> r) Parameters r Resolver<NothingServer> Returns NothingProxy Create(NothingServer) Creates a successfully resolved promise. static NothingProxy Create(NothingServer value) Parameters value NothingServer Returns NothingProxy Create(Proxy<NothingServer>) Creates a forwarded promise whose outcome will be the same as p. static NothingProxy Create(Proxy<NothingServer> p) Parameters p Proxy<NothingServer> Returns NothingProxy Create(Exception) Creates a failed promise whose outcome is ex. static NothingProxy Create(Exception ex) Parameters ex Exception Returns NothingProxy"
  },
  "api/MarymoorStudios.Core.Rpc.NothingServer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.NothingServer.html",
    "title": "Class NothingServer",
    "summary": "Class NothingServer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public abstract class NothingServer : AServer<NothingServer>, IByRefRemotable Inheritance object AServer<NothingServer> NothingServer Implements IByRefRemotable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NothingServer() protected NothingServer()"
  },
  "api/MarymoorStudios.Core.Rpc.Pipe-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Pipe-1.html",
    "title": "Struct Pipe<T>",
    "summary": "Struct Pipe<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll A unidirectional flow of items. public readonly struct Pipe<T> Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Pipe(PipeReader<T>, PipeWriter<T>) Construct a new pipe. public Pipe(PipeReader<T> reader, PipeWriter<T> writer) Parameters reader PipeReader<T> The reader capability. writer PipeWriter<T> The writer capability. Remarks Writing to the writer MUST yield output on the reader. Properties Reader A capability to read from the pipe. public PipeReader<T> Reader { get; } Property Value PipeReader<T> Writer A capability to write from the pipe. public PipeWriter<T> Writer { get; } Property Value PipeWriter<T>"
  },
  "api/MarymoorStudios.Core.Rpc.PipeExtensions.PipeReaderEnumerator-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PipeExtensions.PipeReaderEnumerator-1.html",
    "title": "Struct PipeExtensions.PipeReaderEnumerator<T>",
    "summary": "Struct PipeExtensions.PipeReaderEnumerator<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll An enumerator for a PipeReader<T>. public readonly struct PipeExtensions.PipeReaderEnumerator<T> : IIPromiseEnumerator<T>, IPromiseDisposable Type Parameters T Implements IIPromiseEnumerator<T> IPromiseDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Current Gets the element in the collection at the current position of the enumerator. public T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods DisposeAsync() public Promise DisposeAsync() Returns Promise MoveNextAsync() Advances the enumerator to the next element. public Promise<bool> MoveNextAsync() Returns Promise<bool> Resolves to true if the enumerator was successfully advanced, false if the end was reached."
  },
  "api/MarymoorStudios.Core.Rpc.PipeExtensions.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PipeExtensions.html",
    "title": "Class PipeExtensions",
    "summary": "Class PipeExtensions Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Provides convenience extensions for Pipe<T> and its related classes. public static class PipeExtensions Inheritance object PipeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AsPipeReader<T>(ICollection<T>, Exception?) Returns a PipeReader<T> over a finite collection. public static PipeReader<T> AsPipeReader<T>(this ICollection<T> collection, Exception? error = null) Parameters collection ICollection<T> The collection. error Exception An optional error to terminate the sequence with. Returns PipeReader<T> Type Parameters T GetAsyncEnumerator<T>(PipeReader<T>) Returns an enumerator that iterates asynchronously through the PipeReader<T>. public static PipeExtensions.PipeReaderEnumerator<T> GetAsyncEnumerator<T>(this PipeReader<T> reader) Parameters reader PipeReader<T> Returns PipeExtensions.PipeReaderEnumerator<T> Type Parameters T"
  },
  "api/MarymoorStudios.Core.Rpc.PipeQueue-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PipeQueue-1.html",
    "title": "Class PipeQueue<T>",
    "summary": "Class PipeQueue<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class PipeQueue<T> Type Parameters T Inheritance object PipeQueue<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Create(int, int) Constructs a new Pipe<T> public static Pipe<T> Create(int capacity = 2147483647, int threshold = 1) Parameters capacity int The maximum number of items before backpressure is applied. threshold int The number of items of empty space available before backpressure is released. Returns Pipe<T> Remarks REQUIRES: capacity > 2 REQUIRES: 1 <= threshold < capacity -1 Capacity is equal to the size of the memory allocation (in number of items). Threshold is used to decrease ping-ponging by delaying waking the producer until there are more items in the window. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available."
  },
  "api/MarymoorStudios.Core.Rpc.PipeReader-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PipeReader-1.html",
    "title": "Class PipeReader<T>",
    "summary": "Class PipeReader<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Capability for reading an ordered sequence of items from a pipe. public abstract class PipeReader<T> : IPromiseDisposable, IDisposable Type Parameters T Inheritance object PipeReader<T> Implements IPromiseDisposable IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods PipeExtensions.GetAsyncEnumerator<T>(PipeReader<T>) Constructors PipeReader() protected PipeReader() Methods Cancel(Exception?) Attempts to perform a graceful early termination by the Reader with a diagnostic error for the Writer. public abstract void Cancel(Exception? error = null) Parameters error Exception An optional diagnostic error. If no error is provided then OperationCanceledException will be sent. Remarks The Read() method will eventually return EOS (or error) after Cancel(Exception?) has been called, either because cancellation is successfully propagated to the Writer or because the underlying channel is aborted before cancellation can be propagated. Cancellation is pr Dispose() Releases all received but unread items. public void Dispose() Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool DisposeAsync() Releases all received but unread items. public Promise DisposeAsync() Returns Promise A promise that resolves when all in-flight items have been exhausted from the transport. Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. DisposeAsyncCore() protected virtual Promise DisposeAsyncCore() Returns Promise Read() Reads the next available item from the pipe. public abstract Promise<T> Read() Returns Promise<T> The next item or an error. Remarks Returns the next item in the sequence. If there are no items available immediately, then the return resolves when the next item arrives. On a successful return ownership for the item returned is transferred to the caller who is responsible for disposing it. If the end of the sequence (EOS) is reached (i.e. a finite sequence) then reading after the EOS will yield an EndOfSequenceException error. If the sequence is closed by the Writer with an error, that error will be returned in sequence order after all items successfully written before the error have been delivered. If the sequence is aborted by the Writer or the underlying pipe transport a read will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.PipeWriter-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PipeWriter-1.html",
    "title": "Class PipeWriter<T>",
    "summary": "Class PipeWriter<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Capability for writing an ordered sequence of items to a pipe. public abstract class PipeWriter<T> : IPromiseDisposable, IDisposable Type Parameters T Inheritance object PipeWriter<T> Implements IPromiseDisposable IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PipeWriter() protected PipeWriter() Methods Abort() Promptly aborts the sequence. public abstract void Abort() Remarks Write initiated abort is best-effort transmitted across the transport to the Reader. If the transport has itself been aborted then the abort signal is discarded (but the Reader will see an abort from the transport). Any items in the pipe that cannot be transmitted before the transport has been torn down are immediately released. Close(Exception?) Terminates the sequence. public abstract Promise Close(Exception? error = null) Parameters error Exception An optional error to terminate the sequence with. Returns Promise A promise that resolves when the Reader has seen the entire sequence. Remarks If the sequence is terminated without an error (a successful termination) the Reader will see an End of Sequence (EOS). If an error is provided, the Reader will eventually see that error as the result of a call to Read(). Dispose() Promptly terminates the sequence. public void Dispose() Remarks If the sequence is already terminated or a graceful Close(Exception?) can be promptly transmitted on the transport, it is done. Otherwise, an Abort() occurs. If any untransmitted items cannot be promptly transmitted they are released without being transmitted and the termination becomes an Abort(). Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool DisposeAsync() Asynchronously terminates the sequence. public Promise DisposeAsync() Returns Promise Remarks If the sequence is not already terminated, a graceful Close(Exception?) is performed. The result then resolves after a graceful termination acknowledgement is received from the Reader (indicating that all items have been received including the graceful termination signal). If the transport is torn down before all pending items can be transmitted, or before a graceful termination acknowledgement has been received from the Reader, then any untransmitted items are released without being transmitted and the termination becomes an Abort(). DisposeAsyncCore() protected virtual Promise DisposeAsyncCore() Returns Promise Flush() Returns a promise that resolves when flow control would allow additional writes without buffering. public abstract Promise Flush() Returns Promise Remarks If there is no flow control pressure the return value will be promptly resolved. Write(ref T) Writes a item to the pipe. public abstract void Write(ref T item) Parameters item T The item to be written. Remarks On a successful return, ownership of the provided item is transferred to the pipe. Buffers successfully written to the pipe but never delivered to a reader (e.g. because the Reader is disposed or the transport is terminated) will be disposed by the Pipe itself. The input l-value is \"consumed\". The error EndOfSequenceException occurs when the Writer comes know that the Reader has been disposed before the EOS has been written. This error will be thrown repeatedly on all subsequent writes after this point. The Writer should gracefully terminate production. If the sequence is cancelled by the Reader (optionally with an error), OperationCanceledException) (or that error) will be returned by the next call to Write(ref T) or Flush() after the Writer comes to know of the cancellation. Cancellation is propagated asynchronously backward through the transport and may be subject to propagation delay. Cancellation delivery cannot be guaranteed as it may be lost if the underlying channel is aborted before it can be delivered. If the sequence is aborted by the Reader or the underlying pipe transport, a call to Write(ref T) or Flush() will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.PromiseSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PromiseSerializer-1.html",
    "title": "Class PromiseSerializer<T>",
    "summary": "Class PromiseSerializer<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class PromiseSerializer<T> : Serializer<Promise<T>> Type Parameters T Inheritance object Serializer Serializer<Promise<T>> PromiseSerializer<T> Inherited Members Serializer<Promise<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PromiseSerializer() public PromiseSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Promise<T>) public override int SizeOf(SerializationContext context, in Promise<T> value) Parameters context SerializationContext value Promise<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Promise<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Promise<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Promise<T> Returns bool Write(SerializationContext, ref RowBuffer, in Promise<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in Promise<T> value) Parameters context SerializationContext buffer RowBuffer value Promise<T>"
  },
  "api/MarymoorStudios.Core.Rpc.PromiseSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.PromiseSerializer.html",
    "title": "Class PromiseSerializer",
    "summary": "Class PromiseSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class PromiseSerializer : Serializer<Promise> Inheritance object Serializer Serializer<Promise> PromiseSerializer Inherited Members Serializer<Promise>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PromiseSerializer() public PromiseSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Promise) public override int SizeOf(SerializationContext context, in Promise value) Parameters context SerializationContext value Promise Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Promise) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Promise value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Promise Returns bool Write(SerializationContext, ref RowBuffer, in Promise) public override void Write(SerializationContext context, ref RowBuffer buffer, in Promise value) Parameters context SerializationContext buffer RowBuffer value Promise"
  },
  "api/MarymoorStudios.Core.Rpc.ProtocolViolationException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ProtocolViolationException.html",
    "title": "Class ProtocolViolationException",
    "summary": "Class ProtocolViolationException Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll [DataContract] public class ProtocolViolationException : CommException, ISerializable Inheritance object Exception CommException ProtocolViolationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ProtocolViolationException() public ProtocolViolationException() ProtocolViolationException(string?) public ProtocolViolationException(string? message) Parameters message string ProtocolViolationException(string?, Exception?) public ProtocolViolationException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Rpc.ProtocolViolationExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ProtocolViolationExceptionSerializer.html",
    "title": "Class ProtocolViolationExceptionSerializer",
    "summary": "Class ProtocolViolationExceptionSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class ProtocolViolationExceptionSerializer : Serializer<ProtocolViolationException?>, IDerivedSerializer<ProtocolViolationException?>, IDerivedSerializer Inheritance object Serializer Serializer<ProtocolViolationException> ProtocolViolationExceptionSerializer Implements IDerivedSerializer<ProtocolViolationException> IDerivedSerializer Inherited Members Serializer<ProtocolViolationException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ProtocolViolationExceptionSerializer() public ProtocolViolationExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ProtocolViolationException?) public override int SizeOf(SerializationContext context, in ProtocolViolationException? value) Parameters context SerializationContext value ProtocolViolationException Returns int SizeOfSegment(SerializationContext, in ProtocolViolationException) public static int SizeOfSegment(SerializationContext context, in ProtocolViolationException value) Parameters context SerializationContext value ProtocolViolationException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ProtocolViolationException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ProtocolViolationException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ProtocolViolationException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in ProtocolViolationException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in ProtocolViolationException? value) Parameters context SerializationContext buffer RowBuffer value ProtocolViolationException WriteSegment(SerializationContext, ref RowBuffer, in ProtocolViolationException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in ProtocolViolationException value) Parameters context SerializationContext buffer RowBuffer value ProtocolViolationException"
  },
  "api/MarymoorStudios.Core.Rpc.Proxy-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Proxy-1.html",
    "title": "Class Proxy<TServer>",
    "summary": "Class Proxy<TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Abstract base class for all generated proxy types. public abstract class Proxy<TServer> where TServer : AServer<TServer> Type Parameters TServer The abstract server base class generated from the eventual interface. Inheritance object Proxy<TServer> Derived FileProxy RemoteAdmissionManager.AdmissionProxy MetadataProxy NothingProxy Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Proxy(Promise<TServer>) Creates a forwarded promise whose outcome will be the same as p. protected Proxy(Promise<TServer> p) Parameters p Promise<TServer> Proxy(Resolver<TServer>) Creates an unresolved promise whose future outcome is defined by r. protected Proxy(Resolver<TServer> r) Parameters r Resolver<TServer> Proxy(Proxy<TServer>) Creates a forwarded promise whose outcome will be the same as p. protected Proxy(Proxy<TServer> p) Parameters p Proxy<TServer> Proxy(Exception) Creates a failed promise whose outcome is ex. protected Proxy(Exception ex) Parameters ex Exception Proxy(TServer) Creates a successfully resolved promise. protected Proxy(TServer value) Parameters value TServer Properties Failure The error the promise failed with. public Exception Failure { get; } Property Value Exception Remarks REQUIRES: the promise has failed. IsFailed True if the promise has failed. public bool IsFailed { get; } Property Value bool IsResolved True if the promise is in a resolved state (either success or failure). public bool IsResolved { get; } Property Value bool Methods AppendOne(ResolverTurn<TServer>) Registers a message to be scheduled on server this proxy is resolved to. public void AppendOne(ResolverTurn<TServer> msg) Parameters msg ResolverTurn<TServer> The message to be scheduled. Remarks If this resolver is already resolved then msg will be scheduled immediately. GetRemoteIdentity() Returns the identity of the remote peer of this proxy. public Promise<UserIdentity?> GetRemoteIdentity() Returns Promise<UserIdentity> Remarks Returns the resolved identity of the first channel the proxy traverses, or if either the proxy is not remote or the channel has no identity (i.e. is anonymous). Sync() Sends a synchronization request to target of this proxy. public Promise Sync() Returns Promise Resolves successfully if and only if this proxy itself has resolved successfully end-to-end (possibly remotely), otherwise resolves to the same failure that the proxy resolved to. Remarks Sync() is often used to prove successful initialization before pipelining methods on a proxy. Sync() determines if a (possibly remote) computation that produced the proxy succeeded or failed. The proxy may later become aborted (particularly if it is remote) , but at the moment in time when the Sync() completed the proxy was successfully connected."
  },
  "api/MarymoorStudios.Core.Rpc.Proxy.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Proxy.html",
    "title": "Class Proxy",
    "summary": "Class Proxy Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Static helpers for mapping between TProxy and TServer. public static class Proxy Inheritance object Proxy Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Unwrap<TProxy, TServer>(Promise<TProxy>) Unwraps a promise of a proxy to just a proxy (that can be used to pipeline immediately). public static TProxy Unwrap<TProxy, TServer>(this Promise<TProxy> p) where TProxy : Proxy<TServer>, IProxy<TProxy, TServer> where TServer : AServer<TServer> Parameters p Promise<TProxy> Returns TProxy Type Parameters TProxy TServer When<TProxy, TServer>(Promise, Func<TProxy>) Executes a continuation when the target resolves (with failure-coalescing). public static TProxy When<TProxy, TServer>(this Promise target, Func<TProxy> body) where TProxy : Proxy<TServer>, IProxy<TProxy, TServer> where TServer : AServer<TServer> Parameters target Promise The trigger for execution. body Func<TProxy> The continuation to execute if the trigger succeeded. Returns TProxy Resolves to the outcome (either the trigger's failure, or the continuation's outcome). Type Parameters TProxy TServer"
  },
  "api/MarymoorStudios.Core.Rpc.ProxySerializer-2.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ProxySerializer-2.html",
    "title": "Class ProxySerializer<TProxy, TServer>",
    "summary": "Class ProxySerializer<TProxy, TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public abstract class ProxySerializer<TProxy, TServer> : Serializer<TProxy?> where TProxy : Proxy<TServer>, IProxy<TProxy, TServer> where TServer : AServer<TServer> Type Parameters TProxy TServer Inheritance object Serializer Serializer<TProxy> ProxySerializer<TProxy, TServer> Inherited Members Serializer<TProxy>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) Serializer.Get<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ProxySerializer() protected ProxySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in TProxy?) public override int SizeOf(SerializationContext context, in TProxy? value) Parameters context SerializationContext value TProxy Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out TProxy?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out TProxy? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value TProxy Returns bool Write(SerializationContext, ref RowBuffer, in TProxy?) public override void Write(SerializationContext context, ref RowBuffer buffer, in TProxy? value) Parameters context SerializationContext buffer RowBuffer value TProxy"
  },
  "api/MarymoorStudios.Core.Rpc.RemotedException.html": {
    "href": "api/MarymoorStudios.Core.Rpc.RemotedException.html",
    "title": "Class RemotedException",
    "summary": "Class RemotedException Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll An exception that was transmitted across a MarymoorStudios.Core.Rpc.CommChannel. [DataContract] public class RemotedException : Exception, ISerializable Inheritance object Exception RemotedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RemotedException() public RemotedException() RemotedException(string?) public RemotedException(string? message) Parameters message string RemotedException(string?, Exception?) public RemotedException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/MarymoorStudios.Core.Rpc.RemotedExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.RemotedExceptionSerializer.html",
    "title": "Class RemotedExceptionSerializer",
    "summary": "Class RemotedExceptionSerializer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class RemotedExceptionSerializer : Serializer<RemotedException?>, IDerivedSerializer<RemotedException?>, IDerivedSerializer Inheritance object Serializer Serializer<RemotedException> RemotedExceptionSerializer Implements IDerivedSerializer<RemotedException> IDerivedSerializer Inherited Members Serializer<RemotedException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RemotedExceptionSerializer() public RemotedExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in RemotedException?) public override int SizeOf(SerializationContext context, in RemotedException? value) Parameters context SerializationContext value RemotedException Returns int SizeOfSegment(SerializationContext, in RemotedException) public static int SizeOfSegment(SerializationContext context, in RemotedException value) Parameters context SerializationContext value RemotedException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out RemotedException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out RemotedException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value RemotedException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in RemotedException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in RemotedException? value) Parameters context SerializationContext buffer RowBuffer value RemotedException WriteSegment(SerializationContext, ref RowBuffer, in RemotedException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in RemotedException value) Parameters context SerializationContext buffer RowBuffer value RemotedException"
  },
  "api/MarymoorStudios.Core.Rpc.ResolverExtensions.html": {
    "href": "api/MarymoorStudios.Core.Rpc.ResolverExtensions.html",
    "title": "Class ResolverExtensions",
    "summary": "Class ResolverExtensions Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Extensions for Resolver<T>. public static class ResolverExtensions Inheritance object ResolverExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Forward<TProxy, TServer>(Resolver<TServer>, TProxy) Permanently transition the resolver to the \"forwarded\" state with whatever p's outcome becomes as the outcome. public static void Forward<TProxy, TServer>(this Resolver<TServer> @this, TProxy p) where TProxy : Proxy<TServer> where TServer : AServer<TServer> Parameters this Resolver<TServer> The resolver p TProxy The promise whose future outcome should be this resolver's outcome. Type Parameters TProxy TServer"
  },
  "api/MarymoorStudios.Core.Rpc.Sequence-1.SequenceEnumerator.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Sequence-1.SequenceEnumerator.html",
    "title": "Struct Sequence<T>.SequenceEnumerator",
    "summary": "Struct Sequence<T>.SequenceEnumerator Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll An enumerator for a Sequence<T>. public readonly struct Sequence<T>.SequenceEnumerator : IIPromiseEnumerator<T>, IPromiseDisposable Implements IIPromiseEnumerator<T> IPromiseDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Current Gets the element in the collection at the current position of the enumerator. public T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods DisposeAsync() public Promise DisposeAsync() Returns Promise MoveNextAsync() Advances the enumerator to the next element. public Promise<bool> MoveNextAsync() Returns Promise<bool> Resolves to true if the enumerator was successfully advanced, false if the end was reached."
  },
  "api/MarymoorStudios.Core.Rpc.Sequence-1.Writer.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Sequence-1.Writer.html",
    "title": "Class Sequence<T>.Writer",
    "summary": "Class Sequence<T>.Writer Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll The writer capability for a Sequence<T>. public sealed class Sequence<T>.Writer : IPromiseDisposable, IDisposable Inheritance object Sequence<T>.Writer Implements IPromiseDisposable IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Abort() Promptly aborts the sequence. public void Abort() Remarks Write initiated abort is best-effort transmitted across the transport to the reader. If the transport has itself been aborted then the abort signal is discarded (but the reader will see an abort from the transport). Any items in flight that cannot be transmitted before the transport has been torn down are immediately released. Close(Exception?) Terminates the sequence. public Promise Close(Exception? error = null) Parameters error Exception An optional error to terminate the sequence with. Returns Promise A promise that resolves when the reader has seen the entire sequence. Remarks If the sequence is terminated without an error (a successful termination) the reader will see an End of Sequence (EOS). If an error is provided, the reader will eventually see that error as the result of a call to Read(). Dispose() Promptly terminates the sequence. public void Dispose() Remarks If the sequence is already terminated or a graceful Close(Exception?) can be promptly transmitted on the transport, it is done. Otherwise, an Abort() occurs. If any untransmitted items cannot be promptly transmitted they are released without being transmitted and the termination becomes an Abort(). DisposeAsync() Asynchronously terminates the sequence. public Promise DisposeAsync() Returns Promise Remarks If the sequence is not already terminated, a graceful Close(Exception?) is performed. The result then resolves after a graceful termination acknowledgement is received from the reader (indicating that all items have been received including the graceful termination signal). If the transport is torn down before all pending items can be transmitted, or before a graceful termination acknowledgement has been received from the reader, then any untransmitted items are released without being transmitted and the termination becomes an Abort(). ~Writer() protected ~Writer() Flush() Returns a promise that resolves when flow control would allow additional writes without buffering. public Promise Flush() Returns Promise Remarks If there is no flow control pressure the return value will be promptly resolved. Write(T) Writes an item to the sequence. public void Write(T item) Parameters item T The item to be written. Remarks On a successful return, ownership of the provided item is transferred to the sequence. Items successfully written to the sequence but never delivered to a reader (e.g. because the sequence is disposed or the transport is terminated) will be disposed by the sequence itself. The error EndOfSequenceException occurs when the Writer comes to know that the sequence has been disposed before the EOS has been written. This error will be thrown repeatedly on all subsequent writes after this point. The Writer should gracefully terminate production. If the sequence is cancelled by the reader (optionally with an error), OperationCanceledException) (or that error) will be returned by the next call to Write(T) or Flush() after the Writer comes to know of the cancellation. Cancellation is propagated asynchronously backward through the transport and may be subject to propagation delay. Cancellation delivery cannot be guaranteed as it may be lost if the underlying channel is aborted before it can be delivered. If the sequence is aborted by the reader or the underlying transport, a call to Write(T) or Flush() will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.Sequence-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.Sequence-1.html",
    "title": "Class Sequence<T>",
    "summary": "Class Sequence<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Provides iterators for Sequence<T>. public sealed class Sequence<T> : IPromiseDisposable, IDisposable, IPromiseEnumerable<T> Type Parameters T Inheritance object Sequence<T> Implements IPromiseDisposable IDisposable IPromiseEnumerable<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties BatchSize The batch size suggested by the reader. public int BatchSize { get; set; } Property Value int Capacity The desired capacity of the reader. public int Capacity { get; set; } Property Value int Methods Cancel(Exception?) Attempts to perform a graceful early termination by the sequence with a diagnostic error for the Writer. public void Cancel(Exception? error = null) Parameters error Exception An optional diagnostic error. If no error is provided then OperationCanceledException will be sent. Remarks The Read() method will eventually return EOS (or error) after Cancel(Exception?) has been called, either because cancellation is successfully propagated to the Writer or because the underlying channel is aborted before cancellation can be propagated. Cancellation is pr Create(Func<Writer, Promise>, int, int) Constructs a new Pipe<T> public static Sequence<T> Create(Func<Sequence<T>.Writer, Promise> body, int capacity = 100, int batchSize = 20) Parameters body Func<Sequence<T>.Writer, Promise> A function that will generate the contents of the sequence. capacity int The maximum number of items before backpressure is applied. batchSize int The reader suggested batch size. Returns Sequence<T> Remarks REQUIRES: capacity > 0 REQUIRES: 1 <= batchSize <= capacity The batchSize is used to decrease ping-ponging by delaying waking the producer until there are more items in the window. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available. Create(int, int) Constructs a new Pipe<T> public static (Sequence<T> reader, Sequence<T>.Writer writer) Create(int capacity = 100, int batchSize = 20) Parameters capacity int The maximum number of items before backpressure is applied. batchSize int The reader suggested batch size. Returns (Sequence<T> reader, Sequence<T>.Writer writer) Remarks REQUIRES: capacity > 0 REQUIRES: 1 <= batchSize <= capacity The batchSize is used to decrease ping-ponging by delaying waking the producer until there are more items in the window. There is a tradeoff between added latency and buffering costs on the writer side versus signalling costs. The default value is 1 causing the producer to be signalled whenever there is at least one slot available. Dispose() Releases all received but unread items. public void Dispose() Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. DisposeAsync() Releases all received but unread items. public Promise DisposeAsync() Returns Promise A promise that resolves when all in-flight items have been exhausted from the transport. Remarks Implies a call to Cancel(Exception?) if the sequence has not seen EOS or already been cancelled. Any items that are received by the transport after the Reader has been disposed will be immediately released. ForEach(Func<T, Promise>) Yields each of the items in the sequence to the body function. public Promise ForEach(Func<T, Promise> body) Parameters body Func<T, Promise> A function to process each item. Returns Promise Resolves successfully if the entire sequence was read to the end without encountering an error, otherwise breaks with the first error encountered by the sequence. GetAsyncEnumerator(CancellationToken) Returns an enumerator that iterates asynchronously through the Sequence<T>. public Sequence<T>.SequenceEnumerator GetAsyncEnumerator(CancellationToken token = default) Parameters token CancellationToken Returns Sequence<T>.SequenceEnumerator Read() Reads the next available item from the sequence. public Promise<T> Read() Returns Promise<T> The next item or an error. Remarks Returns the next item in the sequence. If there are no items available immediately, then the return resolves when the next item arrives. On a successful return ownership for the item returned is transferred to the caller who is responsible for disposing it. If the end of the sequence (EOS) is reached (i.e. a finite sequence) then reading after the EOS will yield an EndOfSequenceException error. If the sequence is closed by the Writer with an error, that error will be returned in sequence order after all items successfully written before the error have been delivered. If the sequence is aborted by the Writer or the underlying transport a read will yield an AbortedException. Some items in the sequence may have been lost in the event of an abort."
  },
  "api/MarymoorStudios.Core.Rpc.SequenceExtensions.html": {
    "href": "api/MarymoorStudios.Core.Rpc.SequenceExtensions.html",
    "title": "Class SequenceExtensions",
    "summary": "Class SequenceExtensions Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll Provides convenience extensions for Sequence<T> and its related classes. public static class SequenceExtensions Inheritance object SequenceExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AsSequence<T>(IEnumerable<T>, int, int, Exception?) Returns a Sequence<T> over a finite collection. public static Sequence<T> AsSequence<T>(this IEnumerable<T> collection, int capacity = 100, int batchSize = 20, Exception? error = null) Parameters collection IEnumerable<T> The collection. capacity int The maximum number of items before backpressure is applied. batchSize int The reader suggested batch size. error Exception An optional error to terminate the sequence with. Returns Sequence<T> Type Parameters T"
  },
  "api/MarymoorStudios.Core.Rpc.SequenceSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.SequenceSerializer-1.html",
    "title": "Class SequenceSerializer<T>",
    "summary": "Class SequenceSerializer<T> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class SequenceSerializer<T> : Serializer<Sequence<T>?> Type Parameters T Inheritance object Serializer Serializer<Sequence<T>> SequenceSerializer<T> Inherited Members Serializer<Sequence<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SequenceSerializer() public SequenceSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Sequence<T>?) public override int SizeOf(SerializationContext context, in Sequence<T>? value) Parameters context SerializationContext value Sequence<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Sequence<T>?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Sequence<T>? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Sequence<T> Returns bool Write(SerializationContext, ref RowBuffer, in Sequence<T>?) public override void Write(SerializationContext context, ref RowBuffer buffer, in Sequence<T>? value) Parameters context SerializationContext buffer RowBuffer value Sequence<T>"
  },
  "api/MarymoorStudios.Core.Rpc.SyncMessage-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.SyncMessage-1.html",
    "title": "Class SyncMessage<TServer>",
    "summary": "Class SyncMessage<TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class SyncMessage<TServer> : ADataRpcMessage<SyncMessage<TServer>, TServer> where TServer : AServer<TServer> Type Parameters TServer Inheritance object Turn ResolverTurn<TServer> ARpcMessage<TServer> ADataRpcMessage<SyncMessage<TServer>, TServer> SyncMessage<TServer> Inherited Members ADataRpcMessage<SyncMessage<TServer>, TServer>.Result Turn.Id object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties MethodName protected override string MethodName { get; } Property Value string Methods Run(TServer) protected override Promise Run(TServer server) Parameters server TServer Returns Promise"
  },
  "api/MarymoorStudios.Core.Rpc.SyncMessage.html": {
    "href": "api/MarymoorStudios.Core.Rpc.SyncMessage.html",
    "title": "Class SyncMessage",
    "summary": "Class SyncMessage Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public static class SyncMessage Inheritance object SyncMessage Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields SyncMethodIndex public const uint SyncMethodIndex = 4294967295 Field Value uint SyncMethodName public const string SyncMethodName = \"Proxy.Sync\" Field Value string"
  },
  "api/MarymoorStudios.Core.Rpc.SyncMessageSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Rpc.SyncMessageSerializer-1.html",
    "title": "Class SyncMessageSerializer<TServer>",
    "summary": "Class SyncMessageSerializer<TServer> Namespace MarymoorStudios.Core.Rpc Assembly MarymoorStudios.Core.Rpc.dll public sealed class SyncMessageSerializer<TServer> : Serializer<SyncMessage<TServer>?>, IDerivedSerializer<SyncMessage<TServer>?>, IDerivedSerializer where TServer : AServer<TServer> Type Parameters TServer Inheritance object Serializer Serializer<SyncMessage<TServer>> SyncMessageSerializer<TServer> Implements IDerivedSerializer<SyncMessage<TServer>> IDerivedSerializer Inherited Members Serializer<SyncMessage<TServer>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SyncMessageSerializer() public SyncMessageSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in SyncMessage<TServer>?) public override int SizeOf(SerializationContext context, in SyncMessage<TServer>? value) Parameters context SerializationContext value SyncMessage<TServer> Returns int SizeOfSegment(SerializationContext, in SyncMessage<TServer>) public static int SizeOfSegment(SerializationContext context, in SyncMessage<TServer> value) Parameters context SerializationContext value SyncMessage<TServer> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out SyncMessage<TServer>?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out SyncMessage<TServer>? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value SyncMessage<TServer> Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in SyncMessage<TServer>?) public override void Write(SerializationContext context, ref RowBuffer buffer, in SyncMessage<TServer>? value) Parameters context SerializationContext buffer RowBuffer value SyncMessage<TServer> WriteSegment(SerializationContext, ref RowBuffer, in SyncMessage<TServer>) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in SyncMessage<TServer> value) Parameters context SerializationContext buffer RowBuffer value SyncMessage<TServer>"
  },
  "api/MarymoorStudios.Core.Rpc.html": {
    "href": "api/MarymoorStudios.Core.Rpc.html",
    "title": "Namespace MarymoorStudios.Core.Rpc",
    "summary": "Namespace MarymoorStudios.Core.Rpc Classes ABytesRpcMessage<TMessage, TServer> Abstract base class for all generated data-returning message types. ADataRpcMessage<TMessage, TServer> Abstract base class for all generated void-returning message types. ADataRpcMessage<TMessage, TResult, TServer> Abstract base class for all generated data-returning message types. AProxyRpcMessage<TMessage, TReturnProxy, TReturnServer, TServer> Abstract base class for all generated proxy-returning message types. ARpcMessage<TServer> ASequenceRpcMessage<TMessage, TItem, TServer> Abstract base class for all generated data-returning message types. AServer<TServer> Abstract base class for all eventual server types. BackgroundSip<TChildProxy, TChildServer> A Software Isolated Process (Sip) that runs in a background thread. Bytes Bytes.Writer The writer capability for a Bytes. BytesSerializer CommException CommExceptionSerializer CommIdSerializer CommProtocol EventualAttribute EventualType IMetadata.Descriptor The base type for all late-bound capability descriptions. IMetadata.DescriptorSerializer MetadataProxy MetadataPublisher An implementation of IMetadata from a static, potentially non-unique, set of capabilities. MetadataServer NothingProxy NothingServer PipeExtensions Provides convenience extensions for Pipe<T> and its related classes. PipeQueue<T> PipeReader<T> Capability for reading an ordered sequence of items from a pipe. PipeWriter<T> Capability for writing an ordered sequence of items to a pipe. PromiseSerializer PromiseSerializer<T> ProtocolViolationException ProtocolViolationExceptionSerializer Proxy Static helpers for mapping between TProxy and TServer. ProxySerializer<TProxy, TServer> Proxy<TServer> Abstract base class for all generated proxy types. RemotedException An exception that was transmitted across a MarymoorStudios.Core.Rpc.CommChannel. RemotedExceptionSerializer ResolverExtensions Extensions for Resolver<T>. SequenceExtensions Provides convenience extensions for Sequence<T> and its related classes. SequenceSerializer<T> Sequence<T> Provides iterators for Sequence<T>. Sequence<T>.Writer The writer capability for a Sequence<T>. SyncMessage SyncMessageSerializer<TServer> SyncMessage<TServer> Structs CommId A unique id that represents an object (local or remote) to the channel. MethodId An identifier for a unique method within a remotable type hierarchy. PipeExtensions.PipeReaderEnumerator<T> An enumerator for a PipeReader<T>. Pipe<T> A unidirectional flow of items. Sequence<T>.SequenceEnumerator An enumerator for a Sequence<T>. Interfaces IByRefRemotable Objects that are remoted by reference (instead of by value). IMetadata A general mechanism for publishing late-bound eventual capabilities. INothing Empty eventual interface that grants no capabilities. IProxy<TProxy, TServer> Interface that provides generic constraints."
  },
  "api/MarymoorStudios.Core.Serialization.ArrayMemoryResizer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.ArrayMemoryResizer.html",
    "title": "Class ArrayMemoryResizer",
    "summary": "Class ArrayMemoryResizer Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll public sealed class ArrayMemoryResizer : IMemoryResizer Inheritance object ArrayMemoryResizer Implements IMemoryResizer Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ArrayMemoryResizer() public ArrayMemoryResizer() Properties Shared A shared (stateless, multi-thread safe) array resizer. public static ArrayMemoryResizer Shared { get; } Property Value ArrayMemoryResizer Methods Resize(Memory<byte>, int) Resizes a memory block (copying any existing content). public Memory<byte> Resize(Memory<byte> memory, int minSize) Parameters memory Memory<byte> Existing buffer. minSize int The minimum size of the new buffer. Returns Memory<byte> A new buffer that is at least as large as \"minSize\"."
  },
  "api/MarymoorStudios.Core.Serialization.DataContractAttribute.html": {
    "href": "api/MarymoorStudios.Core.Serialization.DataContractAttribute.html",
    "title": "Class DataContractAttribute",
    "summary": "Class DataContractAttribute Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum, Inherited = false)] public sealed class DataContractAttribute : Attribute Inheritance object Attribute DataContractAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors DataContractAttribute() public DataContractAttribute() Properties NoCode If true then no code is generated (a custom implementation must be provided). public bool NoCode { get; set; } Property Value bool"
  },
  "api/MarymoorStudios.Core.Serialization.DataContractSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.DataContractSerializer.html",
    "title": "Class DataContractSerializer",
    "summary": "Class DataContractSerializer Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll public static class DataContractSerializer Inheritance object DataContractSerializer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetTypeId<T>() Returns the TypeId of T. public static TypeId GetTypeId<T>() Returns TypeId Type Parameters T The type whose TypeId should be computed. Serialize<T>(T) Writes the binary representation of an MCS DataContract type to Memory. public static ReadOnlyMemory<byte> Serialize<T>(T data) Parameters data T The value to serialize. Returns ReadOnlyMemory<byte> The binary representation of the value. Type Parameters T The type to serialize. TryDeserialize<T>(ReadOnlyMemory<byte>, out T) Parses the binary representation of an MCS DataContract type from a Memory. public static bool TryDeserialize<T>(ReadOnlyMemory<byte> bytes, out T data) Parameters bytes ReadOnlyMemory<byte> A memory buffer containing the value to parse. data T The deserialized value, if successful, default(T) otherwise. Returns bool True if successful, false otherwise. Type Parameters T The type to deserialize."
  },
  "api/MarymoorStudios.Core.Serialization.DataMemberAttribute.html": {
    "href": "api/MarymoorStudios.Core.Serialization.DataMemberAttribute.html",
    "title": "Class DataMemberAttribute",
    "summary": "Class DataMemberAttribute Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field)] public sealed class DataMemberAttribute : Attribute Inheritance object Attribute DataMemberAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors DataMemberAttribute() public DataMemberAttribute()"
  },
  "api/MarymoorStudios.Core.Serialization.IMemoryResizer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.IMemoryResizer.html",
    "title": "Interface IMemoryResizer",
    "summary": "Interface IMemoryResizer Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll public interface IMemoryResizer Methods Resize(Memory<byte>, int) Resizes a memory block (copying any existing content). Memory<byte> Resize(Memory<byte> memory, int minSize) Parameters memory Memory<byte> Existing buffer. minSize int The minimum size of the new buffer. Returns Memory<byte> A new buffer that is at least as large as \"minSize\"."
  },
  "api/MarymoorStudios.Core.Serialization.RecordVisitor.html": {
    "href": "api/MarymoorStudios.Core.Serialization.RecordVisitor.html",
    "title": "Class RecordVisitor",
    "summary": "Class RecordVisitor Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll Visitor that can walk the structure of any serialized record. public abstract class RecordVisitor Inheritance object RecordVisitor Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RecordVisitor() protected RecordVisitor() Methods ReportError(string) Called when an error occurs during the walk. protected virtual bool ReportError(string error) Parameters error string Detailed error message. Returns bool returns false TryReadRecord(ref ReadOnlyRowBuffer) public bool TryReadRecord(ref ReadOnlyRowBuffer b) Parameters b ReadOnlyRowBuffer Returns bool TryReadUnknown(ref ReadOnlyRowBuffer, TypeMarker) Called when an unknown code is read. protected virtual bool TryReadUnknown(ref ReadOnlyRowBuffer b, TypeMarker code) Parameters b ReadOnlyRowBuffer The buffer. code TypeMarker The unknown code. Returns bool True if the code was processed, false otherwise. Visit() Called when a is visited. protected abstract bool Visit() Returns bool True to continue, false otherwise. Visit(TypeId) Called when a TypeId value is visited. protected abstract bool Visit(TypeId value) Parameters value TypeId Returns bool True to continue, false otherwise. Visit(string) Called when a string value is visited. protected abstract bool Visit(string value) Parameters value string Returns bool True to continue, false otherwise. VisitArrayEnd() Called when an array scoped is exited. protected abstract bool VisitArrayEnd() Returns bool True to continue, false otherwise. VisitArrayStart(int) Called when an array scoped is entered. protected abstract bool VisitArrayStart(int length) Parameters length int Returns bool True to continue, false otherwise. VisitByteArray(ReadOnlyMemory<byte>) Called when an array of bytes is read. protected abstract bool VisitByteArray(ReadOnlyMemory<byte> bytes) Parameters bytes ReadOnlyMemory<byte> Returns bool True to continue, false otherwise. VisitObjectEnd() Called when an object scoped is exited. protected abstract bool VisitObjectEnd() Returns bool True to continue, false otherwise. VisitObjectStart() Called when an object scoped is entered. protected abstract bool VisitObjectStart() Returns bool True to continue, false otherwise. VisitSegmentEnd() Called when an object segment scoped is exited. protected abstract bool VisitSegmentEnd() Returns bool True to continue, false otherwise. VisitSegmentStart(TypeId, int) Called when an object segment scoped is entered. protected abstract bool VisitSegmentStart(TypeId typeId, int segmentLength) Parameters typeId TypeId segmentLength int Returns bool True to continue, false otherwise. VisitTupleEnd() Called when a tuple scoped is exited. protected abstract bool VisitTupleEnd() Returns bool True to continue, false otherwise. VisitTupleStart(TypeId) Called when a tuple scoped is entered. protected abstract bool VisitTupleStart(TypeId typeId) Parameters typeId TypeId Returns bool True to continue, false otherwise. Visit<T>(T) Called when a primitive value is visited. protected abstract bool Visit<T>(T value) where T : unmanaged Parameters value T Returns bool True to continue, false otherwise. Type Parameters T"
  },
  "api/MarymoorStudios.Core.Serialization.SerializationException.html": {
    "href": "api/MarymoorStudios.Core.Serialization.SerializationException.html",
    "title": "Class SerializationException",
    "summary": "Class SerializationException Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll Exception thrown during serialization or deserialization. [DataContract] public sealed class SerializationException : Exception, ISerializable Inheritance object Exception SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SerializationException() public SerializationException() SerializationException(string?) public SerializationException(string? message) Parameters message string SerializationException(string?, Exception?) public SerializationException(string? message, Exception? inner) Parameters message string inner Exception"
  },
  "api/MarymoorStudios.Core.Serialization.SerializationExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.SerializationExceptionSerializer.html",
    "title": "Class SerializationExceptionSerializer",
    "summary": "Class SerializationExceptionSerializer Namespace MarymoorStudios.Core.Serialization Assembly MarymoorStudios.Core.Serialization.dll public sealed class SerializationExceptionSerializer : Serializer<SerializationException?>, IDerivedSerializer<SerializationException?>, IDerivedSerializer Inheritance object Serializer Serializer<SerializationException> SerializationExceptionSerializer Implements IDerivedSerializer<SerializationException> IDerivedSerializer Inherited Members Serializer<SerializationException>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SerializationExceptionSerializer() public SerializationExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in SerializationException?) public override int SizeOf(SerializationContext context, in SerializationException? value) Parameters context SerializationContext value SerializationException Returns int SizeOfSegment(SerializationContext, in SerializationException) public static int SizeOfSegment(SerializationContext context, in SerializationException value) Parameters context SerializationContext value SerializationException Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out SerializationException?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out SerializationException? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value SerializationException Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in SerializationException?) public override void Write(SerializationContext context, ref RowBuffer buffer, in SerializationException? value) Parameters context SerializationContext buffer RowBuffer value SerializationException WriteSegment(SerializationContext, ref RowBuffer, in SerializationException) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in SerializationException value) Parameters context SerializationContext buffer RowBuffer value SerializationException"
  },
  "api/MarymoorStudios.Core.Serialization.System.ArraySerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ArraySerializer-1.html",
    "title": "Class ArraySerializer<T>",
    "summary": "Class ArraySerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ArraySerializer<T> : Serializer<T[]?> Type Parameters T Inheritance object Serializer Serializer<T[]> ArraySerializer<T> Inherited Members Serializer<T[]>.SizeOf(SerializationContext, in T[]) Serializer<T[]>.Write(SerializationContext, ref RowBuffer, in T[]) Serializer<T[]>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out T[]) Serializer<T[]>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ArraySerializer() public ArraySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in T[]?) public override int SizeOf(SerializationContext context, in T[]? value) Parameters context SerializationContext value T[] Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out T[]?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out T[]? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value T[] Returns bool Write(SerializationContext, ref RowBuffer, in T[]?) public override void Write(SerializationContext context, ref RowBuffer buffer, in T[]? value) Parameters context SerializationContext buffer RowBuffer value T[]"
  },
  "api/MarymoorStudios.Core.Serialization.System.BooleanSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.BooleanSerializer.html",
    "title": "Class BooleanSerializer",
    "summary": "Class BooleanSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class BooleanSerializer : Serializer<bool> Inheritance object Serializer Serializer<bool> BooleanSerializer Inherited Members Serializer<bool>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BooleanSerializer() public BooleanSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in bool) public override int SizeOf(SerializationContext context, in bool value) Parameters context SerializationContext value bool Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out bool) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out bool value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value bool Returns bool Write(SerializationContext, ref RowBuffer, in bool) public override void Write(SerializationContext context, ref RowBuffer buffer, in bool value) Parameters context SerializationContext buffer RowBuffer value bool"
  },
  "api/MarymoorStudios.Core.Serialization.System.CollectionsSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.CollectionsSerializer-1.html",
    "title": "Class CollectionsSerializer<T>",
    "summary": "Class CollectionsSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public static class CollectionsSerializer<T> Type Parameters T Inheritance object CollectionsSerializer<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods SizeOf(SerializationContext, bool, in ReadOnlySpan<T>) public static int SizeOf(SerializationContext context, bool isNull, in ReadOnlySpan<T> value) Parameters context SerializationContext isNull bool value ReadOnlySpan<T> Returns int TryRead<TCollection>(SerializationContext, ref ReadOnlyRowBuffer, Func<int, TCollection>, Func<TCollection, Span<T>>, out TCollection) public static bool TryRead<TCollection>(SerializationContext context, ref ReadOnlyRowBuffer buffer, Func<int, TCollection> alloc, Func<TCollection, Span<T>> asSpan, out TCollection value) where TCollection : allows ref struct Parameters context SerializationContext buffer ReadOnlyRowBuffer alloc Func<int, TCollection> asSpan Func<TCollection, Span<T>> value TCollection Returns bool Type Parameters TCollection Write(SerializationContext, ref RowBuffer, bool, in ReadOnlySpan<T>) public static void Write(SerializationContext context, ref RowBuffer buffer, bool isNull, in ReadOnlySpan<T> value) Parameters context SerializationContext buffer RowBuffer isNull bool value ReadOnlySpan<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.DateTimeSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.DateTimeSerializer.html",
    "title": "Class DateTimeSerializer",
    "summary": "Class DateTimeSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class DateTimeSerializer : Serializer<DateTime> Inheritance object Serializer Serializer<DateTime> DateTimeSerializer Inherited Members Serializer<DateTime>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DateTimeSerializer() public DateTimeSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in DateTime) public override int SizeOf(SerializationContext context, in DateTime value) Parameters context SerializationContext value DateTime Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out DateTime) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out DateTime value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value DateTime Returns bool Write(SerializationContext, ref RowBuffer, in DateTime) public override void Write(SerializationContext context, ref RowBuffer buffer, in DateTime value) Parameters context SerializationContext buffer RowBuffer value DateTime"
  },
  "api/MarymoorStudios.Core.Serialization.System.DecimalSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.DecimalSerializer.html",
    "title": "Class DecimalSerializer",
    "summary": "Class DecimalSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class DecimalSerializer : Serializer<decimal> Inheritance object Serializer Serializer<decimal> DecimalSerializer Inherited Members Serializer<decimal>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DecimalSerializer() public DecimalSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in decimal) public override int SizeOf(SerializationContext context, in decimal value) Parameters context SerializationContext value decimal Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out decimal) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out decimal value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value decimal Returns bool Write(SerializationContext, ref RowBuffer, in decimal) public override void Write(SerializationContext context, ref RowBuffer buffer, in decimal value) Parameters context SerializationContext buffer RowBuffer value decimal"
  },
  "api/MarymoorStudios.Core.Serialization.System.DefaultSerializationContext.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.DefaultSerializationContext.html",
    "title": "Class DefaultSerializationContext",
    "summary": "Class DefaultSerializationContext Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll Default SerializationContext that does nothing. public sealed class DefaultSerializationContext : SerializationContext Inheritance object SerializationContext DefaultSerializationContext Inherited Members SerializationContext.UpLevelVisitor object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DefaultSerializationContext() public DefaultSerializationContext() Fields Instance public static readonly DefaultSerializationContext Instance Field Value DefaultSerializationContext"
  },
  "api/MarymoorStudios.Core.Serialization.System.ExceptionSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ExceptionSerializer.html",
    "title": "Class ExceptionSerializer",
    "summary": "Class ExceptionSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ExceptionSerializer : Serializer<Exception?>, IDerivedSerializer<Exception?>, IDerivedSerializer Inheritance object Serializer Serializer<Exception> ExceptionSerializer Implements IDerivedSerializer<Exception> IDerivedSerializer Inherited Members Serializer<Exception>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ExceptionSerializer() public ExceptionSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Exception?) public override int SizeOf(SerializationContext context, in Exception? value) Parameters context SerializationContext value Exception Returns int SizeOfSegment(SerializationContext, in Exception) public static int SizeOfSegment(SerializationContext context, in Exception value) Parameters context SerializationContext value Exception Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Exception?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Exception? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Exception Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out string?) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out string? memberMessage) Parameters context SerializationContext buffer ReadOnlyRowBuffer memberMessage string Returns bool Write(SerializationContext, ref RowBuffer, in Exception?) public override void Write(SerializationContext context, ref RowBuffer buffer, in Exception? value) Parameters context SerializationContext buffer RowBuffer value Exception WriteSegment(SerializationContext, ref RowBuffer, in Exception) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in Exception value) Parameters context SerializationContext buffer RowBuffer value Exception"
  },
  "api/MarymoorStudios.Core.Serialization.System.Float32Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Float32Serializer.html",
    "title": "Class Float32Serializer",
    "summary": "Class Float32Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Float32Serializer : Serializer<float> Inheritance object Serializer Serializer<float> Float32Serializer Inherited Members Serializer<float>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Float32Serializer() public Float32Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in float) public override int SizeOf(SerializationContext context, in float value) Parameters context SerializationContext value float Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out float) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out float value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value float Returns bool Write(SerializationContext, ref RowBuffer, in float) public override void Write(SerializationContext context, ref RowBuffer buffer, in float value) Parameters context SerializationContext buffer RowBuffer value float"
  },
  "api/MarymoorStudios.Core.Serialization.System.Float64Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Float64Serializer.html",
    "title": "Class Float64Serializer",
    "summary": "Class Float64Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Float64Serializer : Serializer<double> Inheritance object Serializer Serializer<double> Float64Serializer Inherited Members Serializer<double>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Float64Serializer() public Float64Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in double) public override int SizeOf(SerializationContext context, in double value) Parameters context SerializationContext value double Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out double) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out double value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value double Returns bool Write(SerializationContext, ref RowBuffer, in double) public override void Write(SerializationContext context, ref RowBuffer buffer, in double value) Parameters context SerializationContext buffer RowBuffer value double"
  },
  "api/MarymoorStudios.Core.Serialization.System.GuidSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.GuidSerializer.html",
    "title": "Class GuidSerializer",
    "summary": "Class GuidSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class GuidSerializer : Serializer<Guid> Inheritance object Serializer Serializer<Guid> GuidSerializer Inherited Members Serializer<Guid>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GuidSerializer() public GuidSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Guid) public override int SizeOf(SerializationContext context, in Guid value) Parameters context SerializationContext value Guid Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Guid) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Guid value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Guid Returns bool Write(SerializationContext, ref RowBuffer, in Guid) public override void Write(SerializationContext context, ref RowBuffer buffer, in Guid value) Parameters context SerializationContext buffer RowBuffer value Guid"
  },
  "api/MarymoorStudios.Core.Serialization.System.IDerivedSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.IDerivedSerializer-1.html",
    "title": "Interface IDerivedSerializer<T>",
    "summary": "Interface IDerivedSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public interface IDerivedSerializer<T> : IDerivedSerializer where T : class? Type Parameters T"
  },
  "api/MarymoorStudios.Core.Serialization.System.IDerivedSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.IDerivedSerializer.html",
    "title": "Interface IDerivedSerializer",
    "summary": "Interface IDerivedSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public interface IDerivedSerializer"
  },
  "api/MarymoorStudios.Core.Serialization.System.IEnumerableSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.IEnumerableSerializer-1.html",
    "title": "Class IEnumerableSerializer<T>",
    "summary": "Class IEnumerableSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class IEnumerableSerializer<T> : Serializer<IEnumerable<T>?> Type Parameters T Inheritance object Serializer Serializer<IEnumerable<T>> IEnumerableSerializer<T> Inherited Members Serializer<IEnumerable<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IEnumerableSerializer() public IEnumerableSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in IEnumerable<T>?) public override int SizeOf(SerializationContext context, in IEnumerable<T>? value) Parameters context SerializationContext value IEnumerable<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out IEnumerable<T>?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IEnumerable<T>? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value IEnumerable<T> Returns bool Write(SerializationContext, ref RowBuffer, in IEnumerable<T>?) public override void Write(SerializationContext context, ref RowBuffer buffer, in IEnumerable<T>? value) Parameters context SerializationContext buffer RowBuffer value IEnumerable<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.IPAddressSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.IPAddressSerializer.html",
    "title": "Class IPAddressSerializer",
    "summary": "Class IPAddressSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class IPAddressSerializer : Serializer<IPAddress?>, IDerivedSerializer<IPAddress?>, IDerivedSerializer Inheritance object Serializer Serializer<IPAddress> IPAddressSerializer Implements IDerivedSerializer<IPAddress> IDerivedSerializer Inherited Members Serializer<IPAddress>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IPAddressSerializer() public IPAddressSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in IPAddress?) public override int SizeOf(SerializationContext context, in IPAddress? value) Parameters context SerializationContext value IPAddress Returns int SizeOfSegment(SerializationContext, in IPAddress) public static int SizeOfSegment(SerializationContext context, in IPAddress value) Parameters context SerializationContext value IPAddress Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out IPAddress?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IPAddress? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value IPAddress Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out IPAddress?) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IPAddress? address) Parameters context SerializationContext buffer ReadOnlyRowBuffer address IPAddress Returns bool Write(SerializationContext, ref RowBuffer, in IPAddress?) public override void Write(SerializationContext context, ref RowBuffer buffer, in IPAddress? value) Parameters context SerializationContext buffer RowBuffer value IPAddress WriteSegment(SerializationContext, ref RowBuffer, in IPAddress) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in IPAddress value) Parameters context SerializationContext buffer RowBuffer value IPAddress"
  },
  "api/MarymoorStudios.Core.Serialization.System.IPEndPointSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.IPEndPointSerializer.html",
    "title": "Class IPEndPointSerializer",
    "summary": "Class IPEndPointSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class IPEndPointSerializer : Serializer<IPEndPoint?>, IDerivedSerializer<IPEndPoint?>, IDerivedSerializer Inheritance object Serializer Serializer<IPEndPoint> IPEndPointSerializer Implements IDerivedSerializer<IPEndPoint> IDerivedSerializer Inherited Members Serializer<IPEndPoint>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IPEndPointSerializer() public IPEndPointSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in IPEndPoint?) public override int SizeOf(SerializationContext context, in IPEndPoint? value) Parameters context SerializationContext value IPEndPoint Returns int SizeOfSegment(SerializationContext, in IPEndPoint) public static int SizeOfSegment(SerializationContext context, in IPEndPoint value) Parameters context SerializationContext value IPEndPoint Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out IPEndPoint?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IPEndPoint? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value IPEndPoint Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer, out IPAddress, out int) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer, out IPAddress address, out int port) Parameters context SerializationContext buffer ReadOnlyRowBuffer address IPAddress port int Returns bool Write(SerializationContext, ref RowBuffer, in IPEndPoint?) public override void Write(SerializationContext context, ref RowBuffer buffer, in IPEndPoint? value) Parameters context SerializationContext buffer RowBuffer value IPEndPoint WriteSegment(SerializationContext, ref RowBuffer, in IPEndPoint) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in IPEndPoint value) Parameters context SerializationContext buffer RowBuffer value IPEndPoint"
  },
  "api/MarymoorStudios.Core.Serialization.System.Int16Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Int16Serializer.html",
    "title": "Class Int16Serializer",
    "summary": "Class Int16Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Int16Serializer : Serializer<short> Inheritance object Serializer Serializer<short> Int16Serializer Inherited Members Serializer<short>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Int16Serializer() public Int16Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in short) public override int SizeOf(SerializationContext context, in short value) Parameters context SerializationContext value short Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out short) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out short value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value short Returns bool Write(SerializationContext, ref RowBuffer, in short) public override void Write(SerializationContext context, ref RowBuffer buffer, in short value) Parameters context SerializationContext buffer RowBuffer value short"
  },
  "api/MarymoorStudios.Core.Serialization.System.Int32Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Int32Serializer.html",
    "title": "Class Int32Serializer",
    "summary": "Class Int32Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Int32Serializer : Serializer<int> Inheritance object Serializer Serializer<int> Int32Serializer Inherited Members Serializer<int>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Int32Serializer() public Int32Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in int) public override int SizeOf(SerializationContext context, in int value) Parameters context SerializationContext value int Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out int) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out int value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value int Returns bool Write(SerializationContext, ref RowBuffer, in int) public override void Write(SerializationContext context, ref RowBuffer buffer, in int value) Parameters context SerializationContext buffer RowBuffer value int"
  },
  "api/MarymoorStudios.Core.Serialization.System.Int64Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Int64Serializer.html",
    "title": "Class Int64Serializer",
    "summary": "Class Int64Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Int64Serializer : Serializer<long> Inheritance object Serializer Serializer<long> Int64Serializer Inherited Members Serializer<long>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Int64Serializer() public Int64Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in long) public override int SizeOf(SerializationContext context, in long value) Parameters context SerializationContext value long Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out long) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out long value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value long Returns bool Write(SerializationContext, ref RowBuffer, in long) public override void Write(SerializationContext context, ref RowBuffer buffer, in long value) Parameters context SerializationContext buffer RowBuffer value long"
  },
  "api/MarymoorStudios.Core.Serialization.System.Int8Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Int8Serializer.html",
    "title": "Class Int8Serializer",
    "summary": "Class Int8Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class Int8Serializer : Serializer<sbyte> Inheritance object Serializer Serializer<sbyte> Int8Serializer Inherited Members Serializer<sbyte>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Int8Serializer() public Int8Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in sbyte) public override int SizeOf(SerializationContext context, in sbyte value) Parameters context SerializationContext value sbyte Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out sbyte) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out sbyte value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value sbyte Returns bool Write(SerializationContext, ref RowBuffer, in sbyte) public override void Write(SerializationContext context, ref RowBuffer buffer, in sbyte value) Parameters context SerializationContext buffer RowBuffer value sbyte"
  },
  "api/MarymoorStudios.Core.Serialization.System.ListSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ListSerializer-1.html",
    "title": "Class ListSerializer<T>",
    "summary": "Class ListSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ListSerializer<T> : Serializer<List<T>?> Type Parameters T Inheritance object Serializer Serializer<List<T>> ListSerializer<T> Inherited Members Serializer<List<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ListSerializer() public ListSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in List<T>?) public override int SizeOf(SerializationContext context, in List<T>? value) Parameters context SerializationContext value List<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out List<T>?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out List<T>? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value List<T> Returns bool Write(SerializationContext, ref RowBuffer, in List<T>?) public override void Write(SerializationContext context, ref RowBuffer buffer, in List<T>? value) Parameters context SerializationContext buffer RowBuffer value List<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.MemorySerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.MemorySerializer-1.html",
    "title": "Class MemorySerializer<T>",
    "summary": "Class MemorySerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class MemorySerializer<T> : Serializer<Memory<T>> Type Parameters T Inheritance object Serializer Serializer<Memory<T>> MemorySerializer<T> Inherited Members Serializer<Memory<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MemorySerializer() public MemorySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Memory<T>) public override int SizeOf(SerializationContext context, in Memory<T> value) Parameters context SerializationContext value Memory<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Memory<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Memory<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Memory<T> Returns bool Write(SerializationContext, ref RowBuffer, in Memory<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in Memory<T> value) Parameters context SerializationContext buffer RowBuffer value Memory<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.NullableSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.NullableSerializer-1.html",
    "title": "Class NullableSerializer<T>",
    "summary": "Class NullableSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class NullableSerializer<T> : Serializer<T?> where T : struct Type Parameters T Inheritance object Serializer Serializer<T?> NullableSerializer<T> Inherited Members Serializer<T?>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NullableSerializer() public NullableSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in T?) public override int SizeOf(SerializationContext context, in T? value) Parameters context SerializationContext value T? Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out T?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out T? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value T? Returns bool Write(SerializationContext, ref RowBuffer, in T?) public override void Write(SerializationContext context, ref RowBuffer buffer, in T? value) Parameters context SerializationContext buffer RowBuffer value T?"
  },
  "api/MarymoorStudios.Core.Serialization.System.ObjectSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ObjectSerializer.html",
    "title": "Class ObjectSerializer",
    "summary": "Class ObjectSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ObjectSerializer : Serializer<object?>, IDerivedSerializer<object?>, IDerivedSerializer Inheritance object Serializer Serializer<object> ObjectSerializer Implements IDerivedSerializer<object> IDerivedSerializer Inherited Members Serializer<object>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ObjectSerializer() public ObjectSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in object?) public override int SizeOf(SerializationContext context, in object? value) Parameters context SerializationContext value object Returns int SizeOfSegment(SerializationContext, in object) public static int SizeOfSegment(SerializationContext context, in object value) Parameters context SerializationContext value object Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out object?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out object? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value object Returns bool TryReadSegment(SerializationContext, ref ReadOnlyRowBuffer) public static bool TryReadSegment(SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters context SerializationContext buffer ReadOnlyRowBuffer Returns bool Write(SerializationContext, ref RowBuffer, in object?) public override void Write(SerializationContext context, ref RowBuffer buffer, in object? value) Parameters context SerializationContext buffer RowBuffer value object WriteSegment(SerializationContext, ref RowBuffer, in object) public static void WriteSegment(SerializationContext context, ref RowBuffer buffer, in object value) Parameters context SerializationContext buffer RowBuffer value object"
  },
  "api/MarymoorStudios.Core.Serialization.System.OwnedMemSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.OwnedMemSerializer-1.html",
    "title": "Class OwnedMemSerializer<T>",
    "summary": "Class OwnedMemSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class OwnedMemSerializer<T> : Serializer<OwnedMem<T>> where T : unmanaged Type Parameters T Inheritance object Serializer Serializer<OwnedMem<T>> OwnedMemSerializer<T> Inherited Members Serializer<OwnedMem<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors OwnedMemSerializer() public OwnedMemSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in OwnedMem<T>) public override int SizeOf(SerializationContext context, in OwnedMem<T> value) Parameters context SerializationContext value OwnedMem<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out OwnedMem<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out OwnedMem<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value OwnedMem<T> Returns bool Write(SerializationContext, ref RowBuffer, in OwnedMem<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in OwnedMem<T> value) Parameters context SerializationContext buffer RowBuffer value OwnedMem<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.ReadOnlyMemorySerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ReadOnlyMemorySerializer-1.html",
    "title": "Class ReadOnlyMemorySerializer<T>",
    "summary": "Class ReadOnlyMemorySerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ReadOnlyMemorySerializer<T> : Serializer<ReadOnlyMemory<T>> Type Parameters T Inheritance object Serializer Serializer<ReadOnlyMemory<T>> ReadOnlyMemorySerializer<T> Inherited Members Serializer<ReadOnlyMemory<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReadOnlyMemorySerializer() public ReadOnlyMemorySerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ReadOnlyMemory<T>) public override int SizeOf(SerializationContext context, in ReadOnlyMemory<T> value) Parameters context SerializationContext value ReadOnlyMemory<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ReadOnlyMemory<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ReadOnlyMemory<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ReadOnlyMemory<T> Returns bool Write(SerializationContext, ref RowBuffer, in ReadOnlyMemory<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in ReadOnlyMemory<T> value) Parameters context SerializationContext buffer RowBuffer value ReadOnlyMemory<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.ReadOnlyRowBuffer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ReadOnlyRowBuffer.html",
    "title": "Struct ReadOnlyRowBuffer",
    "summary": "Struct ReadOnlyRowBuffer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public struct ReadOnlyRowBuffer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ReadOnlyRowBuffer(ReadOnlyMemory<byte>) public ReadOnlyRowBuffer(ReadOnlyMemory<byte> buffer = default) Parameters buffer ReadOnlyMemory<byte> Properties Capacity The remaining unused portion of the current buffer allocation. public readonly int Capacity { get; } Property Value int Length The length of the written portion of the buffer. public readonly int Length { get; } Property Value int Remain The remaining content not yet read. public readonly ReadOnlyMemory<byte> Remain { get; } Property Value ReadOnlyMemory<byte> Methods Reset(int) Resets the current read offset to 0. public void Reset(int offset = 0) Parameters offset int Skip(int) Moves the offset forward. public void Skip(int length) Parameters length int The number of bytes to move forward. TryRead(out TypeId) public bool TryRead(out TypeId value) Parameters value TypeId Returns bool TryRead(Span<byte>, out int) Tries to read a byte array into the provided destination. public bool TryRead(Span<byte> destination, out int written) Parameters destination Span<byte> Where bytes should be written. written int The number of bytes written. Returns bool True if successful, false otherwise. Remarks If destination is not large enough then returns , but sets written to the size required. If no length can be read from the ReadOnlyRowBuffer then returns , but sets written to -1. TryRead(out string) public bool TryRead(out string value) Parameters value string Returns bool TryRead<T>(Span<T>) Tries to read a fixed sized byte array into the provided destination. public bool TryRead<T>(Span<T> destination) where T : unmanaged Parameters destination Span<T> Where bytes should be written. Returns bool True if successful, false otherwise. Type Parameters T TryRead<T>(out T) public bool TryRead<T>(out T value) where T : unmanaged Parameters value T Returns bool Type Parameters T"
  },
  "api/MarymoorStudios.Core.Serialization.System.ReadOnlySpanSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ReadOnlySpanSerializer-1.html",
    "title": "Class ReadOnlySpanSerializer<T>",
    "summary": "Class ReadOnlySpanSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ReadOnlySpanSerializer<T> : Serializer<ReadOnlySpan<T>> Type Parameters T Inheritance object Serializer Serializer<ReadOnlySpan<T>> ReadOnlySpanSerializer<T> Inherited Members Serializer<ReadOnlySpan<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReadOnlySpanSerializer() public ReadOnlySpanSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ReadOnlySpan<T>) public override int SizeOf(SerializationContext context, in ReadOnlySpan<T> value) Parameters context SerializationContext value ReadOnlySpan<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ReadOnlySpan<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ReadOnlySpan<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ReadOnlySpan<T> Returns bool Write(SerializationContext, ref RowBuffer, in ReadOnlySpan<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in ReadOnlySpan<T> value) Parameters context SerializationContext buffer RowBuffer value ReadOnlySpan<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.RowBuffer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.RowBuffer.html",
    "title": "Struct RowBuffer",
    "summary": "Struct RowBuffer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public struct RowBuffer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RowBuffer(IMemoryResizer, Memory<byte>) public RowBuffer(IMemoryResizer resizer, Memory<byte> buffer = default) Parameters resizer IMemoryResizer buffer Memory<byte> Properties Buffer The current serialized content. public readonly ReadOnlyMemory<byte> Buffer { get; } Property Value ReadOnlyMemory<byte> Capacity The remaining unused portion of the current buffer allocation. public readonly int Capacity { get; } Property Value int Length The length of the written portion of the buffer. public readonly int Length { get; } Property Value int Methods Reset(int) Resets the current read offset to 0. public void Reset(int offset = 0) Parameters offset int SizeOf(TypeId) public static int SizeOf(TypeId value) Parameters value TypeId Returns int SizeOf(ReadOnlySpan<byte>) public static int SizeOf(ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> Returns int SizeOf(string) public static int SizeOf(string value) Parameters value string Returns int SizeOf<T>(T) public static int SizeOf<T>(T value) where T : unmanaged Parameters value T Returns int Type Parameters T Skip(int) Moves the offset forward. public void Skip(int length) Parameters length int The number of bytes to move forward. TryRead(out TypeId) public bool TryRead(out TypeId value) Parameters value TypeId Returns bool TryRead(Span<byte>, out int) Tries to read a byte array into the provided destination. public bool TryRead(Span<byte> destination, out int written) Parameters destination Span<byte> Where bytes should be written. written int The number of bytes written. Returns bool True if successful, false otherwise. Remarks If destination is not large enough then returns , but sets written to the size required. If no length can be read from the RowBuffer then returns , but sets written to -1. TryRead(out string) public bool TryRead(out string value) Parameters value string Returns bool TryRead<T>(Span<T>) Tries to read a fixed sized byte array into the provided destination. public bool TryRead<T>(Span<T> destination) where T : unmanaged Parameters destination Span<T> Where bytes should be written. Returns bool True if successful, false otherwise. Type Parameters T TryRead<T>(out T) public bool TryRead<T>(out T value) where T : unmanaged Parameters value T Returns bool Type Parameters T Write(TypeId) public void Write(TypeId value) Parameters value TypeId Write(string) public void Write(string value) Parameters value string WriteAt<T>(int, T) Overwrites an existing field in the buffer. public void WriteAt<T>(int offset, T value) where T : unmanaged Parameters offset int The preexisting offset to write at. value T The value to write. Type Parameters T The type of the value to write. Remarks REQUIRES: The offset MUST be within the bounds of previously written fields. WriteRaw<T>(ReadOnlySpan<T>) public void WriteRaw<T>(ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T Write<T>(ReadOnlySpan<T>) public void Write<T>(ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T Write<T>(Span<T>) public void Write<T>(Span<T> value) where T : unmanaged Parameters value Span<T> Type Parameters T Write<T>(T) public void Write<T>(T value) where T : unmanaged Parameters value T Type Parameters T"
  },
  "api/MarymoorStudios.Core.Serialization.System.SerializationContext.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.SerializationContext.html",
    "title": "Class SerializationContext",
    "summary": "Class SerializationContext Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll Abstract base type for a context passed to Serializer<T> during serialization and materialization operations. public abstract class SerializationContext Inheritance object SerializationContext Derived DefaultSerializationContext Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SerializationContext() protected SerializationContext() Properties UpLevelVisitor An (optional) record visitor that is used to perform a metadata walk on sliced and diced up-level content during a down-level materialization. public virtual RecordVisitor? UpLevelVisitor { get; } Property Value RecordVisitor Remarks If (the default) then up-level content is skipped without being walked. Skipping some kinds of content (e.g. Promise) can lead to resource leaks. Skipping is strictly safe for purely passive data content (e.g. on-disk data serializations or RecordIO). Active serialization contexts (e.g. RPC) should override this property to provide a visitor that will properly reclaim resources that would have otherwise been skipped."
  },
  "api/MarymoorStudios.Core.Serialization.System.Serializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Serializer-1.html",
    "title": "Class Serializer<T>",
    "summary": "Class Serializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public abstract class Serializer<T> : Serializer where T : allows ref struct Type Parameters T Inheritance object Serializer Serializer<T> Derived BytesSerializer CommExceptionSerializer CommIdSerializer AbortedExceptionSerializer AlreadyExistsExceptionSerializer EndOfSequenceExceptionSerializer FailedPreconditionExceptionSerializer InsufficientResourcesExceptionSerializer InvalidArgumentExceptionSerializer NotFoundExceptionSerializer Test2ExceptionSerializer TestExceptionSerializer UnauthenticatedExceptionSerializer UnavailableExceptionSerializer UnimplementedExceptionSerializer UninitializedExceptionSerializer IMetadata.DescriptorSerializer AdmissionManager.AdmissionPolicySerializer EndorsementCollectionSerializer EndorsementSerializer RemoteAdmissionManager.AdmissionOutcomeSerializer UserIdentityCollectionSerializer UserIdentitySerializer PromiseSerializer PromiseSerializer<T> ProtocolViolationExceptionSerializer ProxySerializer<TProxy, TServer> RemotedExceptionSerializer SequenceSerializer<T> SyncMessageSerializer<TServer> SerializationExceptionSerializer ArraySerializer<T> BooleanSerializer DateTimeSerializer DecimalSerializer ExceptionSerializer Float32Serializer Float64Serializer GuidSerializer IEnumerableSerializer<T> IPAddressSerializer IPEndPointSerializer Int16Serializer Int32Serializer Int64Serializer Int8Serializer ListSerializer<T> MemorySerializer<T> NullableSerializer<T> ObjectSerializer OwnedMemSerializer<T> ReadOnlyMemorySerializer<T> ReadOnlySpanSerializer<T> SpanSerializer<T> StringSerializer TimeSpanSerializer TypeIdSerializer TypeMarkerSerializer UInt16Serializer UInt32Serializer UInt64Serializer UInt8Serializer ValueTupleSerializer<T1> ValueTupleSerializer<T1, T2> ValueTupleSerializer<T1, T2, T3> ValueTupleSerializer<T1, T2, T3, T4> ValueTupleSerializer<T1, T2, T3, T4, T5> ValueTupleSerializer<T1, T2, T3, T4, T5, T6> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> Inherited Members Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) Serializer.Get<T>() Serializer.GetTypeId() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Serializer() protected Serializer() Properties Default public static Serializer<T> Default { get; } Property Value Serializer<T> Methods SizeOf(SerializationContext, in T) public abstract int SizeOf(SerializationContext context, in T value) Parameters context SerializationContext value T Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out T) public abstract bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out T value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value T Returns bool Write(SerializationContext, ref RowBuffer, in T) public abstract void Write(SerializationContext context, ref RowBuffer buffer, in T value) Parameters context SerializationContext buffer RowBuffer value T"
  },
  "api/MarymoorStudios.Core.Serialization.System.Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.Serializer.html",
    "title": "Class Serializer",
    "summary": "Class Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public abstract class Serializer Inheritance object Serializer Derived Serializer<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Serializer() protected Serializer() Methods Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Skips over up-level properties that are not known. public static bool Dice(int segmentEnd, SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters segmentEnd int The buffer offset where the segment ends. context SerializationContext The serialization context. buffer ReadOnlyRowBuffer The buffer. Returns bool True if successful, false if an error occurred. GetTypeId() public abstract TypeId GetTypeId() Returns TypeId Get<T>() protected static Serializer<T> Get<T>() where T : allows ref struct Returns Serializer<T> Type Parameters T Register(Type, Type) public static void Register(Type genericType, Type templateType) Parameters genericType Type templateType Type Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Skips over type segments until it encounters a typeId that is known. public static bool Slice(TypeId declaredTypeId, ref TypeId typeId, SerializationContext context, ref ReadOnlyRowBuffer buffer) Parameters declaredTypeId TypeId The type id of the calling serializer. typeId TypeId On input the type of the current segment, on return the type of the found segment. context SerializationContext The serialization context. buffer ReadOnlyRowBuffer The buffer to read from. Returns bool True if successful, false if parsing fails. TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) public static bool TryReadDerived<TSuper>(TypeId typeId, SerializationContext context, ref ReadOnlyRowBuffer buffer, out TSuper value) where TSuper : class? Parameters typeId TypeId context SerializationContext buffer ReadOnlyRowBuffer value TSuper Returns bool Type Parameters TSuper TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) public static bool TrySizeOfDerived<TSuper>(SerializationContext context, in TSuper value, out int size) where TSuper : class? Parameters context SerializationContext value TSuper size int Returns bool Type Parameters TSuper TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) public static bool TryWriteDerived<TSuper>(SerializationContext context, ref RowBuffer buffer, in TSuper value) where TSuper : class? Parameters context SerializationContext buffer RowBuffer value TSuper Returns bool Type Parameters TSuper"
  },
  "api/MarymoorStudios.Core.Serialization.System.SpanSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.SpanSerializer-1.html",
    "title": "Class SpanSerializer<T>",
    "summary": "Class SpanSerializer<T> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public class SpanSerializer<T> : Serializer<Span<T>> Type Parameters T Inheritance object Serializer Serializer<Span<T>> SpanSerializer<T> Inherited Members Serializer<Span<T>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) Serializer.Get<T>() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SpanSerializer() public SpanSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in Span<T>) public override int SizeOf(SerializationContext context, in Span<T> value) Parameters context SerializationContext value Span<T> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out Span<T>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out Span<T> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value Span<T> Returns bool Write(SerializationContext, ref RowBuffer, in Span<T>) public override void Write(SerializationContext context, ref RowBuffer buffer, in Span<T> value) Parameters context SerializationContext buffer RowBuffer value Span<T>"
  },
  "api/MarymoorStudios.Core.Serialization.System.StringSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.StringSerializer.html",
    "title": "Class StringSerializer",
    "summary": "Class StringSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class StringSerializer : Serializer<string?> Inheritance object Serializer Serializer<string> StringSerializer Inherited Members Serializer<string>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors StringSerializer() public StringSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in string?) public override int SizeOf(SerializationContext context, in string? value) Parameters context SerializationContext value string Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out string?) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out string? value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value string Returns bool Write(SerializationContext, ref RowBuffer, in string?) public override void Write(SerializationContext context, ref RowBuffer buffer, in string? value) Parameters context SerializationContext buffer RowBuffer value string"
  },
  "api/MarymoorStudios.Core.Serialization.System.TimeSpanSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.TimeSpanSerializer.html",
    "title": "Class TimeSpanSerializer",
    "summary": "Class TimeSpanSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class TimeSpanSerializer : Serializer<TimeSpan> Inheritance object Serializer Serializer<TimeSpan> TimeSpanSerializer Inherited Members Serializer<TimeSpan>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TimeSpanSerializer() public TimeSpanSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in TimeSpan) public override int SizeOf(SerializationContext context, in TimeSpan value) Parameters context SerializationContext value TimeSpan Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out TimeSpan) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out TimeSpan value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value TimeSpan Returns bool Write(SerializationContext, ref RowBuffer, in TimeSpan) public override void Write(SerializationContext context, ref RowBuffer buffer, in TimeSpan value) Parameters context SerializationContext buffer RowBuffer value TimeSpan"
  },
  "api/MarymoorStudios.Core.Serialization.System.TypeId.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.TypeId.html",
    "title": "Struct TypeId",
    "summary": "Struct TypeId Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public readonly struct TypeId : IEquatable<TypeId> Implements IEquatable<TypeId> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TypeId(Type, params Span<TypeId>) public TypeId(Type t, params Span<TypeId> genericArguments) Parameters t Type genericArguments Span<TypeId> TypeId(ulong, TypeId[]) public TypeId(ulong id, TypeId[] genericArguments) Parameters id ulong genericArguments TypeId[] Properties GenericArguments The generic arguments of the type. public TypeId[] GenericArguments { get; } Property Value TypeId[] Invalid The invalid id. public static TypeId Invalid { get; } Property Value TypeId IsValid True if the TypeId is not Invalid. public bool IsValid { get; } Property Value bool Methods Equals(TypeId) Value-based equality. public bool Equals(TypeId other) Parameters other TypeId Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(TypeId, TypeId) Value-based equality. public static bool operator ==(TypeId left, TypeId right) Parameters left TypeId right TypeId Returns bool operator !=(TypeId, TypeId) Value-based equality. public static bool operator !=(TypeId left, TypeId right) Parameters left TypeId right TypeId Returns bool"
  },
  "api/MarymoorStudios.Core.Serialization.System.TypeIdSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.TypeIdSerializer.html",
    "title": "Class TypeIdSerializer",
    "summary": "Class TypeIdSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class TypeIdSerializer : Serializer<TypeId> Inheritance object Serializer Serializer<TypeId> TypeIdSerializer Inherited Members Serializer<TypeId>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TypeIdSerializer() public TypeIdSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in TypeId) public override int SizeOf(SerializationContext context, in TypeId value) Parameters context SerializationContext value TypeId Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out TypeId) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out TypeId value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value TypeId Returns bool Write(SerializationContext, ref RowBuffer, in TypeId) public override void Write(SerializationContext context, ref RowBuffer buffer, in TypeId value) Parameters context SerializationContext buffer RowBuffer value TypeId"
  },
  "api/MarymoorStudios.Core.Serialization.System.TypeMarker.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.TypeMarker.html",
    "title": "Enum TypeMarker",
    "summary": "Enum TypeMarker Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll 1-byte type code indicating the structure of the following bytes. public enum TypeMarker : byte Fields Invalid = 0 Invalid type code (useful for detecting corruption and initialization errors). Null = 1 A null literal. BooleanTrue = 2 8-bit boolean. (bool in C#). BooleanFalse = 3 Int8 = 4 8-bit signed integer. (sbyte in C#). Int16 = 5 16-bit signed integer. (short in C#). Int32 = 6 32-bit signed integer. (int in C#). Int64 = 7 64-bit signed integer. (long in C#). UInt8 = 8 8-bit unsigned integer. (byte in C#). UInt16 = 9 16-bit unsigned integer. (ushort in C#). UInt32 = 10 32-bit unsigned integer. (uint in C#). UInt64 = 11 64-bit unsigned integer. (ulong in C#). Float32 = 12 32-bit IEEE floating point value. (float in C#). Float64 = 13 64-bit IEEE floating point value. (double in C#). Decimal = 14 128-bit extended floating point value. (decimal in C#). DateTime = 15 64-bit time value. The number of 100-nanosecond ticks since 1/1/0001 12:00am. TimeSpan = 16 64-bit time value. A number of 100-nanosecond ticks in elapsed time (positive or negative). Guid = 17 128-bit globally unique identifier. TypeMarker = 18 8-bit type code from this enumeration. EnumInt8 = 20 An alias for an integral underlying type with a range of 8-bit signed integer. EnumInt16 = 21 An alias for an integral underlying type with a range of 16-bit signed integer. EnumInt32 = 22 An alias for an integral underlying type with a range of 32-bit signed integer. EnumInt64 = 23 An alias for an integral underlying type with a range of 64-bit signed integer. EnumUInt8 = 24 An alias for an integral underlying type with a range of 8-bit unsigned integer. EnumUInt16 = 25 An alias for an integral underlying type with a range of 16-bit unsigned integer. EnumUInt32 = 26 An alias for an integral underlying type with a range of 32-bit unsigned integer. EnumUInt64 = 27 An alias for an integral underlying type with a range of 64-bit unsigned integer. String = 30 A variable-length (possibly empty) sequence of UTF16 code points. TypeId = 31 Logical Type Identifier. Promise = 40 A void data promise. PromiseT = 41 A typed data promise. Proxy = 42 A proxy (by ref) promise. Object = 51 A structural composition of other primitives, objects, or arrays. Tuple1 = 52 An n-tuple of types. Tuple2 = 53 Tuple3 = 54 Tuple4 = 55 Tuple5 = 56 Tuple6 = 57 Tuple7 = 58 Tuple8 = 59 Array = 60 A variable-length (possibly empty) sequence of variable-length elements. Each element is of the same declared type, but allowing for subtypes and variable-length structures within."
  },
  "api/MarymoorStudios.Core.Serialization.System.TypeMarkerSerializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.TypeMarkerSerializer.html",
    "title": "Class TypeMarkerSerializer",
    "summary": "Class TypeMarkerSerializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class TypeMarkerSerializer : Serializer<TypeMarker> Inheritance object Serializer Serializer<TypeMarker> TypeMarkerSerializer Inherited Members Serializer<TypeMarker>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TypeMarkerSerializer() public TypeMarkerSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in TypeMarker) public override int SizeOf(SerializationContext context, in TypeMarker value) Parameters context SerializationContext value TypeMarker Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out TypeMarker) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out TypeMarker value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value TypeMarker Returns bool Write(SerializationContext, ref RowBuffer, in TypeMarker) public override void Write(SerializationContext context, ref RowBuffer buffer, in TypeMarker value) Parameters context SerializationContext buffer RowBuffer value TypeMarker"
  },
  "api/MarymoorStudios.Core.Serialization.System.UInt16Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.UInt16Serializer.html",
    "title": "Class UInt16Serializer",
    "summary": "Class UInt16Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class UInt16Serializer : Serializer<ushort> Inheritance object Serializer Serializer<ushort> UInt16Serializer Inherited Members Serializer<ushort>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UInt16Serializer() public UInt16Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ushort) public override int SizeOf(SerializationContext context, in ushort value) Parameters context SerializationContext value ushort Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ushort) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ushort value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ushort Returns bool Write(SerializationContext, ref RowBuffer, in ushort) public override void Write(SerializationContext context, ref RowBuffer buffer, in ushort value) Parameters context SerializationContext buffer RowBuffer value ushort"
  },
  "api/MarymoorStudios.Core.Serialization.System.UInt32Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.UInt32Serializer.html",
    "title": "Class UInt32Serializer",
    "summary": "Class UInt32Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class UInt32Serializer : Serializer<uint> Inheritance object Serializer Serializer<uint> UInt32Serializer Inherited Members Serializer<uint>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UInt32Serializer() public UInt32Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in uint) public override int SizeOf(SerializationContext context, in uint value) Parameters context SerializationContext value uint Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out uint) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out uint value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value uint Returns bool Write(SerializationContext, ref RowBuffer, in uint) public override void Write(SerializationContext context, ref RowBuffer buffer, in uint value) Parameters context SerializationContext buffer RowBuffer value uint"
  },
  "api/MarymoorStudios.Core.Serialization.System.UInt64Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.UInt64Serializer.html",
    "title": "Class UInt64Serializer",
    "summary": "Class UInt64Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class UInt64Serializer : Serializer<ulong> Inheritance object Serializer Serializer<ulong> UInt64Serializer Inherited Members Serializer<ulong>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UInt64Serializer() public UInt64Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ulong) public override int SizeOf(SerializationContext context, in ulong value) Parameters context SerializationContext value ulong Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ulong) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ulong value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ulong Returns bool Write(SerializationContext, ref RowBuffer, in ulong) public override void Write(SerializationContext context, ref RowBuffer buffer, in ulong value) Parameters context SerializationContext buffer RowBuffer value ulong"
  },
  "api/MarymoorStudios.Core.Serialization.System.UInt8Serializer.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.UInt8Serializer.html",
    "title": "Class UInt8Serializer",
    "summary": "Class UInt8Serializer Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class UInt8Serializer : Serializer<byte> Inheritance object Serializer Serializer<byte> UInt8Serializer Inherited Members Serializer<byte>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UInt8Serializer() public UInt8Serializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in byte) public override int SizeOf(SerializationContext context, in byte value) Parameters context SerializationContext value byte Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out byte) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out byte value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value byte Returns bool Write(SerializationContext, ref RowBuffer, in byte) public override void Write(SerializationContext context, ref RowBuffer buffer, in byte value) Parameters context SerializationContext buffer RowBuffer value byte"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-1.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-1.html",
    "title": "Class ValueTupleSerializer<T1>",
    "summary": "Class ValueTupleSerializer<T1> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1> : Serializer<ValueTuple<T1>> Type Parameters T1 Inheritance object Serializer Serializer<ValueTuple<T1>> ValueTupleSerializer<T1> Inherited Members Serializer<ValueTuple<T1>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ValueTuple<T1>) public override int SizeOf(SerializationContext context, in ValueTuple<T1> value) Parameters context SerializationContext value ValueTuple<T1> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ValueTuple<T1>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ValueTuple<T1> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ValueTuple<T1> Returns bool Write(SerializationContext, ref RowBuffer, in ValueTuple<T1>) public override void Write(SerializationContext context, ref RowBuffer buffer, in ValueTuple<T1> value) Parameters context SerializationContext buffer RowBuffer value ValueTuple<T1>"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-2.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-2.html",
    "title": "Class ValueTupleSerializer<T1, T2>",
    "summary": "Class ValueTupleSerializer<T1, T2> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2> : Serializer<(T1, T2)> Type Parameters T1 T2 Inheritance object Serializer Serializer<(T1, T2)> ValueTupleSerializer<T1, T2> Inherited Members Serializer<(T1, T2)>.SizeOf(SerializationContext, in (T1, T2)) Serializer<(T1, T2)>.Write(SerializationContext, ref RowBuffer, in (T1, T2)) Serializer<(T1, T2)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2)) Serializer<(T1, T2)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2)) public override int SizeOf(SerializationContext context, in (T1, T2) value) Parameters context SerializationContext value (T1, T2) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-3.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-3.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3> : Serializer<(T1, T2, T3)> Type Parameters T1 T2 T3 Inheritance object Serializer Serializer<(T1, T2, T3)> ValueTupleSerializer<T1, T2, T3> Inherited Members Serializer<(T1, T2, T3)>.SizeOf(SerializationContext, in (T1, T2, T3)) Serializer<(T1, T2, T3)>.Write(SerializationContext, ref RowBuffer, in (T1, T2, T3)) Serializer<(T1, T2, T3)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3)) Serializer<(T1, T2, T3)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2, T3)) public override int SizeOf(SerializationContext context, in (T1, T2, T3) value) Parameters context SerializationContext value (T1, T2, T3) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2, T3) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2, T3) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2, T3)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2, T3) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2, T3)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-4.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-4.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3, T4>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3, T4> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3, T4> : Serializer<(T1, T2, T3, T4)> Type Parameters T1 T2 T3 T4 Inheritance object Serializer Serializer<(T1, T2, T3, T4)> ValueTupleSerializer<T1, T2, T3, T4> Inherited Members Serializer<(T1, T2, T3, T4)>.SizeOf(SerializationContext, in (T1, T2, T3, T4)) Serializer<(T1, T2, T3, T4)>.Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4)) Serializer<(T1, T2, T3, T4)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4)) Serializer<(T1, T2, T3, T4)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2, T3, T4)) public override int SizeOf(SerializationContext context, in (T1, T2, T3, T4) value) Parameters context SerializationContext value (T1, T2, T3, T4) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2, T3, T4) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2, T3, T4) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2, T3, T4) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2, T3, T4)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-5.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-5.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3, T4, T5>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3, T4, T5> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3, T4, T5> : Serializer<(T1, T2, T3, T4, T5)> Type Parameters T1 T2 T3 T4 T5 Inheritance object Serializer Serializer<(T1, T2, T3, T4, T5)> ValueTupleSerializer<T1, T2, T3, T4, T5> Inherited Members Serializer<(T1, T2, T3, T4, T5)>.SizeOf(SerializationContext, in (T1, T2, T3, T4, T5)) Serializer<(T1, T2, T3, T4, T5)>.Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5)) Serializer<(T1, T2, T3, T4, T5)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5)) Serializer<(T1, T2, T3, T4, T5)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2, T3, T4, T5)) public override int SizeOf(SerializationContext context, in (T1, T2, T3, T4, T5) value) Parameters context SerializationContext value (T1, T2, T3, T4, T5) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2, T3, T4, T5) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2, T3, T4, T5) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2, T3, T4, T5) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2, T3, T4, T5)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-6.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-6.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3, T4, T5, T6> : Serializer<(T1, T2, T3, T4, T5, T6)> Type Parameters T1 T2 T3 T4 T5 T6 Inheritance object Serializer Serializer<(T1, T2, T3, T4, T5, T6)> ValueTupleSerializer<T1, T2, T3, T4, T5, T6> Inherited Members Serializer<(T1, T2, T3, T4, T5, T6)>.SizeOf(SerializationContext, in (T1, T2, T3, T4, T5, T6)) Serializer<(T1, T2, T3, T4, T5, T6)>.Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5, T6)) Serializer<(T1, T2, T3, T4, T5, T6)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5, T6)) Serializer<(T1, T2, T3, T4, T5, T6)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2, T3, T4, T5, T6)) public override int SizeOf(SerializationContext context, in (T1, T2, T3, T4, T5, T6) value) Parameters context SerializationContext value (T1, T2, T3, T4, T5, T6) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5, T6)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2, T3, T4, T5, T6) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2, T3, T4, T5, T6) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5, T6)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2, T3, T4, T5, T6) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2, T3, T4, T5, T6)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-7.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-7.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7> : Serializer<(T1, T2, T3, T4, T5, T6, T7)> Type Parameters T1 T2 T3 T4 T5 T6 T7 Inheritance object Serializer Serializer<(T1, T2, T3, T4, T5, T6, T7)> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7> Inherited Members Serializer<(T1, T2, T3, T4, T5, T6, T7)>.SizeOf(SerializationContext, in (T1, T2, T3, T4, T5, T6, T7)) Serializer<(T1, T2, T3, T4, T5, T6, T7)>.Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5, T6, T7)) Serializer<(T1, T2, T3, T4, T5, T6, T7)>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5, T6, T7)) Serializer<(T1, T2, T3, T4, T5, T6, T7)>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in (T1, T2, T3, T4, T5, T6, T7)) public override int SizeOf(SerializationContext context, in (T1, T2, T3, T4, T5, T6, T7) value) Parameters context SerializationContext value (T1, T2, T3, T4, T5, T6, T7) Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out (T1, T2, T3, T4, T5, T6, T7)) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out (T1, T2, T3, T4, T5, T6, T7) value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value (T1, T2, T3, T4, T5, T6, T7) Returns bool Write(SerializationContext, ref RowBuffer, in (T1, T2, T3, T4, T5, T6, T7)) public override void Write(SerializationContext context, ref RowBuffer buffer, in (T1, T2, T3, T4, T5, T6, T7) value) Parameters context SerializationContext buffer RowBuffer value (T1, T2, T3, T4, T5, T6, T7)"
  },
  "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-8.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.ValueTupleSerializer-8.html",
    "title": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest>",
    "summary": "Class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> Namespace MarymoorStudios.Core.Serialization.System Assembly MarymoorStudios.Core.Serialization.dll public sealed class ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> : Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> where TRest : struct Type Parameters T1 T2 T3 T4 T5 T6 T7 TRest Inheritance object Serializer Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> Inherited Members Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>.SizeOf(SerializationContext, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>.Write(SerializationContext, ref RowBuffer, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>.TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) Serializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>.Default Serializer.Register(Type, Type) Serializer.TrySizeOfDerived<TSuper>(SerializationContext, in TSuper, out int) Serializer.TryWriteDerived<TSuper>(SerializationContext, ref RowBuffer, in TSuper) Serializer.Slice(TypeId, ref TypeId, SerializationContext, ref ReadOnlyRowBuffer) Serializer.Dice(int, SerializationContext, ref ReadOnlyRowBuffer) Serializer.TryReadDerived<TSuper>(TypeId, SerializationContext, ref ReadOnlyRowBuffer, out TSuper) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ValueTupleSerializer() public ValueTupleSerializer() Properties TypeId public static TypeId TypeId { get; } Property Value TypeId Methods GetTypeId() public override TypeId GetTypeId() Returns TypeId SizeOf(SerializationContext, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) public override int SizeOf(SerializationContext context, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value) Parameters context SerializationContext value ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> Returns int TryRead(SerializationContext, ref ReadOnlyRowBuffer, out ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) public override bool TryRead(SerializationContext context, ref ReadOnlyRowBuffer buffer, out ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value) Parameters context SerializationContext buffer ReadOnlyRowBuffer value ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> Returns bool Write(SerializationContext, ref RowBuffer, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>) public override void Write(SerializationContext context, ref RowBuffer buffer, in ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value) Parameters context SerializationContext buffer RowBuffer value ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>"
  },
  "api/MarymoorStudios.Core.Serialization.System.html": {
    "href": "api/MarymoorStudios.Core.Serialization.System.html",
    "title": "Namespace MarymoorStudios.Core.Serialization.System",
    "summary": "Namespace MarymoorStudios.Core.Serialization.System Classes ArraySerializer<T> BooleanSerializer CollectionsSerializer<T> DateTimeSerializer DecimalSerializer DefaultSerializationContext Default SerializationContext that does nothing. ExceptionSerializer Float32Serializer Float64Serializer GuidSerializer IEnumerableSerializer<T> IPAddressSerializer IPEndPointSerializer Int16Serializer Int32Serializer Int64Serializer Int8Serializer ListSerializer<T> MemorySerializer<T> NullableSerializer<T> ObjectSerializer OwnedMemSerializer<T> ReadOnlyMemorySerializer<T> ReadOnlySpanSerializer<T> SerializationContext Abstract base type for a context passed to Serializer<T> during serialization and materialization operations. Serializer Serializer<T> SpanSerializer<T> StringSerializer TimeSpanSerializer TypeIdSerializer TypeMarkerSerializer UInt16Serializer UInt32Serializer UInt64Serializer UInt8Serializer ValueTupleSerializer<T1> ValueTupleSerializer<T1, T2> ValueTupleSerializer<T1, T2, T3> ValueTupleSerializer<T1, T2, T3, T4> ValueTupleSerializer<T1, T2, T3, T4, T5> ValueTupleSerializer<T1, T2, T3, T4, T5, T6> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7> ValueTupleSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> Structs ReadOnlyRowBuffer RowBuffer TypeId Interfaces IDerivedSerializer IDerivedSerializer<T> Enums TypeMarker 1-byte type code indicating the structure of the following bytes."
  },
  "api/MarymoorStudios.Core.Serialization.html": {
    "href": "api/MarymoorStudios.Core.Serialization.html",
    "title": "Namespace MarymoorStudios.Core.Serialization",
    "summary": "Namespace MarymoorStudios.Core.Serialization Classes ArrayMemoryResizer DataContractAttribute DataContractSerializer DataMemberAttribute RecordVisitor Visitor that can walk the structure of any serialized record. SerializationException Exception thrown during serialization or deserialization. SerializationExceptionSerializer Interfaces IMemoryResizer"
  },
  "api/MarymoorStudios.Core.SlabMemoryPool-1.html": {
    "href": "api/MarymoorStudios.Core.SlabMemoryPool-1.html",
    "title": "Class SlabMemoryPool<T>",
    "summary": "Class SlabMemoryPool<T> Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public sealed class SlabMemoryPool<T> : MemoryPool<T>, IDisposable where T : unmanaged Type Parameters T Inheritance object MemoryPool<T> SlabMemoryPool<T> Implements IDisposable Inherited Members MemoryPool<T>.GetMemory(int) MemoryPool<T>.Dispose() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SlabMemoryPool(int, int) public SlabMemoryPool(int maxSize, int chunksPerSlab) Parameters maxSize int chunksPerSlab int Properties MaxSize Returns the maximum buffer size supported by this pool. public override int MaxSize { get; } Property Value int Remarks The buffer size is the maximum number of T elements that a memory can contain. Note: This value must be constant for the lifetime of the pool. Methods Dispose(bool) Implements standard Dispose-pattern. protected override void Dispose(bool disposing) Parameters disposing bool True if disposing, false if finalizing. Remarks When disposing is true then managed resources should be released. When disposing is false then the object has already gone through garbage collection and only native resources should be touched. GetMemory() Returns Memory<T> of size MaxSize. public override OwnedMem<T> GetMemory() Returns OwnedMem<T>"
  },
  "api/MarymoorStudios.Core.SpanBase58Extensions.html": {
    "href": "api/MarymoorStudios.Core.SpanBase58Extensions.html",
    "title": "Class SpanBase58Extensions",
    "summary": "Class SpanBase58Extensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll Base58 Encoder. public static class SpanBase58Extensions Inheritance object SpanBase58Extensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Encodes binary strings using only alphanumerics (avoiding 0IOl for visual clarity). Methods ToBase58String(ReadOnlySpan<byte>) public static string ToBase58String(this ReadOnlySpan<byte> bytes) Parameters bytes ReadOnlySpan<byte> Returns string ToBase58String(Span<byte>) public static string ToBase58String(this Span<byte> bytes) Parameters bytes Span<byte> Returns string TryParseBase58String(ReadOnlySpan<char>, out byte[]) public static bool TryParseBase58String(this ReadOnlySpan<char> base58Chars, out byte[] result) Parameters base58Chars ReadOnlySpan<char> result byte[] Returns bool TryParseBase58String(string, out byte[]) public static bool TryParseBase58String(this string base58Chars, out byte[] result) Parameters base58Chars string result byte[] Returns bool"
  },
  "api/MarymoorStudios.Core.SpanHexExtensions.html": {
    "href": "api/MarymoorStudios.Core.SpanHexExtensions.html",
    "title": "Class SpanHexExtensions",
    "summary": "Class SpanHexExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll public static class SpanHexExtensions Inheritance object SpanHexExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ToHexString(ReadOnlySpan<byte>) public static string ToHexString(this ReadOnlySpan<byte> bytes) Parameters bytes ReadOnlySpan<byte> Returns string ToHexString(Span<byte>) public static string ToHexString(this Span<byte> bytes) Parameters bytes Span<byte> Returns string TryParseHexString(ReadOnlySpan<char>, out byte[]) public static bool TryParseHexString(this ReadOnlySpan<char> hexChars, out byte[] result) Parameters hexChars ReadOnlySpan<char> result byte[] Returns bool TryParseHexString(ReadOnlySpan<char>, Span<byte>) public static bool TryParseHexString(this ReadOnlySpan<char> hexChars, Span<byte> result) Parameters hexChars ReadOnlySpan<char> result Span<byte> Returns bool TryParseHexString(string, out byte[]) public static bool TryParseHexString(this string hexChars, out byte[] result) Parameters hexChars string result byte[] Returns bool"
  },
  "api/MarymoorStudios.Core.UpgradableLockScope.html": {
    "href": "api/MarymoorStudios.Core.UpgradableLockScope.html",
    "title": "Struct UpgradableLockScope",
    "summary": "Struct UpgradableLockScope Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll An upgradable read-lock scope for use with ReaderWriterLockSlim. public readonly struct UpgradableLockScope : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks The lock is upgraded by acquiring a write-lock while this upgradable read-lock is held. See WriteLockScope. Constructors UpgradableLockScope(ReaderWriterLockSlim) Acquires an upgradable read-lock which is released on dispose. public UpgradableLockScope(ReaderWriterLockSlim m) Parameters m ReaderWriterLockSlim Methods Dispose() Releases the held lock. public void Dispose()"
  },
  "api/MarymoorStudios.Core.WaitHandleExtensions.html": {
    "href": "api/MarymoorStudios.Core.WaitHandleExtensions.html",
    "title": "Class WaitHandleExtensions",
    "summary": "Class WaitHandleExtensions Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll Extensions to the standard WaitHandle. public static class WaitHandleExtensions Inheritance object WaitHandleExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WaitOneAsync(WaitHandle, CancellationToken) Equivalent to a call to WaitOne() without blocking a thread. public static Task WaitOneAsync(this WaitHandle handle, CancellationToken cancel = default) Parameters handle WaitHandle The handle to wait on. cancel CancellationToken Cancellation Token. Returns Task A task that resolves when the wait is complete."
  },
  "api/MarymoorStudios.Core.WriteLockScope.html": {
    "href": "api/MarymoorStudios.Core.WriteLockScope.html",
    "title": "Struct WriteLockScope",
    "summary": "Struct WriteLockScope Namespace MarymoorStudios.Core Assembly MarymoorStudios.Core.dll A write-lock scope for use with ReaderWriterLockSlim. public readonly struct WriteLockScope : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors WriteLockScope(ReaderWriterLockSlim) Acquires a write-lock which is released on dispose. public WriteLockScope(ReaderWriterLockSlim m) Parameters m ReaderWriterLockSlim Methods Dispose() Releases the held lock. public void Dispose()"
  },
  "api/MarymoorStudios.Core.html": {
    "href": "api/MarymoorStudios.Core.html",
    "title": "Namespace MarymoorStudios.Core",
    "summary": "Namespace MarymoorStudios.Core Classes CertificateExtensions Contract Used to check contract invariants in either Debug-only (Assert) or Debug and Release (Requires, Invariant, etc.). Contract failures will attempt to break into the debugger, will trace the error, and will throw a ContractViolationException. Crc32 CRC Generator. EnumTraits<TEnum> GcNotify Notifies when garbage collection occurs. Linear LinqExtensions MathExtensions MemoryPool<T> A pool of memory blocks. MurmurHash3 MurmurHash3 for x64 (Little Endian). RandomExtensions SlabMemoryPool<T> SpanBase58Extensions Base58 Encoder. SpanHexExtensions WaitHandleExtensions Extensions to the standard WaitHandle. Structs OwnedMem<T> A capability for the exclusive ownership rights to an underlying memory. ReadLockScope A read-lock scope for use with ReaderWriterLockSlim. UpgradableLockScope An upgradable read-lock scope for use with ReaderWriterLockSlim. WriteLockScope A write-lock scope for use with ReaderWriterLockSlim."
  }
}